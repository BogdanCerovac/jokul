{"version":3,"sources":["webpack:///../packages/text-input-react/src/TextArea.tsx","webpack:///../packages/text-input-react/src/BaseInputField.tsx","webpack:///../packages/text-input-react/src/TextInput.tsx","webpack:///../packages/text-input-react/documentation/TextInputExample.tsx","webpack:///../packages/text-input-react/documentation/TextAreaExample.tsx","webpack:///../packages/text-input-react/documentation/TextInput.mdx"],"names":["TextArea","forwardRef","ref","id","variant","inverted","label","className","helpLabel","errorLabel","rows","placeholder","autoExpand","forceCompact","restProps","componentClassName","classNames","uid","useState","nanoid","supportId","textAreaFocused","setTextAreaFocused","baseScrollHeight","setBaseScrollHeight","currentRows","setCurrentRows","internalRef","useRef","textAreaRef","useEffect","textAreaElement","current","savedValue","value","savedPlaceholder","savedRows","scrollHeight","minimumRows","calculatedRows","lineHeightWithPx","window","getComputedStyle","lineHeight","parseInt","replace","Math","ceil","calculateRows","max","data-testid","standAlone","htmlFor","onFocus","e","onBlur","aria-invalid","aria-describedby","undefined","style","height","overflowX","displayName","getWidthAsStyle","width","maxLength","min","BaseInputField","describedBy","invalid","type","rest","TextInput","inline","action","inputProps","srOnly","iconType","icon","buttonTitle","onClick","TextInputExample","choiceValues","boolValues","setValue","compact","onChange","target","onKeyDown","console","log","TextAreaExample","_frontmatter","makeShortcode","name","props","warn","Ingress","ComponentExample","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","component","knobs","boolProps","choiceProps","values","defaultValue","parentName","isMDXComponent"],"mappings":"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","file":"component---packages-text-input-react-documentation-text-input-mdx-8c0be15c779c74e7292a.js","sourcesContent":["import React, { forwardRef, FocusEvent, useRef, useState, useEffect, RefObject } from \"react\";\nimport classNames from \"classnames\";\nimport nanoid from \"nanoid\";\nimport { Label, SupportLabel, LabelVariant } from \"@fremtind/jkl-core\";\nimport { BaseProps } from \"./BaseInputField\";\n\nexport interface Props extends BaseProps {\n    label: string;\n    helpLabel?: string;\n    errorLabel?: string;\n    variant?: LabelVariant;\n    inverted?: boolean;\n    forceCompact?: boolean;\n    rows?: number;\n    autoExpand?: boolean;\n}\n\nexport const TextArea = forwardRef<HTMLTextAreaElement, Props>(\n    (\n        {\n            id,\n            variant,\n            inverted,\n            label,\n            className,\n            helpLabel,\n            errorLabel,\n            rows = 7,\n            placeholder = \" \",\n            autoExpand = false,\n            forceCompact,\n            ...restProps\n        },\n        ref,\n    ) => {\n        const componentClassName = classNames(\"jkl-text-input jkl-text-area\", className, {\n            \"jkl-text-input--compact\": forceCompact,\n            \"jkl-text-input--inverted\": inverted,\n        });\n        const [uid] = useState(id || `jkl-text-area-${nanoid(8)}`);\n        const [supportId] = useState(`jkl-support-label-${nanoid(8)}`);\n\n        const [textAreaFocused, setTextAreaFocused] = useState(false);\n        const [baseScrollHeight, setBaseScrollHeight] = useState(0);\n        const [currentRows, setCurrentRows] = useState(1);\n        const internalRef = useRef<HTMLTextAreaElement>(null);\n        const textAreaRef = (ref as RefObject<HTMLTextAreaElement>) || internalRef;\n\n        useEffect(() => {\n            const textAreaElement = textAreaRef.current;\n            if (autoExpand && textAreaElement) {\n                const savedValue = textAreaElement.value;\n                const savedPlaceholder = textAreaElement.placeholder;\n                const savedRows = textAreaElement.rows;\n                // BaseScrollHeight must be calculated from an empty textarea and empty placeholder.\n                textAreaElement.value = \"\";\n                textAreaElement.placeholder = \"\";\n                textAreaElement.rows = 1;\n                setBaseScrollHeight(textAreaElement.scrollHeight);\n                textAreaElement.value = savedValue;\n                textAreaElement.placeholder = savedPlaceholder;\n                textAreaElement.rows = savedRows;\n            }\n        }, [textAreaRef, autoExpand]);\n\n        useEffect(() => {\n            const textAreaElement = textAreaRef.current;\n            const minimumRows = rows;\n\n            if (textAreaElement) {\n                const calculatedRows = calculateRows(textAreaElement, baseScrollHeight);\n                if (textAreaFocused || restProps.value) {\n                    setCurrentRows(Math.max(minimumRows, calculatedRows));\n                } else {\n                    setCurrentRows(calculatedRows);\n                }\n            }\n        }, [textAreaRef, restProps.value, textAreaFocused, baseScrollHeight, rows]);\n\n        function onFocus(e: FocusEvent<HTMLTextAreaElement>) {\n            setTextAreaFocused(true);\n            restProps.onFocus && restProps.onFocus(e);\n        }\n\n        function onBlur(e: FocusEvent<HTMLTextAreaElement>) {\n            setTextAreaFocused(false);\n            restProps.onBlur && restProps.onBlur(e);\n        }\n\n        function calculateRows(textAreaElement: HTMLTextAreaElement, baseScrollHeight: number) {\n            const lineHeightWithPx = window ? window.getComputedStyle(textAreaElement).lineHeight : \"16px\"; // Default to 16px\n            const lineHeight = parseInt(lineHeightWithPx.replace(\"px\", \"\"));\n            const savedRows = textAreaElement.rows;\n            // We need to set rows to 1 to shrink the textarea when removing characters.\n            textAreaElement.rows = 1;\n            const calculatedRows = Math.ceil((textAreaElement.scrollHeight - baseScrollHeight) / lineHeight) + 1;\n            textAreaElement.rows = savedRows;\n            return calculatedRows;\n        }\n\n        return (\n            <div data-testid=\"jkl-text-area\" className={componentClassName}>\n                <Label standAlone htmlFor={uid} variant={variant} forceCompact={forceCompact}>\n                    {label}\n                </Label>\n                <textarea\n                    id={uid}\n                    ref={textAreaRef}\n                    className={`jkl-text-input__input jkl-text-input__input--${rows}-rows`}\n                    onFocus={onFocus}\n                    onBlur={onBlur}\n                    aria-invalid={!!errorLabel}\n                    aria-describedby={supportId}\n                    placeholder={placeholder}\n                    rows={autoExpand ? currentRows : undefined}\n                    // Must set overflowX hidden for Firefox https://stackoverflow.com/a/22700700\n                    style={autoExpand ? { height: \"auto\", overflowX: \"hidden\" } : undefined}\n                    {...restProps}\n                />\n                <SupportLabel\n                    inverted={inverted}\n                    id={supportId}\n                    helpLabel={helpLabel}\n                    errorLabel={errorLabel}\n                    forceCompact={forceCompact}\n                />\n            </div>\n        );\n    },\n);\n\nTextArea.displayName = \"TextArea\";\n","import React, { ChangeEventHandler, FocusEventHandler, CSSProperties, forwardRef, KeyboardEventHandler } from \"react\";\n\nexport interface BaseProps {\n    id?: string;\n    className?: string;\n    maxLength?: number;\n    width?: string;\n    value?: string;\n    onChange?: ChangeEventHandler<HTMLInputElement | HTMLTextAreaElement>;\n    onBlur?: FocusEventHandler<HTMLInputElement | HTMLTextAreaElement>;\n    onFocus?: FocusEventHandler<HTMLInputElement | HTMLTextAreaElement>;\n    onKeyDown?: KeyboardEventHandler<HTMLInputElement | HTMLTextAreaElement>;\n    onKeyUp?: KeyboardEventHandler<HTMLInputElement | HTMLTextAreaElement>;\n    onKeyPress?: KeyboardEventHandler<HTMLInputElement | HTMLTextAreaElement>;\n    placeholder?: string;\n    readOnly?: boolean;\n    autoComplete?: string;\n    required?: boolean;\n    type?: \"text\" | \"number\" | \"tel\" | \"password\" | \"email\" | \"year\";\n}\n\nexport interface Props extends BaseProps {\n    describedBy?: string;\n    style?: CSSProperties;\n    invalid?: boolean;\n}\n\nfunction getWidthAsStyle(width?: string, maxLength?: number): CSSProperties | undefined {\n    if (width) {\n        return { width }; // prioritize width prop\n    }\n\n    if (maxLength) {\n        // adapt to maxLength, but capped at 40ch\n        const length = Math.min(maxLength, 40);\n        return { width: `${length}ch` };\n    }\n\n    return undefined;\n}\n\nexport const BaseInputField = forwardRef<HTMLInputElement, Props>(\n    ({ id, describedBy, invalid, maxLength, width, type = \"text\", className = \"\", ...rest }, ref) => (\n        <input\n            ref={ref}\n            id={id}\n            className={`jkl-text-input__input ${className}`}\n            style={getWidthAsStyle(width, maxLength)}\n            aria-describedby={describedBy}\n            aria-invalid={invalid}\n            maxLength={maxLength}\n            type={type}\n            {...rest}\n        />\n    ),\n);\nBaseInputField.displayName = \"BaseInputField\";\n","import React, { forwardRef, useState, HTMLAttributes, MouseEventHandler } from \"react\";\nimport nanoid from \"nanoid\";\nimport classNames from \"classnames\";\nimport { Label, SupportLabel, LabelVariant } from \"@fremtind/jkl-core\";\nimport { IconButton, IconVariant } from \"@fremtind/jkl-icon-button-react\";\nimport { BaseInputField, BaseProps } from \"./BaseInputField\";\n\nexport interface Action extends Exclude<HTMLAttributes<HTMLButtonElement>, \"disabled\"> {\n    icon: IconVariant;\n    label: string;\n    onClick: MouseEventHandler<HTMLButtonElement>;\n}\n\nexport interface Props extends BaseProps {\n    label: string;\n    helpLabel?: string;\n    errorLabel?: string;\n    variant?: LabelVariant;\n    inverted?: boolean;\n    forceCompact?: boolean;\n    inline?: boolean;\n    action?: Action;\n}\n\nexport const TextInput = forwardRef<HTMLInputElement, Props>(\n    (\n        {\n            id,\n            className,\n            label,\n            helpLabel,\n            errorLabel,\n            variant = \"medium\",\n            inline,\n            inverted,\n            forceCompact,\n            action,\n            ...inputProps\n        },\n        ref,\n    ) => {\n        const [uid] = useState(id || `jkl-text-input-${nanoid(8)}`);\n        const [supportId] = useState(`jkl-support-label-${nanoid(8)}`);\n        const hasSupportText = helpLabel || errorLabel;\n        const describedBy = hasSupportText ? supportId : undefined;\n        const componentClassName = classNames(\n            {\n                \"jkl-text-input\": true,\n                \"jkl-text-input--inline\": inline,\n                \"jkl-text-input--inverted\": inverted,\n                \"jkl-text-input--compact\": forceCompact,\n                \"jkl-text-input--action\": action,\n            },\n            className,\n        );\n        return (\n            <div data-testid=\"jkl-text-input\" className={componentClassName}>\n                <Label forceCompact={forceCompact} standAlone srOnly={inline} htmlFor={uid} variant={variant}>\n                    {label}\n                </Label>\n                <div className=\"jkl-text-input__input-wrapper\">\n                    <BaseInputField\n                        ref={ref}\n                        id={uid}\n                        describedBy={describedBy}\n                        invalid={!!errorLabel}\n                        className=\"jkl-text-input__input\"\n                        {...inputProps}\n                    />\n                    {action && (\n                        <IconButton\n                            className=\"jkl-text-input__action-button\"\n                            iconType={action.icon}\n                            buttonTitle={action.label}\n                            onClick={action.onClick}\n                            onFocus={action.onFocus}\n                            onBlur={action.onBlur}\n                        />\n                    )}\n                </div>\n                <SupportLabel\n                    inverted={inverted}\n                    id={supportId}\n                    helpLabel={helpLabel}\n                    errorLabel={errorLabel}\n                    srOnly={inline}\n                />\n            </div>\n        );\n    },\n);\nTextInput.displayName = \"TextInput\";\n","import React, { useState, ChangeEvent } from \"react\";\nimport { ExampleComponentProps } from \"@fremtind/jkl-portal-components\";\nimport { LabelVariant } from \"@fremtind/jkl-core\";\nimport { TextInput } from \"../src\";\nimport { Action } from \"../src/TextInput\";\n\nexport function TextInputExample({ choiceValues, boolValues }: ExampleComponentProps) {\n    const [value, setValue] = useState(\"\");\n    const handleChange = (e: ChangeEvent<HTMLInputElement>) => setValue(e.target.value);\n    const variant = choiceValues && (choiceValues[\"Variant\"] as LabelVariant);\n    const inline = boolValues && boolValues[\"Inline\"];\n    const action =\n        boolValues && boolValues[\"Med handling\"]\n            ? ({\n                  icon: \"clear\",\n                  label: \"Nullstill feltet\",\n                  onClick: () => setValue(\"\"),\n              } as Action)\n            : undefined;\n    const inverted = boolValues && boolValues[\"Invertert\"];\n    const compact = boolValues && boolValues[\"Kompakt\"];\n    const helpLabel = boolValues && boolValues[\"Med hjelpetekst\"] ? \"Help label\" : undefined;\n    const errorLabel = boolValues && boolValues[\"Med feilmelding\"] ? \"Error label\" : undefined;\n\n    return (\n        <TextInput\n            variant={variant}\n            inline={inline}\n            inverted={inverted}\n            forceCompact={compact}\n            action={action}\n            label=\"Skriv noe her\"\n            helpLabel={helpLabel}\n            errorLabel={errorLabel}\n            placeholder=\"Placeholder\"\n            maxLength={35}\n            value={value}\n            onChange={handleChange}\n            onKeyDown={() => console.log(\"onKeyDown event\")}\n        />\n    );\n}\n","import React, { useState, ChangeEvent } from \"react\";\nimport { ExampleComponentProps } from \"@fremtind/jkl-portal-components\";\nimport { LabelVariant } from \"@fremtind/jkl-core\";\nimport { TextArea } from \"../src\";\n\nexport function TextAreaExample({ choiceValues, boolValues }: ExampleComponentProps) {\n    const [value, setValue] = useState(\"\");\n    const handleChange = (e: ChangeEvent<HTMLTextAreaElement>) => setValue(e.target.value);\n    const variant = choiceValues && (choiceValues[\"Variant\"] as LabelVariant);\n    const inverted = boolValues && boolValues[\"Invertert\"];\n    const compact = boolValues && boolValues[\"Kompakt\"];\n    const autoExpand = boolValues && boolValues[\"Ekspanderende\"];\n    const helpLabel = boolValues && boolValues[\"Med hjelpetekst\"] ? \"Help label\" : undefined;\n    const errorLabel = boolValues && boolValues[\"Med feilmelding\"] ? \"Error label\" : undefined;\n\n    return (\n        <TextArea\n            variant={variant}\n            inverted={inverted}\n            forceCompact={compact}\n            placeholder=\"Placeholder\"\n            helpLabel={helpLabel}\n            errorLabel={errorLabel}\n            className=\"jkl-spacing--top-2\"\n            label=\"Skriv noe her\"\n            autoExpand={autoExpand}\n            value={value}\n            onChange={handleChange}\n            onKeyDown={() => console.log(\"onKeyDown event\")}\n        />\n    );\n}\n","import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/jokul/jokul/portal/src/components/Layout/DocPageLayout.tsx\";\nimport { TextInputExample } from \"./TextInputExample\";\nimport { TextAreaExample } from \"./TextAreaExample\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst Ingress = makeShortcode(\"Ingress\");\nconst ComponentExample = makeShortcode(\"ComponentExample\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <Ingress mdxType=\"Ingress\">\n    Vi bruker tekstfelt når vi vil at brukerne skal legge inn informasjon. Ledeteksten skal fortelle hva brukeren skal\n    oppgi i feltet.\n    </Ingress>\n    <ComponentExample component={TextInputExample} knobs={{\n      boolProps: [\"Inline\", \"Kompakt\", \"Invertert\", \"Med handling\", \"Med hjelpetekst\", \"Med feilmelding\"],\n      choiceProps: [{\n        name: \"Variant\",\n        values: [\"small\", \"medium\", \"large\"],\n        defaultValue: 1\n      }]\n    }} mdxType=\"ComponentExample\" />\n    <p>{`Tekstfelt godtar data med fast format eller fritekst. Fast format bruker du for eksempel når du vil at brukeren skal angi fødselsnummer eller et postnummer, mens fritekst passer til felt der brukerne skal fortelle noe med egne ord.`}</p>\n    <p>{`Velg størrelse på tekstefelt etter typen data brukerne skal legge inn.`}</p>\n    <h2>{`Typer tekstfelt`}</h2>\n    <p><strong parentName=\"p\">{`Vanlige tekstfelt:`}</strong>{`\nFor innhold som ikke overskrider lengden på feltet.`}</p>\n    <p><strong parentName=\"p\">{`Inline tekstfelt:`}</strong>{`\nTil spesialtilfeller, hvis vi for eksempel trenger å plassere et tekstfelt i en setning.`}</p>\n    <p><strong parentName=\"p\">{`Lange tekstfelt:`}</strong>{`\nNår innholdet blir lengre enn en setning. Høyden på feltet kan justeres.`}</p>\n    <ComponentExample component={TextAreaExample} knobs={{\n      boolProps: [\"Kompakt\", \"Invertert\", \"Ekspanderende\", \"Med hjelpetekst\", \"Med feilmelding\"],\n      choiceProps: [{\n        name: \"Variant\",\n        values: [\"small\", \"medium\", \"large\"],\n        defaultValue: 1\n      }]\n    }} mdxType=\"ComponentExample\" />\n    <h2>{`Tekst og validering`}</h2>\n    <p>{`Velg størrelse på ledetekst etter prinsippene for skjemadesign. Skriv en kort og tydelig ledetekst, som forteller brukerne hva de skal oppgi i feltet. Hvis det trengs, kan vi sette inn en hjelpetekst under feltet, som forklarer mer.`}</p>\n    <p>{`Hvis tekstfeltet ikke validerer, vises en feilmelding som forteller hva som er galt. Vær oppmerskom på at feilmeldingen erstatter en eventuell hjelpetekst, slik at den feilmeldingen du lager også må fortelle hva hjelpeteksten var.`}</p>\n    <p>{`Eksempel:\nHjelpetekst for et tekstfelt med fast format: `}<em parentName=\"p\">{`Fyll ut fødselsnummer, 11 siffer.`}</em>{` Feilemeldingstekst: `}<em parentName=\"p\">{`Du må fylle ut fødselsnummer, 11 siffer`}</em>{`.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}