{"version":3,"sources":["webpack:///./src/texts/profile/colors.mdx","webpack:///./src/components/Documentation/Colors/Colors.tsx","webpack:///./src/components/Documentation/Colors/ColorDescription.tsx","webpack:///./src/components/Documentation/Colors/ColorTable.tsx","webpack:///./src/utils/getComputedProperty.ts"],"names":["name","componentToHex","numValue","hexVal","toString","toUpperCase","length","rgbToHex","rgbValue","ColorSwatch","colorVariable","className","setColor","swatchClasses","classNames","ref","useRef","React","useLayoutEffect","rgb","getComputedProperty","current","split","map","color","parseInt","replace","role","aria-label","viewBox","fill","d","ColorInfo","cmyk","pantone","vertical","colorInfoClassName","useState","ColorDescription","title","children","colorInfo","TwoToneColorDescription","darkColor","screen","useScreen","isSmallDevice","ColorTableRow","data-header","r","g","b","ColorTable","colors","key","gratoner","vardetoner","GraTable","VardeTable","_frontmatter","Ingress","props","console","warn","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","isMDXComponent","node","cssProperty","window","getComputedStyle","getPropertyValue"],"mappings":"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","file":"component---src-texts-profile-colors-mdx-251a95b3b717595268ea.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/jokul/jokul/portal/src/components/Layout/DocPageLayout.tsx\";\nimport { ColorDescription, TwoToneColorDescription } from \"../../components/Documentation/Colors/ColorDescription\";\nimport { GraTable, VardeTable } from \"../../components/Documentation/Colors/ColorTable\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst Ingress = makeShortcode(\"Ingress\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1>{`Farger`}</h1>\n    <Ingress mdxType=\"Ingress\">\n    Farger er en viktig del av Fremtinds identitet. Det etterlatte inntrykket av våre løsninger skal være hvitt, med\n    svart og varde som profilbærende farger. Profilen støttes av funksjonelle farger, som er inspirert av norsk natur.\n    </Ingress>\n    <h2>{`Primærfargene`}</h2>\n    <p>{`Disse fargene bruker vi både på trykk og i digitale flater. Disse bærer profilen vår og er de mest gjenkjennelige fargene i vårt uttrykk. Primærfargene våre er:`}</p>\n    <ColorDescription title=\"Hvit\" colorVariable=\"hvit\" rgbValue={{\n      r: 255,\n      g: 255,\n      b: 255\n    }} cmyk=\"0 0 0 0\" mdxType=\"ColorDescription\">\n    Hvit bruker vi mest som bakgrunnsfarge, og som tekstfarge der vi har mørke flater. I tillegg er den fokusfarge, for\n    eksempel på kort som er opphøyd over annet innhold, eller på inndataelementer som brukeren har valgt, for eksempel\n    et felt i et skjema.\n    </ColorDescription>\n    <ColorDescription title=\"Svart\" colorVariable=\"svart\" cmyk=\"15 15 15 100\" pantone=\"Pantone Black U\" mdxType=\"ColorDescription\">\n    Svart bruker vi gjerne i elementer vi vil fremheve. Et godt eksempel er den svarte primærknappen. Vi kan bruke\n    store, svarte flater, men de bør ha lite innhold i forhold til størrelsen. Unngå å sette svarte flater nær\n    bakgrunner med fargen varde.\n    </ColorDescription>\n    <ColorDescription title=\"Varde\" colorVariable=\"varde\" cmyk=\"12 13 19 0\" pantone=\"Pantone 2310 U\" mdxType=\"ColorDescription\">\n    Varde bruker vi som bakgrunnsfarge eller på elementer for å fremheve innhold. Når vi velger å bruke den på en flate,\n    unngår vi å ha mye innhold på den, i forhold til størrelsen. Bruk svart på teksten, for å sikre god kontrast. Ikke\n    bruke varde på flater som står nærme grå bakgrunner og elementer, eller svarte flater.\n    </ColorDescription>\n    <h2>{`Grå- og vardevalørene`}</h2>\n    <p>{`Vi har et sett av valører for grå og varde. Disse kan vi bruke til å skape nyanser og nivåer i løsningene våre. Vi bruker disse i hovedsak bare på digitale flater.`}</p>\n    <h3>{`Gråvalører (Grå 10 - Grå 100)`}</h3>\n    <GraTable mdxType=\"GraTable\" />\n    <p>{`Disse kan brukes på elementer for å bryte opp layout og for å ha flere nyanser enn svart og hvit. For bruk til større flater og bakgrunner skal det bare brukes Grå-10, Grå-20, Grå-90 og Grå-100. Ikke bruk grå flater sammen med Varde, og vær obs på kontrast til innholdet når du bruker de ulike valørene.`}</p>\n    <p>{`Grå 10 til Grå 50 kan brukes med svart tekst, mens Grå 60 til Grå 100 kan brukes med hvit tekst.`}</p>\n    <h3>{`Vardevalører (Varde 10 - Varde 100)`}</h3>\n    <VardeTable mdxType=\"VardeTable\" />\n    <p>{`De lysere vardevalørene (Varde 50 og lavere) kan brukes som bakgrunnsflater eller på elementer for å bryte opp layout. Bruk de mørkere vardevalørene (Varde 60 og opp) med omhu. Ikke benytt de aller mørkeste som bakgrunnsfarge eller farge på større flater.`}</p>\n    <p>{`For Varde 10 til Varde 90 skal man bruke svart tekst.`}</p>\n    <h2>{`Meldingsfargene`}</h2>\n    <p>{`Meldingsfargene bruker vi på digitale flater, for eksempel når vi trenger å gi informasjon fra systemet. Feil, advarsler, informasjonsmeldinger, grafer og fokusringer ved tastaturnavigasjon er eksempler på hva vi bruker meldingsfargene til. Meldingsfargene skal bare brukes funksjonelt, det vil si ikke som rene dekorelementer.`}</p>\n    <p>{`Meldingsfargene finnes for mørk og lys bakgrunn.`}</p>\n    <TwoToneColorDescription className=\"jkl-spacing--top-3\" title=\"Suksessfarge\" color={{\n      colorVariable: \"suksess\"\n    }} darkColor={{\n      colorVariable: \"suksess--darkbg\"\n    }} mdxType=\"TwoToneColorDescription\">\n    En grønnfarge som vi bruker til å vise at en handling er vellykket, for eksempel at brukeren er ferdig med noe.\n    </TwoToneColorDescription>\n    <TwoToneColorDescription title=\"Infofarge\" color={{\n      colorVariable: \"info\"\n    }} darkColor={{\n      colorVariable: \"info--darkbg\"\n    }} mdxType=\"TwoToneColorDescription\">\n    Blåfargen bruker vi til informasjonsmeldinger og fokustilstander.\n    </TwoToneColorDescription>\n    <TwoToneColorDescription title=\"Advarselsfarge\" color={{\n      colorVariable: \"advarsel\"\n    }} darkColor={{\n      colorVariable: \"advarsel--darkbg\"\n    }} mdxType=\"TwoToneColorDescription\">\n    Denne gulfargen er til advarsler. Denne oppfyller ikke kontrastkravet mot hvit så den kan ikke være funksjonsbærende\n    mot hvite flater uten andre virkemiddler (e.g. tekst).\n    </TwoToneColorDescription>\n    <TwoToneColorDescription title=\"Feilfarge\" color={{\n      colorVariable: \"feil\"\n    }} darkColor={{\n      colorVariable: \"feil--darkbg\"\n    }} mdxType=\"TwoToneColorDescription\">\n    En rødfarge som vi bruker til feilmeldinger eller andre viktige varsler.\n    </TwoToneColorDescription>\n    <h2>{`Tilgjengelighet`}</h2>\n    <p>{`Tilgjengelighet er noe av det viktigste å tenke på når vi bruker farger i digitale løsninger. Vi skal alltid følge kravene til universell utforming. For farger betyr det AA-kravet for kontrast. Kontrastkravet gjelder ikke bare tekst på bakgrunn, men også komponentenes kontrast mot sin egen bakgrunn, når det har betydning for å forstå funksjonaliteten.`}</p>\n    <p>{`I tillegg til å tenke på tekst mot knappebakgrunnen, må vi også tenke på knappebakgrunnen mot sidens bakgrunnsfarge dersom det er viktig for å forstå funksjonen til komponenten.`}</p>\n    <p>{`Tekstfargene våre er helhvit eller svart. Se fargebeskrivelsene for å finne ut hvilken farge du skal bruke mot hvilken bakgrunn, for å overholde kontrastkravet.`}</p>\n    <h3>{`Plugins til Figma`}</h3>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://www.figma.com/community/plugin/733159460536249875/A11y---Color-Contrast-Checker\"\n        }}>{`A11y - Color Contrast Checker`}</a></li>\n      <li parentName=\"ul\">{`Se også `}<a parentName=\"li\" {...{\n          \"href\": \"https://www.figma.com/blog/design-for-everyone-with-these-accessibility-focused-plugins/\"\n        }}>{`denne listen`}</a>{` over nyttige plugins.`}</li>\n    </ul>\n    <h3>{`Andre verktøy`}</h3>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://webaim.org/resources/contrastchecker/\"\n        }}>{`WebAIM Contrast Checker`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://developer.paciellogroup.com/resources/contrastanalyser/\"\n        }}>{`Colour Contrast Analyzer`}</a></li>\n    </ul>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","import React, { useRef, useState } from \"react\";\nimport classNames from \"classnames\";\n\nimport \"./Colors.scss\";\nimport { getComputedProperty } from \"../../../utils/getComputedProperty\";\n\ntype RgbValue = number[];\n\nexport interface Color {\n    colorVariable: string;\n    cmyk?: string;\n    pantone?: string;\n}\n\nconst componentToHex = (numValue: number) => {\n    const hexVal = numValue.toString(16).toUpperCase();\n    return hexVal.length === 1 ? `0${hexVal}` : hexVal;\n};\nexport const rgbToHex = (rgbValue: RgbValue) =>\n    componentToHex(rgbValue[0]) + componentToHex(rgbValue[1]) + componentToHex(rgbValue[2]);\n\ninterface ColorSwatchProps {\n    colorVariable: string;\n    className?: string;\n    setColor?: (color: number[]) => void;\n}\n\nexport const ColorSwatch = ({ colorVariable, className, setColor }: ColorSwatchProps) => {\n    const swatchClasses = classNames(\n        {\n            \"jkl-portal-color-swatch\": true,\n            \"jkl-portal-color-swatch--hvit\": colorVariable === \"hvit\",\n            \"jkl-portal-color-swatch--svart\": colorVariable === \"svart\",\n        },\n        className,\n    );\n    const ref = useRef<SVGSVGElement>(null);\n    React.useLayoutEffect(() => {\n        const rgb = getComputedProperty(ref.current, \"color\").split(\",\");\n        if (typeof setColor === \"function\") {\n            setColor(rgb.map((color) => parseInt(color.replace(/[^0-9]/g, \"\"), 10)));\n        }\n    }, []);\n    return (\n        <svg\n            ref={ref}\n            role=\"img\"\n            aria-label={`Fargeprøve av fargen ${colorVariable}`}\n            className={`${swatchClasses} jkl-color-${colorVariable}`}\n            viewBox=\"0 0 20 20\"\n            fill=\"none\"\n        >\n            <title>{`Fargeprøve av fargen ${colorVariable}`}</title>\n            <path\n                className=\"jkl-portal-color-swatch__diamond\"\n                d=\"M0.0707109 10L10 0.0707109L19.9293 10L10 19.9293L0.0707109 10Z\"\n            />\n        </svg>\n    );\n};\n\ninterface ColorInfoProps extends Color {\n    vertical?: boolean;\n    className?: string;\n}\n\nexport const ColorInfo = ({ colorVariable, cmyk, pantone, vertical, className }: ColorInfoProps) => {\n    const colorInfoClassName = classNames(\n        {\n            \"jkl-portal-color-info\": true,\n            \"jkl-portal-color-info--vertical\": vertical,\n        },\n        className,\n    );\n    const [color, setColor] = useState<number[]>();\n    return (\n        <article className={colorInfoClassName}>\n            <ColorSwatch setColor={setColor} className=\"jkl-portal-color-info__swatch\" colorVariable={colorVariable} />\n            <p className=\"jkl-portal-color-info__values jkl-small\">\n                {color && color.length === 3 && (\n                    <>\n                        {`RGB: ${color[0]} ${color[1]} ${color[2]}`} <br />\n                        {`HEX: ${rgbToHex(color)}`}\n                    </>\n                )}\n                {cmyk && <br />}\n                {cmyk && `CMYK: ${cmyk}`}\n                {pantone && <br />}\n                {pantone}\n            </p>\n        </article>\n    );\n};\n","import React from \"react\";\nimport { useScreen } from \"@fremtind/jkl-react-hooks\";\n\nimport { ColorInfo, Color } from \"./Colors\";\nimport \"./ColorDescription.scss\";\n\ninterface ColorDescriptionProps extends Color {\n    title: string;\n}\n\nexport const ColorDescription: React.FC<ColorDescriptionProps> = ({ title, children, ...colorInfo }) => (\n    <article className=\"jkl-portal-color-description\">\n        <h3 className=\"jkl-portal-color-description__title jkl-heading-medium\">{title}</h3>\n        <ColorInfo className=\"jkl-portal-color-description__swatch\" {...colorInfo} />\n        <p className=\"jkl-portal-color-description__text jkl-body jkl-portal-paragraph\">{children}</p>\n    </article>\n);\n\ninterface TwoToneProps extends ColorDescriptionProps {\n    color: Color;\n    darkColor: Color;\n    className?: string;\n}\nexport const TwoToneColorDescription: React.FC<TwoToneProps> = ({ title, color, darkColor, className, children }) => {\n    const screen = useScreen();\n    return (\n        <article className={`jkl-portal-two-tone-description ${className ? className : \"\"}`}>\n            <div className=\"jkl-portal-two-tone-description__info-wrapper\">\n                <h3 className=\"jkl-portal-two-tone-description__title jkl-heading-medium\">{title}</h3>\n                <p className=\"jkl-portal-two-tone-description__info jkl-body\">{children}</p>\n            </div>\n            <div className=\"jkl-portal-two-tone-description__light-color\">\n                <ColorInfo vertical={!screen.isSmallDevice} {...color} />\n            </div>\n            <div className=\"jkl-portal-two-tone-description__dark-color\">\n                <ColorInfo vertical={!screen.isSmallDevice} {...darkColor} />\n            </div>\n        </article>\n    );\n};\n","import React from \"react\";\nimport { Color, ColorSwatch, rgbToHex } from \"./Colors\";\n\nimport \"./ColorTable.scss\";\n\ninterface Props extends Color {\n    rgbValue: { r: number; g: number; b: number };\n}\n\nconst ColorTableRow: React.FC<Props> = ({ colorVariable, rgbValue }) => (\n    <tr className=\"jkl-portal-color-table__row\">\n        <td className=\"jkl-portal-color-table__data\" data-header=\"Valør:\">\n            <ColorSwatch className=\"jkl-portal-color-table__swatch\" colorVariable={colorVariable} />\n        </td>\n        <td className=\"jkl-portal-color-table__data\" data-header=\"Variabelnavn:\">\n            {colorVariable}\n        </td>\n        <td className=\"jkl-portal-color-table__data\" data-header=\"Hex:\">\n            {rgbToHex([rgbValue.r, rgbValue.g, rgbValue.b])}\n        </td>\n        <td\n            className=\"jkl-portal-color-table__data\"\n            data-header=\"RGB:\"\n        >{`${rgbValue.r}, ${rgbValue.g}, ${rgbValue.b}`}</td>\n    </tr>\n);\n\ninterface ColorTableProps {\n    colors: Props[];\n}\nexport const ColorTable: React.FC<ColorTableProps> = ({ colors }) => {\n    return (\n        <table className=\"jkl-portal-color-table\">\n            <thead>\n                <tr>\n                    <th className=\"jkl-portal-color-table__header\">Valør</th>\n                    <th className=\"jkl-portal-color-table__header\">Variabelnavn i Figma</th>\n                    <th className=\"jkl-portal-color-table__header\">Hex</th>\n                    <th className=\"jkl-portal-color-table__header\">RGB</th>\n                </tr>\n            </thead>\n            <tbody>\n                {colors.map((color) => (\n                    <ColorTableRow key={color.colorVariable} {...color} />\n                ))}\n            </tbody>\n        </table>\n    );\n};\n\nconst gratoner: Props[] = [\n    {\n        colorVariable: \"gra-10\",\n        rgbValue: { r: 248, g: 248, b: 248 },\n    },\n    {\n        colorVariable: \"gra-20\",\n        rgbValue: { r: 235, g: 235, b: 235 },\n    },\n    {\n        colorVariable: \"gra-30\",\n        rgbValue: { r: 214, g: 214, b: 214 },\n    },\n    {\n        colorVariable: \"gra-40\",\n        rgbValue: { r: 184, g: 184, b: 184 },\n    },\n    {\n        colorVariable: \"gra-50\",\n        rgbValue: { r: 153, g: 153, b: 153 },\n    },\n    {\n        colorVariable: \"gra-60\",\n        rgbValue: { r: 111, g: 111, b: 111 },\n    },\n    {\n        colorVariable: \"gra-70\",\n        rgbValue: { r: 82, g: 82, b: 82 },\n    },\n    {\n        colorVariable: \"gra-80\",\n        rgbValue: { r: 61, g: 61, b: 61 },\n    },\n    {\n        colorVariable: \"gra-90\",\n        rgbValue: { r: 41, g: 41, b: 41 },\n    },\n    {\n        colorVariable: \"gra-100\",\n        rgbValue: { r: 23, g: 23, b: 23 },\n    },\n];\n\nconst vardetoner: Props[] = [\n    {\n        colorVariable: \"varde-10\",\n        rgbValue: { r: 249, g: 246, b: 244 },\n    },\n    {\n        colorVariable: \"varde-20\",\n        rgbValue: { r: 244, g: 240, b: 236 },\n    },\n    {\n        colorVariable: \"varde-30\",\n        rgbValue: { r: 237, g: 231, b: 224 },\n    },\n    {\n        colorVariable: \"varde-40\",\n        rgbValue: { r: 229, g: 221, b: 211 },\n    },\n    {\n        colorVariable: \"varde-50\",\n        rgbValue: { r: 222, g: 212, b: 199 },\n    },\n    {\n        colorVariable: \"varde-60\",\n        rgbValue: { r: 207, g: 193, b: 174 },\n    },\n    {\n        colorVariable: \"varde-70\",\n        rgbValue: { r: 186, g: 165, b: 137 },\n    },\n    {\n        colorVariable: \"varde-80\",\n        rgbValue: { r: 171, g: 146, b: 113 },\n    },\n    {\n        colorVariable: \"varde-90\",\n        rgbValue: { r: 141, g: 116, b: 83 },\n    },\n    {\n        colorVariable: \"varde-100\",\n        rgbValue: { r: 104, g: 86, b: 62 },\n    },\n];\n\nexport const GraTable = () => <ColorTable colors={gratoner} />;\n\nexport const VardeTable = () => <ColorTable colors={vardetoner} />;\n","export const getComputedProperty = (node: HTMLElement | SVGSVGElement | null, cssProperty: string) => {\n    return (node && window?.getComputedStyle(node)?.getPropertyValue(cssProperty)) || \"N/A\";\n};\n"],"sourceRoot":""}