{"version":3,"sources":["webpack:///../packages/react-hooks/src/animation.tsx","webpack:///../packages/react-hooks/src/useMutationObserver/useMutationObserver.ts","webpack:///../packages/react-hooks/src/useScreen/state.ts","webpack:///../packages/react-hooks/src/useIntersectionObserver/useIntersectionObserver.ts","webpack:///../packages/react-hooks/src/useScreen/useScreen.ts","webpack:///../packages/react-hooks/documentation/AnimationExample.tsx","webpack:///../packages/react-hooks/documentation/ClickOutsideExample.tsx","webpack:///../packages/react-hooks/src/useClickOutside.ts","webpack:///../packages/react-hooks/documentation/FocusOutsideExample.tsx","webpack:///../packages/react-hooks/src/useFocusOutside.ts","webpack:///../packages/react-hooks/documentation/KeyListenerExample.tsx","webpack:///../packages/react-hooks/src/useKeyListener.ts","webpack:///../packages/react-hooks/documentation/MutationObserverExample.tsx","webpack:///../packages/react-hooks/documentation/IntersectionObserverExample.tsx","webpack:///../packages/react-hooks/documentation/ScreenExample.tsx","webpack:///../packages/react-hooks/documentation/hooks.mdx"],"names":["getElement","elementRef","current","el","ActionTypes","hasWindowWithMutationObserver","window","MutationObserver","hasWindowWithIntersectionObserver","IntersectionObserver","actionTypes","resized","setDeviceSize","width","height","isSmallDevice","breakpoints","small","isMediumDevice","medium","isLargeDevice","large","isXlDevice","isPortrait","isLandscape","inner","initialState","init","innerWidth","innerHeight","reducer","state","type","useScreen","useReducer","device","deviceDispatch","handleScreenChange","requestAnimationFrame","useEffect","addEventListener","removeEventListener","AnimationExample","useState","isOpen","setIsOpen","animationRef","raf1","useRef","raf2","firstRender","handleTransitionEnd","element","removeAttribute","runAnimation","useCallback","style","display","overflow","scrollHeight","useLayoutEffect","r1","r2","cancelAnimationFrame","useAnimatedHeight","className","onClick","ref","ClickOutsideExample","listOfClicksOutside","appendToClickOutsideList","isEnabled","setIsEnabled","clickOutsideRef","clickOutsideListRef","fn","handleClickOutside","event","contains","target","React","document","useClickOutside","length","map","item","idx","key","FocusOutsideExample","focusCounter","setFocusCounter","handleFocusOutside","useFocusOutside","KeyListenerExample","pressedKeys","setPressedKeys","active","setActive","keys","handleKeyDown","includes","useKeyListener","i","MutationObserverExample","listOfMutations","appendToMutationList","mutationTargetRef","listRef","targetRef","onObservation","config","observerRef","observer","disconnect","observe","useMutationObserver","mutationList","textContent","characterData","subtree","IntersectionObserverExample","isInViewport","setIsInViewport","onIntersect","fallback","options","useIntersectionObserver","entires","some","entry","isIntersecting","console","log","rootMargin","threshold","ScreenContext","createContext","initialScreenState","ScreenExample","useContext","getDeviceName","Provider","screen","value","name","_frontmatter","ComponentExample","props","warn","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","component","parentName","isMDXComponent"],"mappings":"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","file":"component---packages-react-hooks-documentation-hooks-mdx-0114e500db92c73a76f4.js","sourcesContent":["import { MutableRefObject, useEffect, useRef, RefObject, useCallback, useLayoutEffect } from \"react\";\n\ninterface HTMLElementOrCoreToggleElement<T extends HTMLElementOrCoreToggleElement<T>> extends HTMLElement {\n    el?: T; // Hack and workaround until https://github.com/nrkno/custom-element-to-react/pull/17 has landed\n}\n\nexport function useAnimatedHeight<T extends HTMLElement>(isOpen: boolean): [RefObject<T>, () => void] {\n    const raf1 = useRef<number>();\n    const raf2 = useRef<number>();\n    const elementRef = useRef<T>(null);\n    const firstRender = useRef<boolean>(true);\n\n    function handleTransitionEnd() {\n        const element = getElement(elementRef);\n        if (element) {\n            element.removeAttribute(\"style\");\n        }\n    }\n\n    const runAnimation = useCallback(() => {\n        if (firstRender.current) {\n            return; // Do not play animation on first render\n        }\n        const element = getElement(elementRef);\n        if (element) {\n            element.style.display = \"block\";\n            element.style.overflow = \"hidden\";\n            if (isOpen) {\n                element.style.height = \"0\";\n                element.style.height = `${element.scrollHeight}px`;\n            } else {\n                element.style.height = `${element.scrollHeight}px`;\n\n                raf1.current = requestAnimationFrame(() => {\n                    raf2.current = requestAnimationFrame(() => {\n                        element.style.height = `${0}px`;\n                    });\n                });\n            }\n        }\n    }, [isOpen]);\n\n    useLayoutEffect(() => {\n        runAnimation();\n    }, [isOpen, runAnimation]);\n\n    useEffect(() => {\n        const element = getElement(elementRef);\n        if (element) {\n            element.addEventListener(\"transitionend\", handleTransitionEnd);\n        }\n\n        return () => {\n            if (element) {\n                element.removeEventListener(\"transitionend\", handleTransitionEnd);\n            }\n        };\n    }, [isOpen]);\n\n    useEffect(() => {\n        const r1 = raf1.current;\n        const r2 = raf2.current;\n        firstRender.current = false;\n        return () => {\n            r1 && cancelAnimationFrame(r1);\n            r2 && cancelAnimationFrame(r2);\n        };\n    }, [raf1, raf2]);\n\n    return [elementRef, runAnimation];\n}\n\nfunction getElement(elementRef: MutableRefObject<HTMLElementOrCoreToggleElement<HTMLElement> | null>) {\n    // Workaround to handle custom elements from NRK Core components until this lands:\n    // https://github.com/nrkno/custom-element-to-react/pull/17\n    return elementRef.current && (elementRef.current.el || elementRef.current);\n}\n","import { useEffect, useRef, RefObject } from \"react\";\n\nconst hasWindowWithMutationObserver = () => typeof window !== \"undefined\" && typeof MutationObserver !== \"undefined\";\n\nexport const useMutationObserver = (\n    targetRef: RefObject<HTMLElement>,\n    onObservation: MutationCallback,\n    config?: Partial<MutationObserverInit>,\n) => {\n    const observerRef = useRef<MutationObserver>(null);\n\n    useEffect(() => {\n        let observer = observerRef.current;\n\n        if (hasWindowWithMutationObserver()) {\n            const target = targetRef.current;\n\n            if (observer) {\n                observer.disconnect();\n            }\n\n            observer = new MutationObserver(onObservation);\n\n            if (target) {\n                observer.observe(target, config);\n            }\n        }\n        return () => {\n            if (hasWindowWithMutationObserver() && observer) {\n                observer.disconnect();\n            }\n        };\n    }, [targetRef, onObservation, config]);\n};\n","import { breakpoints } from \"@fremtind/jkl-core\";\n\ninterface State {\n    isSmallDevice: boolean;\n    isMediumDevice: boolean;\n    isLargeDevice: boolean;\n    isXlDevice: boolean;\n    isLandscape: boolean;\n    isPortrait: boolean;\n    inner: {\n        height: number;\n        width: number;\n    };\n}\n\nenum ActionTypes {\n    resized = \"WINDOW_RESIZED\",\n}\n\ninterface Action {\n    type: ActionTypes;\n    width: number;\n    height: number;\n}\n\nexport const actionTypes = {\n    resized: ActionTypes.resized,\n};\n\nconst setDeviceSize = (width: number, height: number) => ({\n    isSmallDevice: width < breakpoints.small,\n    isMediumDevice: width > breakpoints.small && width < breakpoints.medium,\n    isLargeDevice: width > breakpoints.medium && width < breakpoints.large,\n    isXlDevice: width > breakpoints.large,\n    isPortrait: height >= width,\n    isLandscape: height < width,\n    inner: {\n        height,\n        width,\n    },\n});\n\nexport const initialState = {\n    isSmallDevice: false,\n    isMediumDevice: false,\n    isLargeDevice: false,\n    isXlDevice: false,\n    isLandscape: false,\n    isPortrait: false,\n    inner: {\n        height: 0,\n        width: 0,\n    },\n};\n\nexport const init = () => {\n    const width = typeof window !== \"undefined\" ? window.innerWidth : 0;\n    const height = typeof window !== \"undefined\" ? window.innerHeight : 0;\n    return setDeviceSize(width, height);\n};\n\nexport const reducer = (state: State, { type, width, height }: Action) => {\n    switch (type) {\n        case actionTypes.resized:\n            return {\n                ...state,\n                ...setDeviceSize(width, height),\n            };\n    }\n};\n","import { useEffect, useRef, RefObject } from \"react\";\n\nconst hasWindowWithIntersectionObserver = () =>\n    typeof window !== \"undefined\" && typeof IntersectionObserver !== \"undefined\";\n\nexport const useIntersectionObserver = (\n    targetRef: RefObject<HTMLElement>,\n    onIntersect: IntersectionObserverCallback,\n    fallback: VoidFunction,\n    options?: Partial<IntersectionObserverInit>,\n) => {\n    const observerRef = useRef<IntersectionObserver>(null);\n\n    useEffect(() => {\n        let observer = observerRef.current;\n        if (hasWindowWithIntersectionObserver()) {\n            const target = targetRef.current;\n\n            if (observer) {\n                observer.disconnect();\n            }\n\n            observer = new IntersectionObserver(onIntersect, options);\n\n            if (target) {\n                observer.observe(target);\n            }\n        } else {\n            fallback();\n        }\n        return () => {\n            if (hasWindowWithIntersectionObserver() && observer) {\n                observer.disconnect();\n            }\n        };\n    }, [targetRef, onIntersect, fallback, options]);\n};\n","import { useEffect, useReducer } from \"react\";\nimport { reducer, initialState, init, actionTypes } from \"./state\";\n\nexport const useScreen = () => {\n    const [device, deviceDispatch] = useReducer(reducer, initialState, init);\n\n    const handleScreenChange = () =>\n        requestAnimationFrame(() =>\n            deviceDispatch({ type: actionTypes.resized, width: window.innerWidth, height: window.innerHeight }),\n        );\n\n    useEffect(() => {\n        if (typeof window !== \"undefined\") {\n            window.addEventListener(\"resize\", handleScreenChange);\n        }\n        return () => {\n            if (typeof window !== \"undefined\") {\n                window.removeEventListener(\"resize\", handleScreenChange);\n            }\n        };\n    }, []);\n\n    return { ...device };\n};\n","import React, { useState } from \"react\";\nimport { useAnimatedHeight } from \"../src\";\nimport \"./index.scss\";\n\nconst AnimationExample = () => {\n    const [isOpen, setIsOpen] = useState(false);\n    const [animationRef] = useAnimatedHeight<HTMLDivElement>(isOpen);\n    return (\n        <section>\n            <button className=\"jkl-button jkl-button--secondary\" onClick={() => setIsOpen(!isOpen)}>\n                Animate {isOpen ? \"Out\" : \"In\"}\n            </button>\n            <div className={`lorem-text-wrapper ${isOpen ? \"\" : \"lorem-text-wrapper--hidden\"}`} ref={animationRef}>\n                <div className={`lorem-text`}>\n                    Lorem ipsum dolor sit amet, consectetur adipisicing elit. Adipisci amet, aperiam asperiores aut\n                    beatae consequuntur cumque delectus dolore doloremque ea fugit inventore ipsam libero magnam\n                    officiis optio soluta veniam voluptatibus!\n                </div>\n            </div>\n        </section>\n    );\n};\n\nexport default AnimationExample;\n","import React, { useState, useRef } from \"react\";\nimport { useClickOutside } from \"../src\";\n\nconst ClickOutsideExample = () => {\n    const [listOfClicksOutside, appendToClickOutsideList] = useState<string[]>([]);\n    const [isEnabled, setIsEnabled] = useState(false);\n\n    const clickOutsideRef = useRef(null);\n    const clickOutsideListRef = useRef<string[]>();\n\n    clickOutsideListRef.current = listOfClicksOutside;\n    const onClickOutside = () => {\n        if (isEnabled) {\n            appendToClickOutsideList([...(clickOutsideListRef.current || []), \"Klikk utenfor\"]);\n        }\n    };\n\n    useClickOutside(clickOutsideRef, onClickOutside);\n\n    return (\n        <section ref={clickOutsideRef}>\n            <p className=\"jkl-body jkl-spacing--bottom-1\">\n                Klikk utenfor eksempelet for å se klikket listet opp under. Klikk inne i eksempelet vil ikke listes opp\n            </p>\n            <button\n                className=\"jkl-button jkl-button--secondary jkl-spacing--right-1\"\n                onClick={() => setIsEnabled(!isEnabled)}\n            >\n                {isEnabled ? \"Skru av\" : \"Skru på\"}\n            </button>\n            <button className=\"jkl-button jkl-button--tertiary\" onClick={() => appendToClickOutsideList([])}>\n                Nullstill liste\n            </button>\n            {listOfClicksOutside.length !== 0 && (\n                <ul className=\"jkl-list jkl-list--unordered jkl-body\">\n                    {listOfClicksOutside.map((item, idx) => (\n                        <li className=\"jkl-list__item\" key={idx}>\n                            {item}\n                        </li>\n                    ))}\n                </ul>\n            )}\n        </section>\n    );\n};\n\nexport default ClickOutsideExample;\n","import React, { RefObject } from \"react\";\n\nexport function useClickOutside(ref: RefObject<HTMLElement> | null, fn: () => void) {\n    function handleClickOutside(event: MouseEvent) {\n        if (ref && ref.current && !ref.current.contains(event.target as Node)) {\n            fn();\n        }\n    }\n\n    React.useEffect(() => {\n        if (ref) {\n            document && document.addEventListener(\"click\", handleClickOutside);\n        }\n        return () => {\n            if (ref) {\n                document && document.removeEventListener(\"click\", handleClickOutside);\n            }\n        };\n    });\n}\n","import React, { useState, useRef } from \"react\";\nimport { useFocusOutside } from \"../src/useFocusOutside\";\n\nexport default function FocusOutsideExample() {\n    const [focusCounter, setFocusCounter] = useState(0);\n    const [isEnabled, setIsEnabled] = useState(false);\n    const ref = useRef(null);\n    const resetFocusCounter = () => setFocusCounter(0);\n    const toggleEnabled = () => setIsEnabled(!isEnabled);\n\n    useFocusOutside(ref, () => {\n        if (isEnabled) {\n            setFocusCounter(focusCounter + 1);\n        }\n    });\n\n    return (\n        <section>\n            <p className=\"jkl-body jkl-spacing--bottom-1\">\n                Fokuser på et element utenfor kortet for å øke telleren. Når du flytter fokus tilbake vil ikke telleren\n                øke.\n            </p>\n            <div ref={ref} className=\"jkl-card focus-outside-example__card jkl-spacing--top-1\">\n                Antall fokus utenfor: <strong>{focusCounter}</strong>\n                <br />\n                <button className=\"jkl-button jkl-button--secondary jkl-spacing--right-1\" onClick={toggleEnabled}>\n                    {isEnabled ? \"Deaktiver\" : \"Aktiver\"}\n                </button>\n                <button className=\"jkl-button jkl-button--tertiary\" onClick={resetFocusCounter}>\n                    Nullstill teller\n                </button>\n            </div>\n            <button className=\"jkl-button jkl-button--secondary jkl-spacing--top-2\">Utenfor kortet</button>\n        </section>\n    );\n}\n","import React, { RefObject } from \"react\";\n\nexport function useFocusOutside(ref: RefObject<HTMLElement> | null, fn: () => void) {\n    function handleFocusOutside(event: FocusEvent) {\n        if (ref && ref.current && !ref.current.contains(event.target as Node)) {\n            fn();\n        }\n    }\n\n    React.useEffect(() => {\n        if (ref) {\n            // focusin event not yet typed. See https://github.com/microsoft/TypeScript/issues/30716\n            // @ts-ignore\n            document && document.addEventListener(\"focusin\", handleFocusOutside);\n        }\n        return () => {\n            if (ref) {\n                // focusin event not yet typed. See https://github.com/microsoft/TypeScript/issues/30716\n                // @ts-ignore\n                document && document.removeEventListener(\"focusin\", handleFocusOutside);\n            }\n        };\n    });\n}\n","import React, { useState, useRef } from \"react\";\nimport { useKeyListener } from \"../src/useKeyListener\";\n\nexport default function KeyListenerExample() {\n    const [pressedKeys, setPressedKeys] = useState<string[]>([]);\n    const keys = [\"ArrowUp\", \"ArrowDown\", \"ArrowLeft\", \"ArrowRight\"];\n    const ref = useRef(null);\n    const [active, setActive] = useState(false);\n    const toggleActive = () => setActive(!active);\n\n    function onKeyPressInside(event: KeyboardEvent) {\n        if (active) {\n            setPressedKeys([...pressedKeys, event.key]);\n        }\n    }\n    const resetList = () => setPressedKeys([]);\n    useKeyListener(ref, keys, onKeyPressInside);\n\n    return (\n        <section>\n            <p className=\"jkl-body jkl-spacing--bottom-1\">\n                Flytt fokus til aktiver-knappen under med Tab eller ved å trykke på den. Trykk på piltastene vil nå\n                listes opp under. Klikk utenfor knappen, eller flytt fokus med Tab, for å se at tastetrykkene ikke\n                lenger registreres.\n            </p>\n            <button ref={ref} className=\"jkl-button jkl-button--secondary jkl-spacing--right-1\" onClick={toggleActive}>\n                {active ? \"Deaktiver\" : \"Aktiver\"}\n            </button>\n            <button className=\"jkl-button jkl-button--tertiary\" onClick={resetList}>\n                Nullstill liste\n            </button>\n            {pressedKeys.length !== 0 && (\n                <ul className=\"jkl-list jkl-list--unordered jkl-body\">\n                    {pressedKeys.map((key, i) => (\n                        <li key={i} className=\"jkl-list__item\">\n                            {key}\n                        </li>\n                    ))}\n                </ul>\n            )}\n        </section>\n    );\n}\n","import { RefObject, useEffect } from \"react\";\n\nexport function useKeyListener(\n    ref: RefObject<HTMLElement> | null,\n    keys: string[] | string | null,\n    fn: (event: KeyboardEvent) => void,\n) {\n    if (typeof keys === \"string\") {\n        keys = [keys];\n    }\n    function handleKeyDown(event: KeyboardEvent) {\n        if (keys && !keys.includes(event.key)) {\n            return;\n        }\n        fn(event);\n    }\n\n    useEffect(() => {\n        const element = ref && ref.current;\n        if (element) {\n            element.addEventListener(\"keydown\", handleKeyDown);\n        }\n        return () => {\n            if (element) {\n                element.removeEventListener(\"keydown\", handleKeyDown);\n            }\n        };\n    });\n}\n","import React, { useState, useRef } from \"react\";\nimport { useMutationObserver } from \"../src\";\n\nconst MutationObserverExample = () => {\n    const [isOpen, setIsOpen] = useState(false);\n    const [listOfMutations, appendToMutationList] = useState<string[]>([]);\n    const mutationTargetRef = useRef(null);\n    const listRef = useRef<string[]>();\n\n    listRef.current = listOfMutations;\n    const onObservation = (mutationList: MutationRecord[]) => {\n        appendToMutationList([\n            ...(listRef.current || []),\n            ...mutationList.map((item) => item.target.textContent || \"\"),\n        ]);\n    };\n\n    useMutationObserver(mutationTargetRef, onObservation, { characterData: true, subtree: true });\n    return (\n        <section>\n            <button\n                className=\"jkl-button jkl-button--secondary jkl-spacing--right-1\"\n                onClick={() => setIsOpen(!isOpen)}\n            >\n                Endre status\n            </button>\n            <button className=\"jkl-button jkl-button--tertiary\" onClick={() => appendToMutationList([])}>\n                Nullstill liste\n            </button>\n            <p ref={mutationTargetRef} className=\"jkl-spacing--top-1 jkl-body\">\n                Nåværende status: <strong>{isOpen ? \"Åpen\" : \"Lukket\"}</strong>\n                <br />\n                Liste over endringer:\n            </p>\n            {listOfMutations.length !== 0 && (\n                <ul className=\"jkl-list jkl-list--unordered jkl-body\">\n                    {listOfMutations.map((item, idx) => (\n                        <li className=\"jkl-list__item\" key={idx}>\n                            {item}\n                        </li>\n                    ))}\n                </ul>\n            )}\n        </section>\n    );\n};\n\nexport default MutationObserverExample;\n","import React, { useRef, useState } from \"react\";\nimport { useIntersectionObserver } from \"../src/useIntersectionObserver/useIntersectionObserver\";\nimport \"./index.scss\";\n\nconst IntersectionObserverExample = () => {\n    const [isInViewport, setIsInViewport] = useState(false);\n    const targetRef = useRef(null);\n\n    const onIntersect = (entires: IntersectionObserverEntry[]) => {\n        setIsInViewport(entires.some((entry) => entry.isIntersecting));\n    };\n    const fallback = () => console.log(\"IntersectionObserver not supported\");\n    const options = { rootMargin: \"0px\", threshold: [0.0, 1.0] };\n\n    useIntersectionObserver(targetRef, onIntersect, fallback, options);\n\n    return (\n        <div\n            className={`jlk-intersection-example ${\n                isInViewport ? \"jlk-intersection-example--visible\" : \"jlk-intersection-example--not-visible\"\n            }`}\n        >\n            <p className=\"jkl-body jkl-spacing--all-2\" style={{ height: \"100vh\" }}>\n                Scroll for å endre farge\n            </p>\n            <p className=\"jkl-body jkl-spacing--all-2\" ref={targetRef}>\n                Scroll tilbake for å endre fargen tilbake\n            </p>\n        </div>\n    );\n};\n\nexport default IntersectionObserverExample;\n","import React, { useContext } from \"react\";\nimport { useScreen, initialScreenState } from \"../src\";\n\ninterface State {\n    isSmallDevice: boolean;\n    isMediumDevice: boolean;\n    isLargeDevice: boolean;\n    isXlDevice: boolean;\n    isLandscape: boolean;\n    isPortrait: boolean;\n    inner: {\n        height: number;\n        width: number;\n    };\n}\n\nconst ScreenContext = React.createContext<State>(initialScreenState);\n\nconst ScreenExample = () => {\n    const {\n        isSmallDevice,\n        isMediumDevice,\n        isLargeDevice,\n        isXlDevice,\n        isLandscape,\n        isPortrait,\n        inner: { width, height },\n    } = useContext(ScreenContext);\n\n    const getDeviceName = () => {\n        switch (true) {\n            case isSmallDevice:\n                return \"liten\";\n            case isMediumDevice:\n                return \"litt større\";\n            case isLargeDevice:\n                return \"ganske stor\";\n            case isXlDevice:\n                return \"stor\";\n            default:\n                return \"\";\n        }\n    };\n\n    return (\n        <section className=\"hooks-example key-listener-example jkl-spacing--bottom-3\">\n            <h2 className=\"jkl-h2 jkl-spacing--bottom-2\">Din dings har en {getDeviceName()} skjerm</h2>\n            <h3 className=\"jkl-h3 jkl-spacing--bottom-2\">{`Den er i ${isLandscape ? \"landskaps\" : \"\"}${\n                isPortrait ? \"portrett\" : \"\"\n            }modus`}</h3>\n            <p className=\"jkl-p jkl-spacing--bottom-2\">\n                {width} x {height}\n            </p>\n        </section>\n    );\n};\n\nconst Provider = () => {\n    const screen = useScreen();\n\n    return (\n        <ScreenContext.Provider value={screen}>\n            <ScreenExample />\n        </ScreenContext.Provider>\n    );\n};\n\nexport default Provider;\n","import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/jokul/jokul/portal/src/components/Layout/DocPageLayout.tsx\";\nimport AnimationExample from \"./AnimationExample\";\nimport ClickOutsideExample from \"./ClickOutsideExample\";\nimport FocusOutsideExample from \"./FocusOutsideExample\";\nimport KeyListenerExample from \"./KeyListenerExample\";\nimport MutationObserverExample from \"./MutationObserverExample\";\nimport IntersectionObserverExample from \"./IntersectionObserverExample\";\nimport ScreenExample from \"./ScreenExample\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst ComponentExample = makeShortcode(\"ComponentExample\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <p>\n    <span className=\"jkl-lead\">Denne pakken innholder støttefunksjoner i form av React hooks.</span>\n    </p>\n    <h2>{`useAnimatedHeight`}</h2>\n    <p>{`Animering av ting inn og ut av DOMet i React er ikke lett, men med useAnimatedHeight blir jobben en god del lettere.`}</p>\n    <ComponentExample component={AnimationExample} mdxType=\"ComponentExample\" />\n    <h2>{`useMutationObserver`}</h2>\n    <p>{`Med `}<inlineCode parentName=\"p\">{`useMutationObserver`}</inlineCode>{` kan du lytte på endringer i DOMet. Dette er en tynn wrapper over MutationObserver APIet som gjør det lettere å ta det i bruk i React. Den er nyttig om du f.eks. ønsker å spore når en bruker trykker på et element der du ikke har tilgang på `}<inlineCode parentName=\"p\">{`onChange`}</inlineCode>{`-funksjonen, som `}<inlineCode parentName=\"p\">{`Accordion`}</inlineCode>{`.`}</p>\n    <ComponentExample component={MutationObserverExample} mdxType=\"ComponentExample\" />\n    <h2>{`useClickOutside`}</h2>\n    <p><inlineCode parentName=\"p\">{`useClickOutside`}</inlineCode>{` lar deg lytte på klikk utenfor et element. Det kan være nyttig for å lukke modaler o.l.`}</p>\n    <ComponentExample component={ClickOutsideExample} mdxType=\"ComponentExample\" />\n    <h2>{`useFocusOutside`}</h2>\n    <p><inlineCode parentName=\"p\">{`useFocusOutside`}</inlineCode>{` lar deg lytte etter elementfokus utenfor et gitt element, for eksempel når du tabber ut av en datovelger, og utføre en gitt handling.`}</p>\n    <ComponentExample component={FocusOutsideExample} mdxType=\"ComponentExample\" />\n    <h2>{`useKeyListener`}</h2>\n    <p><inlineCode parentName=\"p\">{`useKeyListener`}</inlineCode>{` lar deg lytte etter spesifiserte tastetrykk når fokus er inne i et gitt element. Dette kan være nyttig for blandt annet søkefunksjonalitet i lister, og tastaturnavigasjon i karuseller o.l.`}</p>\n    <ComponentExample component={KeyListenerExample} mdxType=\"ComponentExample\" />\n    <h2>{`useIntersectionObserver`}</h2>\n    <p>{`IntersectionObserver lar deg lytte på om et element er synlig eller ikke. Det gjør det mulig å animere innhold inn, eller prelaste innhold som er rett uten for viewporten. I eksemplet brukes det til å bytte bakgrunnsfarge når andre paragrafen kommer helt inn i visning.`}</p>\n    <ComponentExample component={IntersectionObserverExample} mdxType=\"ComponentExample\" />\n    <h2>{`useScreen`}</h2>\n    <p><inlineCode parentName=\"p\">{`useScreen`}</inlineCode>{` lar deg få tilgang til de samme breakpoints som cssen bruker til media queries. Av og til er kan det være nødvendig å endre strukturen på innholdet bassert på hvor stor skjerm innholdet skal presenteres på. Anbefalt implementasjon er å legge `}<inlineCode parentName=\"p\">{`useScreen`}</inlineCode>{` så høyt oppe i applikasjonen din som du mener er nødvendig i en `}<inlineCode parentName=\"p\">{`context`}</inlineCode>{`, for å benytte den contexten når du trenger å plukke ut verdiene i en komponent. Dette er for å unngå å sette opp flere eventlyttere enn nødvendig. Om du bruker server side rendering bør denne brukes med forsiktighet, da serveren ikke vil vite hvilken size den skal rendre for.`}</p>\n    <ScreenExample mdxType=\"ScreenExample\" />\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}