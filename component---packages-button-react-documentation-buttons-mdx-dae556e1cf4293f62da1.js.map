{"version":3,"sources":["webpack:///../packages/button-react/src/Button.tsx","webpack:///../packages/button-react/documentation/Example.tsx","webpack:///../packages/button-react/documentation/buttons.mdx"],"names":["makeButtonComponent","buttonType","children","className","forceCompact","inverted","rest","componentClassName","classNames","PrimaryButton","SecondaryButton","TertiaryButton","onClick","console","log","Example","useState","isCompact","setCompact","isInverted","setIsInverted","exampleClassName","pressed","_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"0NAUA,SAASA,EAAoBC,GACzB,OAAO,YAAiF,IAA/DC,EAA+D,EAA/DA,SAAUC,EAAqD,EAArDA,UAAWC,EAA0C,EAA1CA,aAAcC,EAA4B,EAA5BA,SAAaC,E,oIAAe,uDAC9EC,EAAqBC,IACvB,aACA,eAAiBP,EACjB,CACI,sBAAuBG,EACvB,uBAAwBC,GAE5BF,GAGJ,OACI,0CAAQA,UAAWI,GAAwBD,GACtCJ,IAMV,IAAMO,EAAgBT,EAAoB,WACpCU,EAAkBV,EAAoB,aACtCW,EAAiBX,EAAoB,Y,oDCvBlD,SAASY,IACLC,QAAQC,IAAI,UAGhB,IAgDeC,EAhDC,WAAM,MACcC,oBAAS,GAAlCC,EADW,KACAC,EADA,OAGkBF,oBAAS,GAAtCG,EAHW,KAGCC,EAHD,KAMZC,EAAmBb,IAAW,2DAA4D,CAC5F,4BAA6BW,IAGjC,OACI,6BAAShB,UAAWkB,GAChB,2BAAOlB,UAAU,6BACb,kBAAC,IAAD,CAAcmB,QAASL,EAAWL,QAXxB,kBAAMM,GAAYD,IAW8Bd,UAAU,yBAApE,mBAGA,kBAAC,IAAD,CAAcmB,QAASH,EAAYP,QAZxB,kBAAMQ,GAAeD,KAYhC,sBAIJ,kBAACV,EAAD,CACIL,aAAca,EACdZ,SAAUc,EACVP,QAASA,EACTT,UAAU,yBAJd,iBAQA,kBAACO,EAAD,CACIN,aAAca,EACdZ,SAAUc,EACVP,QAASA,EACTT,UAAU,yBAJd,mBAQA,kBAACQ,EAAD,CACIP,aAAca,EACdZ,SAAUc,EACVP,QAASA,EACTT,UAAU,yBAJd,oB,qFCzCL,IAAMoB,EAAe,GAOtBC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,iBAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAI5E,gIACA,YAAC,EAAD,CAASA,QAAQ,YACjB,qCACA,qBAAG,sBAAQC,WAAW,KAAnB,gBAAH,2IACA,qBAAG,sBAAQA,WAAW,KAAnB,kBAAH,2EACA,qBAAG,sBAAQA,WAAW,KAAnB,iBAAH,yFACA,qIACA,0CACA,oIACA,YAACtB,EAAD,CAAeN,UAAU,uBAAuB2B,QAAQ,iBAAxD,YACA,YAACpB,EAAD,CAAiBP,UAAU,uBAAuB2B,QAAQ,mBAA1D,SACA,YAACnB,EAAD,CAAgBmB,QAAQ,kBAAxB,WAKJH,EAAWK,gBAAiB","file":"component---packages-button-react-documentation-buttons-mdx-dae556e1cf4293f62da1.js","sourcesContent":["import React, { HTMLAttributes } from \"react\";\nimport classNames from \"classnames\";\n\ninterface Props extends Exclude<HTMLAttributes<HTMLButtonElement>, \"disabled\"> {\n    forceCompact?: boolean;\n    inverted?: boolean;\n}\n\ntype ValidButtons = \"primary\" | \"secondary\" | \"tertiary\";\n\nfunction makeButtonComponent(buttonType: ValidButtons) {\n    return function button({ children, className, forceCompact, inverted, ...rest }: Props) {\n        const componentClassName = classNames(\n            \"jkl-button\",\n            \"jkl-button--\" + buttonType,\n            {\n                \"jkl-button--compact\": forceCompact,\n                \"jkl-button--inverted\": inverted,\n            },\n            className,\n        );\n\n        return (\n            <button className={componentClassName} {...rest}>\n                {children}\n            </button>\n        );\n    };\n}\n\nexport const PrimaryButton = makeButtonComponent(\"primary\");\nexport const SecondaryButton = makeButtonComponent(\"secondary\");\nexport const TertiaryButton = makeButtonComponent(\"tertiary\");\n","import React, { useState } from \"react\";\nimport { PrimaryButton, SecondaryButton, TertiaryButton } from \"../src\";\nimport { ToggleSwitch } from \"@fremtind/jkl-toggle-switch-react\";\nimport \"@fremtind/jkl-toggle-switch/toggle-switch.css\";\nimport \"@fremtind/jkl-button/button.css\";\nimport \"@fremtind/jkl-core/core.css\";\nimport \"./index.scss\";\nimport classNames from \"classnames\";\n\nfunction onClick() {\n    console.log(\"Hello!\");\n}\n\nconst Example = () => {\n    const [isCompact, setCompact] = useState(false);\n    const toggleCompact = () => setCompact(!isCompact);\n    const [isInverted, setIsInverted] = useState(false);\n    const toggleInverted = () => setIsInverted(!isInverted);\n\n    const exampleClassName = classNames(\"buttons-example jkl-spacing--top-3 jkl-spacing--bottom-3\", {\n        \"buttons-example--inverted\": isInverted,\n    });\n\n    return (\n        <section className={exampleClassName}>\n            <aside className=\"buttons-example__controls\">\n                <ToggleSwitch pressed={isCompact} onClick={toggleCompact} className=\"jkl-spacing--bottom-1\">\n                    Kompakt variant\n                </ToggleSwitch>\n                <ToggleSwitch pressed={isInverted} onClick={toggleInverted}>\n                    Inverterte farger\n                </ToggleSwitch>\n            </aside>\n            <PrimaryButton\n                forceCompact={isCompact}\n                inverted={isInverted}\n                onClick={onClick}\n                className=\"portal-example-button\"\n            >\n                PrimaryButton\n            </PrimaryButton>\n            <SecondaryButton\n                forceCompact={isCompact}\n                inverted={isInverted}\n                onClick={onClick}\n                className=\"portal-example-button\"\n            >\n                SecondaryButton\n            </SecondaryButton>\n            <TertiaryButton\n                forceCompact={isCompact}\n                inverted={isInverted}\n                onClick={onClick}\n                className=\"portal-example-button\"\n            >\n                TertiaryButton\n            </TertiaryButton>\n        </section>\n    );\n};\n\nexport default Example;\n","import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/jokul/jokul/portal/src/components/Layout/ComponentLayout.tsx\";\nimport Example from \"./Example\";\nimport { PrimaryButton, SecondaryButton, TertiaryButton } from \"../src\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <p>{`Knapper starter en handling. Teksten på knappen forteller hva som vil skje når brukeren klikker på den.`}</p>\n    <Example mdxType=\"Example\" />\n    <h2>{`Knappetyper`}</h2>\n    <p><strong parentName=\"p\">{`Primærknapp:`}</strong>{` brukes til den viktigste handlingen på en side - hovedhandlingen. En side kan noen ganger ha mer enn en hovedhandling, men ikke mange.`}</p>\n    <p><strong parentName=\"p\">{`Sekundærknapp:`}</strong>{` brukes til handlinger som ikke er like viktige for oss eller brukeren.`}</p>\n    <p><strong parentName=\"p\">{`Tertiærknapp:`}</strong>{` brukes til handlinger som er mindre viktige, eller som kan gi uønskede konsekvenser.`}</p>\n    <p>{`Disse tre knappetypene har et hierarki. Når brukeren har flere valg samtidig, skal vi kun ha én primærknapp.`}</p>\n    <h2>{`Tekst på knapper`}</h2>\n    <p>{`Knappetekster skal være så enkle og korte som mulig og skal oppfordre til handling. Bruk helst bare to ord:`}</p>\n    <PrimaryButton className=\"jkl-spacing--right-2\" mdxType=\"PrimaryButton\">Send inn</PrimaryButton>\n    <SecondaryButton className=\"jkl-spacing--right-2\" mdxType=\"SecondaryButton\">Lagre</SecondaryButton>\n    <TertiaryButton mdxType=\"TertiaryButton\">Avbryt</TertiaryButton>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}