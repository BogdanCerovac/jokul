{"version":3,"sources":["webpack:///../packages/react-hooks/src/animation.tsx","webpack:///../packages/react-hooks/src/useMutationObserver/useMutationObserver.ts","webpack:///../packages/react-hooks/src/useIntersectionObserver/useIntersectionObserver.ts","webpack:///../packages/react-hooks/documentation/AnimationExample.tsx","webpack:///../packages/react-hooks/documentation/ClickOutsideExample.tsx","webpack:///../packages/react-hooks/src/useClickOutside.ts","webpack:///../packages/react-hooks/documentation/FocusOutsideExample.tsx","webpack:///../packages/react-hooks/src/useFocusOutside.ts","webpack:///../packages/react-hooks/documentation/KeyListenerExample.tsx","webpack:///../packages/react-hooks/src/useKeyListener.ts","webpack:///../packages/react-hooks/documentation/MutationObserverExample.tsx","webpack:///../packages/react-hooks/documentation/IntersectionObserverExample.tsx","webpack:///../packages/react-hooks/documentation/hooks.mdx"],"names":["getElement","elementRef","current","el","hasWindowWithMutationObserver","window","MutationObserver","hasWindowWithIntersectionObserver","IntersectionObserver","AnimationExample","useState","isOpen","setIsOpen","animationRef","raf1","raf2","useRef","isFirstRender","setIsFirstRender","heightTransitioned","element","removeAttribute","runAnimation","style","display","overflow","height","scrollHeight","requestAnimationFrame","useLayoutEffect","useEffect","addEventListener","removeEventListener","cancelAnimationFrame","useAnimatedHeight","className","onClick","ref","ClickOutsideExample","listOfClicksOutside","appendToClickOutsideList","isEnabled","setIsEnabled","clickOutsideRef","clickOutsideListRef","fn","handleClickOutside","event","contains","target","React","document","useClickOutside","length","map","item","idx","key","FocusOutsideExample","focusCounter","setFocusCounter","handleFocusOutside","useFocusOutside","KeyListenerExample","pressedKeys","setPressedKeys","active","setActive","keys","handleKeyDown","includes","useKeyListener","i","MutationObserverExample","listOfMutations","appendToMutationList","mutationTargetRef","listRef","targetRef","onObservation","config","observerRef","observer","disconnect","observe","useMutationObserver","mutationList","textContent","characterData","subtree","IntersectionObserverExample","isInViewport","setIsInViewport","onIntersect","fallback","options","useIntersectionObserver","entires","some","entry","isIntersecting","console","log","rootMargin","threshold","_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"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","file":"component---packages-react-hooks-documentation-hooks-mdx-4726b8aafe58d06e8099.js","sourcesContent":["import { MutableRefObject, Ref, useEffect, useLayoutEffect, useRef, useState } from \"react\";\n\ninterface HTMLElementOrCoreToggleElement<T extends HTMLElementOrCoreToggleElement<T>> extends HTMLElement {\n    el?: T; // Hack and workaround until https://github.com/nrkno/custom-element-to-react/pull/17 has landed\n}\n\nexport function useAnimatedHeight<T extends HTMLElement>(isOpen: boolean): [Ref<T>, () => void] {\n    let raf1: number;\n    let raf2: number;\n    const elementRef = useRef<T>(null);\n    const [isFirstRender, setIsFirstRender] = useState(true);\n\n    function heightTransitioned() {\n        const element = getElement(elementRef);\n        if (element) {\n            element.removeAttribute(\"style\");\n        }\n    }\n\n    function runAnimation() {\n        const element = getElement(elementRef);\n        if (element) {\n            element.style.display = \"block\";\n            element.style.overflow = \"hidden\";\n            if (isOpen) {\n                element.style.height = \"0\";\n                element.style.height = `${element.scrollHeight}px`;\n            } else {\n                element.style.height = `${element.scrollHeight}px`;\n\n                raf1 = requestAnimationFrame(() => {\n                    raf2 = requestAnimationFrame(() => {\n                        element.style.height = `${0}px`;\n                    });\n                });\n            }\n        }\n    }\n\n    useLayoutEffect(() => {\n        if (!isFirstRender) {\n            runAnimation();\n        }\n    }, [isOpen]);\n\n    useEffect(() => {\n        const element = getElement(elementRef);\n        if (element) {\n            element.addEventListener(\"transitionend\", heightTransitioned);\n        }\n\n        return () => {\n            if (element) {\n                element.removeEventListener(\"transitionend\", heightTransitioned);\n            }\n        };\n    }, [isOpen]);\n\n    useEffect(() => {\n        setIsFirstRender(false);\n        return () => {\n            cancelAnimationFrame(raf1);\n            cancelAnimationFrame(raf2);\n        };\n    }, []);\n\n    return [elementRef, runAnimation];\n}\n\nfunction getElement(elementRef: MutableRefObject<HTMLElementOrCoreToggleElement<HTMLElement> | null>) {\n    // Workaround to handle custom elements from NRK Core components until this lands:\n    // https://github.com/nrkno/custom-element-to-react/pull/17\n    return elementRef.current && (elementRef.current.el || elementRef.current);\n}\n","import { useEffect, useRef, RefObject } from \"react\";\n\nconst hasWindowWithMutationObserver = () => typeof window !== \"undefined\" && typeof MutationObserver !== \"undefined\";\n\nexport const useMutationObserver = (\n    targetRef: RefObject<HTMLElement>,\n    onObservation: MutationCallback,\n    config?: Partial<MutationObserverInit>,\n) => {\n    const observerRef = useRef<MutationObserver>(null);\n\n    useEffect(() => {\n        if (hasWindowWithMutationObserver()) {\n            let observer = observerRef.current;\n            const target = targetRef.current;\n\n            if (observer) {\n                observer.disconnect();\n            }\n\n            observer = new MutationObserver(onObservation);\n\n            if (target) {\n                observer.observe(target, config);\n            }\n        }\n        return () => {\n            if (hasWindowWithMutationObserver() && observerRef && observerRef.current) {\n                observerRef.current.disconnect();\n            }\n        };\n    }, [targetRef]);\n};\n","import { useEffect, useRef, RefObject } from \"react\";\n\nconst hasWindowWithIntersectionObserver = () =>\n    typeof window !== \"undefined\" && typeof IntersectionObserver !== \"undefined\";\n\nexport const useIntersectionObserver = (\n    targetRef: RefObject<HTMLElement>,\n    onIntersect: IntersectionObserverCallback,\n    fallback: VoidFunction,\n    options?: Partial<IntersectionObserverInit>,\n) => {\n    const observerRef = useRef<IntersectionObserver>(null);\n\n    useEffect(() => {\n        if (hasWindowWithIntersectionObserver()) {\n            let observer = observerRef.current;\n            const target = targetRef.current;\n\n            if (observer) {\n                observer.disconnect();\n            }\n\n            observer = new IntersectionObserver(onIntersect, options);\n\n            if (target) {\n                observer.observe(target);\n            }\n        } else {\n            fallback();\n        }\n        return () => {\n            if (hasWindowWithIntersectionObserver() && observerRef && observerRef.current) {\n                observerRef.current.disconnect();\n            }\n        };\n    }, [targetRef]);\n};\n","import React, { useState } from \"react\";\nimport { useAnimatedHeight } from \"../src\";\nimport \"./index.scss\";\n\nconst AnimationExample = () => {\n    const [isOpen, setIsOpen] = useState();\n    const [animationRef] = useAnimatedHeight<HTMLDivElement>(isOpen);\n    return (\n        <section className=\"jkl-spacing--top-3 jkl-spacing--bottom-3 hooks-example\">\n            <button className=\"jkl-button jkl-button--secondary\" onClick={() => setIsOpen(!isOpen)}>\n                Animate {isOpen ? \"Out\" : \"In\"}\n            </button>\n            <div className={`lorem-text-wrapper ${isOpen ? \"\" : \"lorem-text-wrapper--hidden\"}`} ref={animationRef}>\n                <div className={`lorem-text`}>\n                    Lorem ipsum dolor sit amet, consectetur adipisicing elit. Adipisci amet, aperiam asperiores aut\n                    beatae consequuntur cumque delectus dolore doloremque ea fugit inventore ipsam libero magnam\n                    officiis optio soluta veniam voluptatibus!\n                </div>\n            </div>\n        </section>\n    );\n};\n\nexport default AnimationExample;\n","import React, { useState, useRef } from \"react\";\nimport { useClickOutside } from \"../src\";\n\nconst ClickOutsideExample = () => {\n    const [listOfClicksOutside, appendToClickOutsideList] = useState<string[]>([]);\n    const [isEnabled, setIsEnabled] = useState(false);\n\n    const clickOutsideRef = useRef(null);\n    const clickOutsideListRef = useRef<string[]>();\n\n    clickOutsideListRef.current = listOfClicksOutside;\n    const onClickOutside = () => {\n        if (isEnabled) {\n            appendToClickOutsideList([...(clickOutsideListRef.current || []), \"Klikk utenfor\"]);\n        }\n    };\n\n    useClickOutside(clickOutsideRef, onClickOutside);\n\n    return (\n        <section ref={clickOutsideRef} className=\"hooks-example jkl-spacing--bottom-3 jkl-body jkl-click-outside\">\n            <p className=\"hooks-example__header\">Lytter på klikk utenfor dette området</p>\n            <p className=\"hooks-example__text\">\n                Klikk utenfor eksempelet for å se klikket listet opp under. Klikk inne i eksempelet vil ikke listes opp\n            </p>\n            <button\n                className=\"jkl-button jkl-button--secondary jkl-spacing--right-1\"\n                onClick={() => setIsEnabled(!isEnabled)}\n            >\n                {isEnabled ? \"Skru av\" : \"Skru på\"}\n            </button>\n            <button className=\"jkl-button jkl-button--tertiary\" onClick={() => appendToClickOutsideList([])}>\n                Nullstill liste\n            </button>\n            {listOfClicksOutside.length !== 0 && (\n                <ul className=\"jkl-list hooks-example__list\">\n                    {listOfClicksOutside.map((item, idx) => (\n                        <li className=\"jkl-list--item\" key={idx}>\n                            {item}\n                        </li>\n                    ))}\n                </ul>\n            )}\n        </section>\n    );\n};\n\nexport default ClickOutsideExample;\n","import React, { RefObject } from \"react\";\n\nexport function useClickOutside(ref: RefObject<HTMLElement> | null, fn: () => void) {\n    function handleClickOutside(event: MouseEvent) {\n        if (ref && ref.current && !ref.current.contains(event.target as Node)) {\n            fn();\n        }\n    }\n\n    React.useEffect(() => {\n        if (ref) {\n            document && document.addEventListener(\"click\", handleClickOutside);\n        }\n        return () => {\n            if (ref) {\n                document && document.removeEventListener(\"click\", handleClickOutside);\n            }\n        };\n    });\n}\n","import React, { useState, useRef } from \"react\";\nimport { useFocusOutside } from \"../src/useFocusOutside\";\n\nexport default function FocusOutsideExample() {\n    const [focusCounter, setFocusCounter] = useState(0);\n    const [isEnabled, setIsEnabled] = useState(false);\n    const ref = useRef(null);\n    const resetFocusCounter = () => setFocusCounter(0);\n    const toggleEnabled = () => setIsEnabled(!isEnabled);\n\n    useFocusOutside(ref, () => {\n        if (isEnabled) {\n            setFocusCounter(focusCounter + 1);\n        }\n    });\n\n    return (\n        <section className=\"hooks-example focus-outside-example jkl-spacing--bottom-3\">\n            <p className=\"hooks-example__header\">Lytter på fokus utenfor kortet under</p>\n            <p className=\"hooks-example__text\">\n                Fokuser på et element utenfor kortet for å øke telleren. Når du flytter fokus tilbake vil ikke telleren\n                øke.\n            </p>\n            <div ref={ref} className=\"jkl-card focus-outside-example__card jkl-spacing--top-1\">\n                Antall fokus utenfor: <strong>{focusCounter}</strong>\n                <br />\n                <button className=\"jkl-button jkl-button--secondary jkl-spacing--right-1\" onClick={toggleEnabled}>\n                    {isEnabled ? \"Deaktiver\" : \"Aktiver\"}\n                </button>\n                <button className=\"jkl-button jkl-button--tertiary\" onClick={resetFocusCounter}>\n                    Nullstill teller\n                </button>\n            </div>\n            <button className=\"jkl-button jkl-button--secondary hooks-example__spaced-item\">Utenfor kortet</button>\n        </section>\n    );\n}\n","import React, { RefObject } from \"react\";\n\nexport function useFocusOutside(ref: RefObject<HTMLElement> | null, fn: () => void) {\n    function handleFocusOutside(event: FocusEvent) {\n        if (ref && ref.current && !ref.current.contains(event.target as Node)) {\n            fn();\n        }\n    }\n\n    React.useEffect(() => {\n        if (ref) {\n            // focusin event not yet typed. See https://github.com/microsoft/TypeScript/issues/30716\n            // @ts-ignore\n            document && document.addEventListener(\"focusin\", handleFocusOutside);\n        }\n        return () => {\n            if (ref) {\n                // focusin event not yet typed. See https://github.com/microsoft/TypeScript/issues/30716\n                // @ts-ignore\n                document && document.removeEventListener(\"focusin\", handleFocusOutside);\n            }\n        };\n    });\n}\n","import React, { useState, useRef } from \"react\";\nimport { useKeyListener } from \"../src/useKeyListener\";\n\nexport default function KeyListenerExample() {\n    const [pressedKeys, setPressedKeys] = useState<string[]>([]);\n    const keys = [\"ArrowUp\", \"ArrowDown\", \"ArrowLeft\", \"ArrowRight\"];\n    const ref = useRef(null);\n    const [active, setActive] = useState(false);\n    const toggleActive = () => setActive(!active);\n\n    function onKeyPressInside(event: KeyboardEvent) {\n        if (active) {\n            setPressedKeys([...pressedKeys, event.key]);\n        }\n    }\n    const resetList = () => setPressedKeys([]);\n    useKeyListener(ref, keys, onKeyPressInside);\n\n    return (\n        <section className=\"hooks-example key-listener-example jkl-spacing--bottom-3\">\n            <p className=\"hooks-example__header\">Lytter etter trykk på piltastene</p>\n            <p className=\"hooks-example__text\">\n                Flytt fokus til aktiver-knappen under med Tab eller ved å trykke på den. Trykk på piltastene vil nå\n                listes opp under. Klikk utenfor knappen, eller flytt fokus med Tab, for å se at tastetrykkene ikke\n                lenger registreres.\n            </p>\n            <button ref={ref} className=\"jkl-button jkl-button--secondary jkl-spacing--right-1\" onClick={toggleActive}>\n                {active ? \"Deaktiver\" : \"Aktiver\"}\n            </button>\n            <button className=\"key-listener-example__spaced-item jkl-button jkl-button--tertiary\" onClick={resetList}>\n                Nullstill liste\n            </button>\n            {pressedKeys.length !== 0 && (\n                <ul className=\"hooks-example__list jkl-list jkl-list--unordered\">\n                    {pressedKeys.map((key, i) => (\n                        <li key={i} className=\"jkl-list__item\">\n                            {key}\n                        </li>\n                    ))}\n                </ul>\n            )}\n        </section>\n    );\n}\n","import { RefObject, useEffect } from \"react\";\n\nexport function useKeyListener(\n    ref: RefObject<HTMLElement> | null,\n    keys: string[] | string | null,\n    fn: (event: KeyboardEvent) => void,\n) {\n    if (typeof keys === \"string\") {\n        keys = [keys];\n    }\n    function handleKeyDown(event: KeyboardEvent) {\n        if (keys && !keys.includes(event.key)) {\n            return;\n        }\n        fn(event);\n    }\n\n    useEffect(() => {\n        if (ref && ref.current) {\n            ref.current.addEventListener(\"keydown\", handleKeyDown);\n        }\n        return () => {\n            if (ref && ref.current) {\n                ref.current.removeEventListener(\"keydown\", handleKeyDown);\n            }\n        };\n    });\n}\n","import React, { useState, useRef } from \"react\";\nimport { useMutationObserver } from \"../src\";\n\nconst MutationObserverExample = () => {\n    const [isOpen, setIsOpen] = useState();\n    const [listOfMutations, appendToMutationList] = useState<string[]>([]);\n    const mutationTargetRef = useRef(null);\n    const listRef = useRef<string[]>();\n\n    listRef.current = listOfMutations;\n    const onObservation = (mutationList: MutationRecord[]) => {\n        appendToMutationList([\n            ...(listRef.current || []),\n            ...mutationList.map((item) => item.target.textContent || \"\"),\n        ]);\n    };\n\n    useMutationObserver(mutationTargetRef, onObservation, { characterData: true, subtree: true });\n    return (\n        <section className=\"hooks-example jkl-spacing--bottom-3\">\n            <button\n                className=\"jkl-button jkl-button--secondary jkl-spacing--right-1\"\n                onClick={() => setIsOpen(!isOpen)}\n            >\n                Endre status\n            </button>\n            <button className=\"jkl-button jkl-button--tertiary\" onClick={() => appendToMutationList([])}>\n                Nullstill liste\n            </button>\n            <p ref={mutationTargetRef} className=\"jkl-spacing--top-1 hooks-example__text\">\n                Nåværende status: <strong>{isOpen ? \"Åpen\" : \"Lukket\"}</strong>\n            </p>\n            <p className=\"hooks-example__text\">Liste over endringer:</p>\n            {listOfMutations.length !== 0 && (\n                <ul className=\"jkl-list hooks-example__list\">\n                    {listOfMutations.map((item, idx) => (\n                        <li className=\"jkl-list__item\" key={idx}>\n                            {item}\n                        </li>\n                    ))}\n                </ul>\n            )}\n        </section>\n    );\n};\n\nexport default MutationObserverExample;\n","import React, { useRef, useState } from \"react\";\nimport { useIntersectionObserver } from \"../src/useIntersectionObserver/useIntersectionObserver\";\nimport \"./index.scss\";\n\nconst IntersectionObserverExample = () => {\n    const [isInViewport, setIsInViewport] = useState(false);\n    const targetRef = useRef(null);\n\n    const onIntersect = (entires: IntersectionObserverEntry[]) => {\n        setIsInViewport(entires.some((entry) => entry.isIntersecting));\n    };\n    const fallback = () => console.log(\"IntersectionObserver not supported\");\n    const options = { rootMargin: \"0px\", threshold: [0.0, 1.0] };\n\n    useIntersectionObserver(targetRef, onIntersect, fallback, options);\n\n    return (\n        <div\n            className={`jlk-intersection-example ${\n                isInViewport ? \"jlk-intersection-example--visible\" : \"jlk-intersection-example--not-visible\"\n            }`}\n        >\n            <p className=\"jkl-body jkl-spacing--all-2\" style={{ height: \"100vh\" }}>\n                Scroll for å endre farge\n            </p>\n            <p className=\"jkl-body jkl-spacing--all-2\" ref={targetRef}>\n                Scroll tilbake for å endre fargen tilbake\n            </p>\n        </div>\n    );\n};\n\nexport default IntersectionObserverExample;\n","import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/jokul/jokul/portal/src/components/Layout/ComponentLayout.tsx\";\nimport AnimationExample from \"./AnimationExample\";\nimport ClickOutsideExample from \"./ClickOutsideExample\";\nimport FocusOutsideExample from \"./FocusOutsideExample\";\nimport KeyListenerExample from \"./KeyListenerExample\";\nimport MutationObserverExample from \"./MutationObserverExample\";\nimport IntersectionObserverExample from \"./IntersectionObserverExample\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <p>\n    <span className=\"jkl-lead\">Denne pakken innholder støttefunksjoner i form av React hooks.</span>\n    </p>\n    <h3>{`useAnimatedHeight`}</h3>\n    <p>{`Animering av ting inn og ut av DOMet i React er ikke lett, men med useAnimatedHeight blir jobben en god del lettere.`}</p>\n    <AnimationExample mdxType=\"AnimationExample\" />\n    <h3>{`useMutationObserver`}</h3>\n    <p>{`Med `}<inlineCode parentName=\"p\">{`useMutationObserver`}</inlineCode>{` kan du lytte på endringer i DOMet. Dette er en tynn wrapper over MutationObserver APIet som gjør det lettere å ta det i bruk i React. Den er nyttig om du f.eks. ønsker å spore når en bruker trykker på et element der du ikke har tilgang på `}<inlineCode parentName=\"p\">{`onChange`}</inlineCode>{`-funksjonen, som `}<inlineCode parentName=\"p\">{`Accordion`}</inlineCode>{`.`}</p>\n    <MutationObserverExample mdxType=\"MutationObserverExample\" />\n    <h3>{`useClickOutside`}</h3>\n    <p><inlineCode parentName=\"p\">{`useClickOutside`}</inlineCode>{` lar deg lytte på klikk utenfor et element. Det kan være nyttig for å lukke modaler o.l.`}</p>\n    <ClickOutsideExample mdxType=\"ClickOutsideExample\" />\n    <h3>{`useFocusOutside`}</h3>\n    <p><inlineCode parentName=\"p\">{`useFocusOutside`}</inlineCode>{` lar deg lytte etter elementfokus utenfor et gitt element, for eksempel når du tabber ut av en datovelger, og utføre en gitt handling.`}</p>\n    <FocusOutsideExample mdxType=\"FocusOutsideExample\" />\n    <h3>{`useKeyListener`}</h3>\n    <p><inlineCode parentName=\"p\">{`useKeyListener`}</inlineCode>{` lar deg lytte etter spesifiserte tastetrykk når fokus er inne i et gitt element. Dette kan være nyttig for blandt annet søkefunksjonalitet i lister, og tastaturnavigasjon i karuseller o.l.`}</p>\n    <KeyListenerExample mdxType=\"KeyListenerExample\" />\n    <h3>{`useIntersectionObserver`}</h3>\n    <p>{`IntersectionObserver lar deg lytte på om et element er synlig eller ikke. Det gjør det mulig å animere innhold inn, eller prelaste innhold som er rett uten for viewporten. I eksemplet brukes det til å bytte bakgrunnsfarge når andre paragrafen kommer helt inn i visning.`}</p>\n    <IntersectionObserverExample mdxType=\"IntersectionObserverExample\" />\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}