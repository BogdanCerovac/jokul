{"version":3,"sources":["webpack:///../packages/react-hooks/documentation/KeyListenerExample.tsx","webpack:///../packages/react-hooks/documentation/keyListener.mdx","webpack:///../packages/react-hooks/src/useKeyListener.ts"],"names":["KeyListenerExample","useState","pressedKeys","setPressedKeys","ref","useRef","active","setActive","useKeyListener","event","key","className","onClick","length","map","i","_frontmatter","makeShortcode","name","props","console","warn","Ingress","ComponentExample","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","component","isMDXComponent","keys","fn","handleKeyDown","includes","useEffect","element","current","addEventListener","removeEventListener"],"mappings":"+QAGe,SAASA,IAAqB,MACHC,mBAAmB,IAAlDC,EADkC,KACrBC,EADqB,KAGnCC,EAAMC,iBAAO,MAHsB,EAIbJ,oBAAS,GAA9BK,EAJkC,KAI1BC,EAJ0B,KAezC,OAFAC,YAAeJ,EAXF,CAAC,UAAW,YAAa,YAAa,eAKnD,SAA0BK,GAClBH,GACAH,EAAe,GAAD,mBAAKD,GAAL,CAAkBO,EAAMC,UAO1C,iCACI,uBAAGC,UAAU,kCAAb,8NAKA,4BAAQP,IAAKA,EAAKO,UAAU,wDAAwDC,QAjBvE,kBAAML,GAAWD,KAkBzBA,EAAS,YAAc,WAE5B,4BAAQK,UAAU,kCAAkCC,QAb1C,kBAAMT,EAAe,MAa/B,mBAGwB,IAAvBD,EAAYW,QACT,wBAAIF,UAAU,yCACTT,EAAYY,KAAI,SAACJ,EAAKK,GAAN,OACb,wBAAIL,IAAKK,EAAGJ,UAAU,kBACjBD,QC1BtB,IAAMM,EAAe,GAEtBC,EAAgB,SAAAC,GAAI,OAAI,SAA6BC,GAEzD,OADAC,QAAQC,KAAK,aAAeH,EAAO,2EAC5B,oBAASC,KAGZG,EAAUL,EAAc,WACxBM,EAAmBN,EAAc,oBACjCO,EAAc,CAClBR,gBAEIS,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGT,EACF,8BACD,OAAO,cAACM,EAAD,iBAAeD,EAAiBL,EAAhC,CAAuCS,WAAYA,EAAYC,QAAQ,cAI5E,cAACP,EAAD,CAASO,QAAQ,WAAjB,+MAIA,cAACN,EAAD,CAAkBO,UAAW9B,EAAoB6B,QAAQ,sBAK7DF,EAAWI,gBAAiB,G,kCCvC5B,kDAEO,SAASvB,EACZJ,EACA4B,EACAC,GAKA,SAASC,EAAczB,GACfuB,IAASA,EAAKG,SAAS1B,EAAMC,MAGjCuB,EAAGxB,GAPa,iBAATuB,IACPA,EAAO,CAACA,IASZI,qBAAU,WACN,IAAMC,EAAUjC,GAAOA,EAAIkC,QAI3B,OAHID,GACAA,EAAQE,iBAAiB,UAAWL,GAEjC,WACCG,GACAA,EAAQG,oBAAoB,UAAWN","file":"component---packages-react-hooks-documentation-key-listener-mdx-fe7562aeb7906931f702.js","sourcesContent":["import React, { useState, useRef } from \"react\";\nimport { useKeyListener } from \"../src/useKeyListener\";\n\nexport default function KeyListenerExample() {\n    const [pressedKeys, setPressedKeys] = useState<string[]>([]);\n    const keys = [\"ArrowUp\", \"ArrowDown\", \"ArrowLeft\", \"ArrowRight\"];\n    const ref = useRef(null);\n    const [active, setActive] = useState(false);\n    const toggleActive = () => setActive(!active);\n\n    function onKeyPressInside(event: KeyboardEvent) {\n        if (active) {\n            setPressedKeys([...pressedKeys, event.key]);\n        }\n    }\n    const resetList = () => setPressedKeys([]);\n    useKeyListener(ref, keys, onKeyPressInside);\n\n    return (\n        <section>\n            <p className=\"jkl-body jkl-spacing--bottom-1\">\n                Flytt fokus til aktiver-knappen under med Tab eller ved å trykke på den. Trykk på piltastene vil nå\n                listes opp under. Klikk utenfor knappen, eller flytt fokus med Tab, for å se at tastetrykkene ikke\n                lenger registreres.\n            </p>\n            <button ref={ref} className=\"jkl-button jkl-button--secondary jkl-spacing--right-1\" onClick={toggleActive}>\n                {active ? \"Deaktiver\" : \"Aktiver\"}\n            </button>\n            <button className=\"jkl-button jkl-button--tertiary\" onClick={resetList}>\n                Nullstill liste\n            </button>\n            {pressedKeys.length !== 0 && (\n                <ul className=\"jkl-list jkl-list--unordered jkl-body\">\n                    {pressedKeys.map((key, i) => (\n                        <li key={i} className=\"jkl-list__item\">\n                            {key}\n                        </li>\n                    ))}\n                </ul>\n            )}\n        </section>\n    );\n}\n","import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/jokul/jokul/portal/src/components/Layout/DocPageLayout.tsx\";\nimport KeyListenerExample from \"./KeyListenerExample\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst Ingress = makeShortcode(\"Ingress\");\nconst ComponentExample = makeShortcode(\"ComponentExample\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <Ingress mdxType=\"Ingress\">\n    useKeyListener lar deg lytte etter spesifiserte tastetrykk når fokus er inne i et gitt element. Dette kan være\n    nyttig for blandt annet søkefunksjonalitet i lister, og tastaturnavigasjon i karuseller o.l.\n    </Ingress>\n    <ComponentExample component={KeyListenerExample} mdxType=\"ComponentExample\" />\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","import { RefObject, useEffect } from \"react\";\n\nexport function useKeyListener(\n    ref: RefObject<HTMLElement> | null,\n    keys: string[] | string | null,\n    fn: (event: KeyboardEvent) => void,\n) {\n    if (typeof keys === \"string\") {\n        keys = [keys];\n    }\n    function handleKeyDown(event: KeyboardEvent) {\n        if (keys && !keys.includes(event.key)) {\n            return;\n        }\n        fn(event);\n    }\n\n    useEffect(() => {\n        const element = ref && ref.current;\n        if (element) {\n            element.addEventListener(\"keydown\", handleKeyDown);\n        }\n        return () => {\n            if (element) {\n                element.removeEventListener(\"keydown\", handleKeyDown);\n            }\n        };\n    });\n}\n"],"sourceRoot":""}