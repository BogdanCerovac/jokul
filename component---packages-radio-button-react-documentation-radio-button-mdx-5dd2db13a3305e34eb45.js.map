{"version":3,"sources":["webpack:///../packages/radio-button-react/src/RadioButtonOption.tsx","webpack:///../packages/field-group-react/build/browser/index.js","webpack:///../packages/radio-button-react/src/RadioButtons.tsx","webpack:///../packages/radio-button-react/documentation/Example.tsx","webpack:///../packages/radio-button-react/documentation/RadioButton.mdx"],"names":["RadioButtonOption","value","label","onChange","name","inline","checked","invalid","forceCompact","data-testid","className","concat","type","aria-invalid","FieldGroup","_ref","legend","children","helpLabel","errorLabel","_ref$variant","variant","componentClassName","React","createElement","Label","SupportLabel","RadioButtons","choices","selectedValue","map","getValuePair","key","Example","useState","setSelectedValue","setInline","setInvalid","setVariant","onClick","e","val","target","undefined","_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","isMDXComponent"],"mappings":"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","file":"component---packages-radio-button-react-documentation-radio-button-mdx-5dd2db13a3305e34eb45.js","sourcesContent":["import React, { ChangeEventHandler } from \"react\";\n\ninterface Props {\n    value: string;\n    label: string;\n    name: string;\n    onChange: ChangeEventHandler<HTMLInputElement>;\n    inline?: boolean;\n    checked?: boolean;\n    invalid?: boolean;\n    forceCompact?: boolean;\n}\n\nexport const RadioButtonOption = ({\n    value,\n    label,\n    onChange,\n    name = \"\",\n    inline = false,\n    checked,\n    invalid = false,\n    forceCompact,\n}: Props) => (\n    <label\n        data-testid=\"jkl-radio-button__label-tag\"\n        className={\"jkl-radio-button\".concat(\n            forceCompact ? \" jkl-radio-button--compact\" : \"\",\n            inline ? \" jkl-radio-button--inline\" : \"\",\n            invalid ? \" jkl-radio-button--error\" : \"\",\n        )}\n    >\n        <input\n            className=\"jkl-radio-button__input\"\n            type=\"radio\"\n            name={name}\n            value={value}\n            onChange={onChange}\n            checked={checked}\n            aria-invalid={invalid}\n        />\n        <span className=\"jkl-radio-button__dot\" />\n        <span className=\"jkl-radio-button__label\">{label}</span>\n    </label>\n);\n","import React from 'react';\nimport { Label, SupportLabel } from '@fremtind/jkl-typography-react';\n\nvar FieldGroup = function FieldGroup(_ref) {\n  var legend = _ref.legend,\n      className = _ref.className,\n      children = _ref.children,\n      helpLabel = _ref.helpLabel,\n      errorLabel = _ref.errorLabel,\n      _ref$variant = _ref.variant,\n      variant = _ref$variant === void 0 ? \"medium\" : _ref$variant,\n      forceCompact = _ref.forceCompact;\n  var componentClassName = \"jkl-field-group\".concat(className ? \" \".concat(className) : \"\");\n  return React.createElement(\"fieldset\", {\n    className: componentClassName\n  }, React.createElement(\"legend\", {\n    className: \"jkl-field-group__legend\"\n  }, React.createElement(Label, {\n    variant: variant,\n    forceCompact: forceCompact\n  }, legend)), children, (helpLabel || errorLabel) && React.createElement(SupportLabel, {\n    helpLabel: helpLabel,\n    errorLabel: errorLabel\n  }));\n};\n\nexport { FieldGroup };\n","import React, { ChangeEventHandler } from \"react\";\nimport { FieldGroup } from \"@fremtind/jkl-field-group-react\";\nimport { LabelVariant, ValuePair, getValuePair } from \"@fremtind/jkl-core\";\nimport { RadioButtonOption } from \"./RadioButtonOption\";\n\ninterface Props {\n    name: string;\n    legend: string;\n    choices: Array<string | ValuePair>;\n    selectedValue: string;\n    inline?: boolean;\n    onChange: ChangeEventHandler<HTMLInputElement>;\n    helpLabel?: string;\n    errorLabel?: string;\n    variant?: LabelVariant;\n    forceCompact?: boolean;\n}\n\nexport const RadioButtons = ({\n    name,\n    legend,\n    choices,\n    selectedValue,\n    onChange,\n    inline = false,\n    helpLabel,\n    errorLabel,\n    variant,\n    forceCompact,\n}: Props) => (\n    <FieldGroup\n        legend={legend}\n        helpLabel={helpLabel}\n        errorLabel={errorLabel}\n        variant={variant}\n        forceCompact={forceCompact}\n    >\n        {choices.map(getValuePair).map(({ label, value }) => (\n            <RadioButtonOption\n                key={value}\n                name={name}\n                value={value}\n                label={label}\n                inline={inline}\n                checked={value === selectedValue}\n                onChange={onChange}\n                invalid={!!errorLabel}\n                forceCompact={forceCompact}\n            />\n        ))}\n    </FieldGroup>\n);\n","import React, { useState } from \"react\";\nimport { RadioButtons } from \"../src\";\nimport { LabelVariant } from \"@fremtind/jkl-core\";\nimport \"@fremtind/jkl-core/core.min.css\";\nimport \"@fremtind/jkl-radio-button/radio-button.min.css\";\nimport \"@fremtind/jkl-field-group/field-group.min.css\";\n\nconst choices = [\"Yes\", \"No\", \"I don't know\"];\n\nconst Example = () => {\n    const [selectedValue, setSelectedValue] = React.useState();\n    const [inline, setInline] = useState(false);\n    const [invalid, setInvalid] = useState(\"\");\n    const [variant, setVariant] = useState<LabelVariant | undefined>(\"medium\");\n    const typecheckAndSetVariant = (e: React.ChangeEvent<HTMLSelectElement>) => {\n        const val = e.target.value;\n        if (val === \"large\" || val === \"medium\" || val === \"small\") {\n            setVariant(val);\n        } else {\n            setVariant(undefined);\n        }\n    };\n\n    return (\n        <section className=\"jkl-spacing--top-3 jkl-spacing--bottom-3\">\n            <div className=\"jkl-spacing--bottom-3\">\n                <button className=\"jkl-spacing--right-1\" onClick={() => setInline(!inline)}>\n                    Toggle inlined radio buttons\n                </button>\n                <button\n                    className=\"jkl-spacing--right-1\"\n                    onClick={() => setInvalid(invalid === \"\" ? \"Hmm... this is not right\" : \"\")}\n                >\n                    Toggle invalid\n                </button>\n                <label>\n                    {`Choose variant: `}\n                    {/* eslint-disable jsx-a11y/no-onchange */}\n                    <select onChange={typecheckAndSetVariant} value={variant}>\n                        <option value=\"large\">Large</option>\n                        <option value=\"medium\">Medium</option>\n                        <option value=\"small\">Small</option>\n                    </select>\n                    {/* eslint-enable jsx-a11y/no-onchange */}\n                </label>\n            </div>\n\n            <RadioButtons\n                legend=\"Do you like radio buttons?\"\n                name=\"likesradiobuttons\"\n                choices={choices}\n                inline={inline}\n                selectedValue={selectedValue}\n                onChange={(e) => setSelectedValue(e.target.value)}\n                helpLabel=\"Who dosent like radio buttons?\"\n                errorLabel={invalid}\n                variant={variant}\n            />\n        </section>\n    );\n};\n\nexport default Example;\n","import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/jokul/jokul/portal/src/components/Layout/ComponentLayout.tsx\";\nimport Example from \"./Example\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <Example mdxType=\"Example\" />\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}