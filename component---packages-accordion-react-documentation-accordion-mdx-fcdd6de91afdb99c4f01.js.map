{"version":3,"sources":["webpack:///../packages/accordion-react/src/AccordionItem.tsx","webpack:///../packages/accordion-react/src/Accordion.tsx","webpack:///../packages/accordion-react/documentation/Example.tsx","webpack:///../packages/accordion-react/documentation/accordion.mdx"],"names":["AccordionItem","children","title","className","startExpanded","useState","isOpen","setIsOpen","elementRef","useAnimatedHeight","componentClassName","classNames","data-testid","type","ref","hidden","onToggle","Accordion","Example","_frontmatter","makeShortcode","name","props","console","warn","Ingress","ComponentExample","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","component","isMDXComponent"],"mappings":"gVAeO,SAASA,EAAT,GAAqF,IAA5DC,EAA4D,EAA5DA,SAAUC,EAAkD,EAAlDA,MAAOC,EAA2C,EAA3CA,UAA2C,IAAhCC,qBAAgC,WAC5DC,mBAASD,GAA9BE,EADiF,KACzEC,EADyE,KAEjFC,EAAcC,YAAkBH,GAFiD,GAGlFI,EAAqBC,IAAW,qBAAsBR,EAAW,CACnE,+BAAgCG,IAKpC,OACI,yBAAKM,cAAY,qBAAqBT,UAAWO,GAC7C,4BAAQP,UAAU,4BAA4BU,KAAK,UAC/C,0BAAMV,UAAU,kCAAkCD,GAClD,0BAAMC,UAAU,oCAEpB,kBAAC,IAAD,CACIW,IAAKN,EACLI,cAAY,sCACZT,UAAU,sCACVY,QAAST,EACTU,SAbK,kBAAMT,GAAWD,KAetB,yBAAKH,UAAU,+BAA+BF,KC9BvD,SAASgB,EAAT,GAAwD,IAAnChB,EAAmC,EAAnCA,SAAmC,IAAzBE,iBAAyB,MAAb,GAAa,EAC3D,OACI,yBAAKS,cAAY,gBAAgBT,UAAS,iBAAmBA,GACxDF,GCNN,IAAMiB,EAAU,kBACnB,kBAACD,EAAD,KACI,kBAACjB,EAAD,CAAeE,MAAM,wBAArB,gTAKA,kBAACF,EAAD,CAAeE,MAAM,eAArB,kTCJD,IAAMiB,EAAe,GAEtBC,EAAgB,SAAAC,GAAI,OAAI,SAA6BC,GAEzD,OADAC,QAAQC,KAAK,aAAeH,EAAO,2EAC5B,kBAASC,KAGZG,EAAUL,EAAc,WACxBM,EAAmBN,EAAc,oBACjCO,EAAc,CAClBR,gBAEIS,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGT,E,oIACF,mBACD,OAAO,YAACM,EAAD,iBAAeD,EAAiBL,EAAhC,CAAuCS,WAAYA,EAAYC,QAAQ,cAI5E,YAACP,EAAD,CAASO,QAAQ,WAAjB,iLAIA,YAACN,EAAD,CAAkBO,UAAWf,EAASc,QAAQ,qBAC9C,8BACA,+UAKJF,EAAWI,gBAAiB","file":"component---packages-accordion-react-documentation-accordion-mdx-fcdd6de91afdb99c4f01.js","sourcesContent":["/* There are no types for core-toggle, so we have to use ts-ignore\nHopefully someone (us?) will write types for it sometime soon */\n// @ts-ignore\nimport CoreToggle from \"@nrk/core-toggle/jsx\";\nimport React, { ReactNode, useState } from \"react\";\nimport { useAnimatedHeight } from \"@fremtind/jkl-react-hooks\";\nimport classNames from \"classnames\";\n\ninterface Props {\n    title: string;\n    children: ReactNode;\n    startExpanded?: boolean;\n    className?: string;\n}\n\nexport function AccordionItem({ children, title, className, startExpanded = false }: Props) {\n    const [isOpen, setIsOpen] = useState(startExpanded);\n    const [elementRef] = useAnimatedHeight(isOpen);\n    const componentClassName = classNames(\"jkl-accordion-item\", className, {\n        \"jkl-accordion-item--expanded\": isOpen,\n    });\n\n    const onToggle = () => setIsOpen(!isOpen);\n\n    return (\n        <div data-testid=\"jkl-accordion-item\" className={componentClassName}>\n            <button className=\"jkl-accordion-item__title\" type=\"button\">\n                <span className=\"jkl-accordion-item__title-text\">{title}</span>\n                <span className=\"jkl-accordion-item__title-icon\" />\n            </button>\n            <CoreToggle\n                ref={elementRef}\n                data-testid=\"jkl-accordion-item__content-wrapper\"\n                className=\"jkl-accordion-item__content-wrapper\"\n                hidden={!isOpen}\n                onToggle={onToggle}\n            >\n                <div className=\"jkl-accordion-item__content\">{children}</div>\n            </CoreToggle>\n        </div>\n    );\n}\n","import React, { ReactNode } from \"react\";\n\ninterface Props {\n    children: ReactNode;\n    className?: string;\n}\n\nexport function Accordion({ children, className = \"\" }: Props) {\n    return (\n        <div data-testid=\"jkl-accordion\" className={`jkl-accordion ${className}`}>\n            {children}\n        </div>\n    );\n}\n","import React from \"react\";\n\nimport { Accordion, AccordionItem } from \"../src\";\n\nexport const Example = () => (\n    <Accordion>\n        <AccordionItem title=\"Accordion First item\">\n            Now let‘s use some more properties. Consider a list of 6 items, all with a fixed dimensions in a matter of\n            aesthetics but they could be auto-sized. We want them to be evenly and nicely distributed on the horizontal\n            axis so that when we resize the browser, everything is fine (without media queries!).\n        </AccordionItem>\n        <AccordionItem title=\"Second item\">\n            Now let‘s use some more properties. Consider a list of 6 items, all with a fixed dimensions in a matter of\n            aesthetics but they could be auto-sized. We want them to be evenly and nicely distributed on the horizontal\n            axis so that when we resize the browser, everything is fine (without media queries!).\n        </AccordionItem>\n    </Accordion>\n);\n","import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/jokul/jokul/portal/src/components/Layout/DocPageLayout.tsx\";\nimport { Example } from \"./Example\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst Ingress = makeShortcode(\"Ingress\");\nconst ComponentExample = makeShortcode(\"ComponentExample\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <Ingress mdxType=\"Ingress\">\n    Med trekkspillister kan vi presentere mye innhold på liten plass. En trekkspilliste har én eller flere rader, som\n    brukeren kan klikke på for å vise eller skjule informasjon.\n    </Ingress>\n    <ComponentExample component={Example} mdxType=\"ComponentExample\" />\n    <h2>{`Bruk`}</h2>\n    <p>{`Viktig informasjon bør alltid ligge synlig, ikke skjult i en trekkspilliste. Trekkspillister passer godt til tilleggsinformasjon som kan være til hjelp for brukerne. Teksten på hver rad i listen må være tydelig, og må beskrive innholdet for brukeren. Man kan også sette en overskrift for hele trekkspillisten.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}