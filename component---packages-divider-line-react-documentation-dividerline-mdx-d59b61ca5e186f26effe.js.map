{"version":3,"sources":["webpack:///../packages/divider-line-react/src/DividerLine.tsx","webpack:///../packages/divider-line-react/documentation/Example.tsx","webpack:///../packages/divider-line-react/documentation/Dividerline.mdx"],"names":["DividerLine","useState","IntersectionObserver","spin","setSpin","ref","useRef","useIntersectionObserver","entries","forEach","entry","isIntersecting","rootMargin","threshold","className","Example","_frontmatter","makeShortcode","name","props","console","warn","Ingress","ComponentExample","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","component","isMDXComponent"],"mappings":"uSAGaA,EAAc,WAAM,MACLC,mBAAyC,oBAAzBC,sBAAjCC,EADsB,KAChBC,EADgB,KAEvBC,EAAMC,iBAAO,MAkBnB,OAFAC,YAAwBF,GAdA,SAACG,GAAD,OACpBA,EAAQC,SAAQ,SAACC,GACTA,EAAMC,gBAAkBR,IAASO,EAAMC,gBACvCP,GAAQ,SASH,kBAAMA,GAAQ,KALf,CACZQ,WAAY,MACZC,UAAW,IAOR,wBAAIR,IAAKA,EAAKS,UAAS,gBAAiBX,EAAO,oBAAsB,OChBjEY,G,oBAFQ,kBAAM,kBAAC,EAAD,QCEtB,IAAMC,EAAe,GAEtBC,EAAgB,SAAAC,GAAI,OAAI,SAA6BC,GAEzD,OADAC,QAAQC,KAAK,aAAeH,EAAO,2EAC5B,kBAASC,KAGZG,EAAUL,EAAc,WACxBM,EAAmBN,EAAc,oBACjCO,EAAc,CAClBR,gBAEIS,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGT,E,oIACF,mBACD,OAAO,YAACM,EAAD,iBAAeD,EAAiBL,EAAhC,CAAuCS,WAAYA,EAAYC,QAAQ,cAI5E,YAACP,EAAD,CAASO,QAAQ,WAAjB,sNAIA,YAACN,EAAD,CAAkBO,UAAWf,EAASc,QAAQ,sBAKlDF,EAAWI,gBAAiB,G","file":"component---packages-divider-line-react-documentation-dividerline-mdx-d59b61ca5e186f26effe.js","sourcesContent":["import React, { useState, useRef } from \"react\";\nimport { useIntersectionObserver } from \"@fremtind/jkl-react-hooks\";\n\nexport const DividerLine = () => {\n    const [spin, setSpin] = useState(typeof IntersectionObserver === \"undefined\");\n    const ref = useRef(null);\n\n    const checkVisibility = (entries: IntersectionObserverEntry[]) =>\n        entries.forEach((entry: IntersectionObserverEntry) => {\n            if (entry.isIntersecting && spin !== entry.isIntersecting) {\n                setSpin(true);\n            }\n        });\n\n    const options = {\n        rootMargin: \"0px\",\n        threshold: 1.0,\n    };\n\n    const fallback = () => setSpin(true);\n\n    useIntersectionObserver(ref, checkVisibility, fallback, options);\n\n    return <hr ref={ref} className={`jkl-divider ${spin ? \"jkl-divider--spin\" : \"\"}`} />;\n};\n","import React from \"react\";\nimport { DividerLine } from \"../src\";\nimport \"@fremtind/jkl-core/core.min.css\";\nimport \"@fremtind/jkl-divider-line/divider-line.css\";\n\nexport const Example = () => <DividerLine />;\n\nexport default Example;\n","import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/jokul/jokul/portal/src/components/Layout/DocPageLayout.tsx\";\nimport Example from \"./Example\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst Ingress = makeShortcode(\"Ingress\");\nconst ComponentExample = makeShortcode(\"ComponentExample\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <Ingress mdxType=\"Ingress\">\n    Delelinjer skiller innhold visuelt fra hverandre. Den kan brukes dersom innholdet på begge sider av linjen er\n    urelatert men fortsatt skal være på samme side. Bredden til delelinjen bør stå i stil til innholdet.\n    </Ingress>\n    <ComponentExample component={Example} mdxType=\"ComponentExample\" />\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}