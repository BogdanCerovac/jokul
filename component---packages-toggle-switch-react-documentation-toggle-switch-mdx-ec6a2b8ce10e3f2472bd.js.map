{"version":3,"sources":["webpack:///../packages/toggle-switch-react/src/ToggleSwitch.tsx","webpack:///../packages/toggle-switch-react/documentation/Example.tsx","webpack:///../packages/toggle-switch-react/documentation/ToggleSwitch.mdx"],"names":["ToggleSwitch","children","pressed","onClick","className","disabled","inverted","helpLabel","componentClassName","classNames","type","aria-pressed","Example","boolValues","useState","isOn","setIsOn","undefined","_frontmatter","makeShortcode","name","props","console","warn","Ingress","ComponentExample","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","component","knobs","boolProps","parentName","isMDXComponent"],"mappings":"yOAcaA,EAAe,SAAC,GAAoF,IAAlFC,EAAkF,EAAlFA,SAAUC,EAAwE,EAAxEA,QAASC,EAA+D,EAA/DA,QAASC,EAAsD,EAAtDA,UAAWC,EAA2C,EAA3CA,SAAUC,EAAiC,EAAjCA,SAAUC,EAAuB,EAAvBA,UAChFC,EAAqBC,IAAW,oBAAqBL,EAAW,CAClE,8BAA+BE,IAGnC,OACI,oCACI,4BACII,KAAK,SACLC,iBAAgBT,EAChBG,SAAUA,EACVD,UAAWI,EACXL,QAASA,GAET,0BAAMC,UAAU,6BACZ,0BAAMA,UAAU,uCAEnBH,GAEJM,GAAa,kBAAC,IAAD,CAAcH,UAAU,gCAAgCG,UAAWA,MCZ9EK,EAjBkC,SAAC,GAAmB,IAAjBC,EAAiB,EAAjBA,WAAiB,EACzCC,oBAAS,GAA1BC,EAD0D,KACpDC,EADoD,KAE3DT,EACFM,GAAcA,EAAW,mBAAqB,oDAAiDI,EACnG,OACI,kBAAC,EAAD,CACIf,QAASa,EACTZ,QAAS,kBAAMa,GAASD,IACxBT,SAAUO,GAAcA,EAAU,UAClCR,SAAUQ,GAAcA,EAAU,WAClCN,UAAWA,GALf,mC,qFCFD,IAAMW,EAAe,GAEtBC,EAAgB,SAAAC,GAAI,OAAI,SAA6BC,GAEzD,OADAC,QAAQC,KAAK,aAAeH,EAAO,2EAC5B,kBAASC,KAGZG,EAAUL,EAAc,WACxBM,EAAmBN,EAAc,oBACjCO,EAAc,CAClBR,gBAEIS,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGT,E,oIACF,mBACD,OAAO,YAACM,EAAD,iBAAeD,EAAiBL,EAAhC,CAAuCS,WAAYA,EAAYC,QAAQ,cAI5E,YAACP,EAAD,CAASO,QAAQ,WAAjB,0JAIA,YAACN,EAAD,CAAkBO,UAAWpB,EAASqB,MAAO,CAC3CC,UAAW,CAAC,YAAa,aAAc,oBACtCH,QAAQ,qBACX,qLACA,qFACA,2CACA,sBACE,kBAAII,WAAW,MAAf,mDACA,kBAAIA,WAAW,MAAf,yDAMNN,EAAWO,gBAAiB","file":"component---packages-toggle-switch-react-documentation-toggle-switch-mdx-ec6a2b8ce10e3f2472bd.js","sourcesContent":["import React, { ReactNode, MouseEventHandler } from \"react\";\nimport { SupportLabel } from \"@fremtind/jkl-typography-react\";\nimport classNames from \"classnames\";\n\ninterface Props {\n    children: ReactNode;\n    pressed?: boolean;\n    className?: string;\n    onClick?: MouseEventHandler<HTMLButtonElement>;\n    disabled?: boolean;\n    inverted?: boolean;\n    helpLabel?: string;\n}\n\nexport const ToggleSwitch = ({ children, pressed, onClick, className, disabled, inverted, helpLabel }: Props) => {\n    const componentClassName = classNames(\"jkl-toggle-switch\", className, {\n        \"jkl-toggle-switch--inverted\": inverted,\n    });\n\n    return (\n        <>\n            <button\n                type=\"button\"\n                aria-pressed={!!pressed}\n                disabled={disabled}\n                className={componentClassName}\n                onClick={onClick}\n            >\n                <span className=\"jkl-toggle-switch__slider\">\n                    <span className=\"jkl-toggle-switch__expanding-pill\"></span>\n                </span>\n                {children}\n            </button>\n            {helpLabel && <SupportLabel className=\"jkl-toggle-switch__help-label\" helpLabel={helpLabel} />}\n        </>\n    );\n};\n","import React, { useState } from \"react\";\nimport { ExampleComponentProps } from \"@fremtind/jkl-portal-components\";\nimport { ToggleSwitch } from \"../src\";\n\nconst Example: React.FC<ExampleComponentProps> = ({ boolValues }) => {\n    const [isOn, setIsOn] = useState(false);\n    const helpLabel =\n        boolValues && boolValues[\"Med hjelpetekst\"] ? \"Du må være koblet til wifi for å velge dette\" : undefined;\n    return (\n        <ToggleSwitch\n            pressed={isOn}\n            onClick={() => setIsOn(!isOn)}\n            inverted={boolValues && boolValues[\"Invertert\"]}\n            disabled={boolValues && boolValues[\"Deaktivert\"]}\n            helpLabel={helpLabel}\n        >\n            Send inn data om min kjørestil\n        </ToggleSwitch>\n    );\n};\n\nexport default Example;\n","import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/jokul/jokul/portal/src/components/Layout/DocPageLayout.tsx\";\nimport Example from \"./Example\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst Ingress = makeShortcode(\"Ingress\");\nconst ComponentExample = makeShortcode(\"ComponentExample\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <Ingress mdxType=\"Ingress\">\n    Med veksleknapper kan brukerne bytte mellom to statuser (av eller på) uten at de må bekrefte valget. Ledeteksten\n    forteller hva brukeren slår av og på.\n    </Ingress>\n    <ComponentExample component={Example} knobs={{\n      boolProps: [\"Invertert\", \"Deaktivert\", \"Med hjelpetekst\"]\n    }} mdxType=\"ComponentExample\" />\n    <p>{`Veksleknapper passer til situasjoner der brukerne selv kan velge å ha en funksjon av eller på, for eksempel automatisk oppdatering eller automatisk lagring.`}</p>\n    <p>{`Ikke bruk veksleknapp hvis brukeren må bekrefte valget sitt.`}</p>\n    <h2>{`Eksempler på bruk`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`Slå innstillinger av eller på i en applikasjon.`}</li>\n      <li parentName=\"ul\">{`Bytte mellom lys eller mørk modus i et grensesnitt.`}</li>\n    </ul>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}