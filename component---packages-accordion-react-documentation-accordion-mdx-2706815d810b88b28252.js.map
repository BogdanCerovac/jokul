{"version":3,"sources":["webpack:///../packages/accordion-react/src/AccordionItem.tsx","webpack:///../packages/accordion-react/src/Accordion.tsx","webpack:///../packages/accordion-react/documentation/Example.tsx","webpack:///../packages/accordion-react/documentation/accordion.mdx"],"names":["AccordionItem","children","title","className","startExpanded","useState","isOpen","setIsOpen","elementRef","useAnimatedHeight","componentClassName","concat","data-testid","type","ref","hidden","onToggle","Accordion","Example","_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"sOAcO,SAASA,EAAT,GAAqF,IAA5DC,EAA4D,EAA5DA,SAAUC,EAAkD,EAAlDA,MAAOC,EAA2C,EAA3CA,UAA2C,IAAhCC,qBAAgC,WAC5DC,mBAASD,GAA9BE,EADiF,KACzEC,EADyE,KAEjFC,EAAcC,YAAkBH,GAFiD,GAGlFI,EAAqB,qBAAqBC,OAC5CL,EAAS,gCAAkC,GAC3CH,EAAY,IAAIA,EAAc,IAKlC,OACI,yBAAKS,cAAY,qBAAqBT,UAAWO,GAC7C,4BAAQP,UAAU,4BAA4BU,KAAK,UAC/C,0BAAMV,UAAU,kCAAkCD,GAClD,0BAAMC,UAAU,oCAEpB,kBAAC,IAAD,CACIW,IAAKN,EACLI,cAAY,sCACZT,UAAU,sCACVY,QAAST,EACTU,SAbK,kBAAMT,GAAWD,KAetB,yBAAKH,UAAU,+BAA+BF,KC9BvD,SAASgB,EAAT,GAAwD,IAAnChB,EAAmC,EAAnCA,SAAmC,IAAzBE,iBAAyB,MAAb,GAAa,EAC3D,OACI,yBAAKS,cAAY,gBAAgBT,UAAS,iBAAmBA,GACxDF,G,wBCLAiB,EAAU,kBACnB,6BAASf,UAAU,4CACf,kBAACc,EAAD,KACI,kBAACjB,EAAD,CAAeE,MAAM,wBAArB,gTAKA,kBAACF,EAAD,CAAeE,MAAM,eAArB,mT,qFCNL,IAAMiB,EAAe,GAOtBC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,iBAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAI5E,YAAC,EAAD,CAASA,QAAQ,YACjB,qCACA,8LACA,2QACA,kRACA,mCACA,sBACE,kBAAIC,WAAW,MAAf,mEACA,kBAAIA,WAAW,MAAf,uHAMNJ,EAAWK,gBAAiB","file":"component---packages-accordion-react-documentation-accordion-mdx-2706815d810b88b28252.js","sourcesContent":["/* There are no types for core-toggle, so we have to use ts-ignore\nHopefully someone (us?) will write types for it sometime soon */\n// @ts-ignore\nimport CoreToggle from \"@nrk/core-toggle/jsx\";\nimport React, { ReactNode, useState } from \"react\";\nimport { useAnimatedHeight } from \"@fremtind/jkl-react-hooks\";\n\ninterface Props {\n    title: string;\n    children: ReactNode;\n    startExpanded?: boolean;\n    className?: string;\n}\n\nexport function AccordionItem({ children, title, className, startExpanded = false }: Props) {\n    const [isOpen, setIsOpen] = useState(startExpanded);\n    const [elementRef] = useAnimatedHeight(isOpen);\n    const componentClassName = \"jkl-accordion-item\".concat(\n        isOpen ? \" jkl-accordion-item--expanded\" : \"\",\n        className ? ` ${className}` : \"\",\n    );\n\n    const onToggle = () => setIsOpen(!isOpen);\n\n    return (\n        <div data-testid=\"jkl-accordion-item\" className={componentClassName}>\n            <button className=\"jkl-accordion-item__title\" type=\"button\">\n                <span className=\"jkl-accordion-item__title-text\">{title}</span>\n                <span className=\"jkl-accordion-item__title-icon\" />\n            </button>\n            <CoreToggle\n                ref={elementRef}\n                data-testid=\"jkl-accordion-item__content-wrapper\"\n                className=\"jkl-accordion-item__content-wrapper\"\n                hidden={!isOpen}\n                onToggle={onToggle}\n            >\n                <div className=\"jkl-accordion-item__content\">{children}</div>\n            </CoreToggle>\n        </div>\n    );\n}\n","import React, { ReactNode } from \"react\";\n\ninterface Props {\n    children: ReactNode;\n    className?: string;\n}\n\nexport function Accordion({ children, className = \"\" }: Props) {\n    return (\n        <div data-testid=\"jkl-accordion\" className={`jkl-accordion ${className}`}>\n            {children}\n        </div>\n    );\n}\n","import React from \"react\";\nimport { Accordion, AccordionItem } from \"../src\";\nimport \"@fremtind/jkl-core/core.min.css\";\nimport \"@fremtind/jkl-accordion/accordion.min.css\";\n\nexport const Example = () => (\n    <section className=\"jkl-spacing--top-3 jkl-spacing--bottom-3\">\n        <Accordion>\n            <AccordionItem title=\"Accordion First item\">\n                Now let‘s use some more properties. Consider a list of 6 items, all with a fixed dimensions in a matter\n                of aesthetics but they could be auto-sized. We want them to be evenly and nicely distributed on the\n                horizontal axis so that when we resize the browser, everything is fine (without media queries!).\n            </AccordionItem>\n            <AccordionItem title=\"Second item\">\n                Now let‘s use some more properties. Consider a list of 6 items, all with a fixed dimensions in a matter\n                of aesthetics but they could be auto-sized. We want them to be evenly and nicely distributed on the\n                horizontal axis so that when we resize the browser, everything is fine (without media queries!).\n            </AccordionItem>\n        </Accordion>\n    </section>\n);\n","import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/github/workspace/portal/src/components/Layout/ComponentLayout.tsx\";\nimport { Example } from \"./Example\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <Example mdxType=\"Example\" />\n    <h2>{`Beskrivelse`}</h2>\n    <p>{`Trekkspillister gjør at vi kan gi brukeren mer innhold på liten plass, ved å vise informasjonen gradvis. De lar brukeren selv velge å vise eller skjule mer innnhold.`}</p>\n    <p>{`En trekkspilliste kan bestå av en eller flere rader. Brukeren kan klikke eller trykke på enten teksten eller vinkeltegnet (chevronen) for å vise eller skjule informasjonen. Vi legger ikke trekkspillister inn i andre trekkspillister (nesting).`}</p>\n    <p>{`Vurder hvor viktig infomasjonen er før du velger om du skal bruke en trekkspilliste. Viktig informasjon bør helst ligge åpent tilgjengelig. Da velger du enten å ikke ha infoen i trekkspilliste, eller du setter trekkspillisten som åpen, som standard.`}</p>\n    <h2>{`Eksempler`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`Liste med spørsmål og svar (for eksempel Vanlige spørsmål (FAQ)`}</li>\n      <li parentName=\"ul\">{`Tilleggsinformasjon som ikke er viktig for de fleste (for eksempel mer informasjon om Trafikkforsikringsavgiften)`}</li>\n    </ul>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}