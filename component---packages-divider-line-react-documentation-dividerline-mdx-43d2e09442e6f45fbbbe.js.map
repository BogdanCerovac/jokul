{"version":3,"sources":["webpack:///../packages/divider-line-react/src/DividerLine.tsx","webpack:///../packages/divider-line-react/documentation/Example.tsx","webpack:///../packages/divider-line-react/documentation/Dividerline.mdx"],"names":["DividerLine","useState","IntersectionObserver","spin","setSpin","ref","useRef","useIntersectionObserver","entries","forEach","entry","isIntersecting","rootMargin","threshold","className","Example","_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","isMDXComponent"],"mappings":"iNAGaA,EAAc,WAAM,MACLC,mBAAyC,oBAAzBC,sBAAjCC,EADsB,KAChBC,EADgB,KAEvBC,EAAMC,iBAAO,MAkBnB,OAFAC,YAAwBF,GAdA,SAACG,GAAD,OACpBA,EAAQC,SAAQ,SAACC,GACTA,EAAMC,gBAAkBR,IAASO,EAAMC,gBACvCP,GAAQ,SASH,kBAAMA,GAAQ,KALf,CACZQ,WAAY,MACZC,UAAW,IAOR,wBAAIR,IAAKA,EAAKS,UAAS,gBAAiBX,EAAO,oBAAsB,OCXjEY,G,oBAPC,kBACZ,6BAASD,UAAU,4CACf,wFACA,kBAAC,EAAD,S,qFCDD,IAAME,EAAe,GAOtBC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,iBAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAI5E,YAAC,EAAD,CAASA,QAAQ,YACjB,4OAKJH,EAAWI,gBAAiB","file":"component---packages-divider-line-react-documentation-dividerline-mdx-43d2e09442e6f45fbbbe.js","sourcesContent":["import React, { useState, useRef } from \"react\";\nimport { useIntersectionObserver } from \"@fremtind/jkl-react-hooks\";\n\nexport const DividerLine = () => {\n    const [spin, setSpin] = useState(typeof IntersectionObserver === \"undefined\");\n    const ref = useRef(null);\n\n    const checkVisibility = (entries: IntersectionObserverEntry[]) =>\n        entries.forEach((entry: IntersectionObserverEntry) => {\n            if (entry.isIntersecting && spin !== entry.isIntersecting) {\n                setSpin(true);\n            }\n        });\n\n    const options = {\n        rootMargin: \"0px\",\n        threshold: 1.0,\n    };\n\n    const fallback = () => setSpin(true);\n\n    useIntersectionObserver(ref, checkVisibility, fallback, options);\n\n    return <hr ref={ref} className={`jkl-divider ${spin ? \"jkl-divider--spin\" : \"\"}`} />;\n};\n","import React from \"react\";\nimport { DividerLine } from \"../src\";\nimport \"@fremtind/jkl-core/core.min.css\";\nimport \"@fremtind/jkl-divider-line/divider-line.css\";\n\nconst Example = () => (\n    <section className=\"jkl-spacing--top-3 jkl-spacing--bottom-3\">\n        <p>DividerLine that animates when its scrolled into viewport</p>\n        <DividerLine />\n    </section>\n);\n\nexport default Example;\n","import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/jokul/jokul/portal/src/components/Layout/ComponentLayout.tsx\";\nimport Example from \"./Example\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <Example mdxType=\"Example\" />\n    <p>{`Delelinjer skiller innhold visuelt fra hverandre. Den kan brukes dersom innholdet på begge sider av linjen er urelatert men fortsatt skal være på samme side. Bredden til delelinjen bør stå i stil til innholdet.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}