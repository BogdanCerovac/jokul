{"version":3,"sources":["webpack:///../packages/text-input-react/src/BaseInputField.tsx","webpack:///../packages/text-input-react/src/TextField.tsx","webpack:///../packages/text-input-react/src/TextArea.tsx","webpack:///../packages/text-input-react/src/Icons/IconSearch.tsx","webpack:///../packages/text-input-react/src/Icons/IconClear.tsx","webpack:///../packages/text-input-react/src/ActionIcon.tsx","webpack:///../packages/text-input-react/src/ActionTextField.tsx","webpack:///../packages/text-input-react/src/InlineTextField.tsx","webpack:///../packages/text-input-react/documentation/Example.tsx","webpack:///../packages/text-input-react/documentation/TextInput.mdx"],"names":["BaseInputField","maxLength","width","invalid","ariaDescribedby","rest","style","getWidthAsStyle","data-testid","className","aria-describedby","aria-invalid","TextField","helpLabel","errorLabel","label","variant","forceCompact","componentClassName","concat","TextArea","id","rows","placeholder","restProps","IconSearch","viewBox","xmlns","fillRule","clipRule","d","IconClear","ActionIcon","action","actionType","getIcon","ActionTextField","baseInputProps","type","onClick","aria-label","title","icon","InlineTextField","srOnly","Example","useState","value","setValue","handleChange","event","target","onChange","e","console","log","readOnly","_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","isMDXComponent"],"mappings":"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","file":"component---packages-text-input-react-documentation-text-input-mdx-4b24ec8804085b9ecb42.js","sourcesContent":["import React, { FocusEventHandler, ChangeEventHandler, CSSProperties } from \"react\";\nimport { LabelVariant } from \"@fremtind/jkl-core\";\n\nexport interface BaseInputProps {\n    onChange?: ChangeEventHandler<HTMLInputElement | HTMLTextAreaElement>;\n    onBlur?: FocusEventHandler<HTMLInputElement | HTMLTextAreaElement>;\n    onFocus?: FocusEventHandler<HTMLInputElement | HTMLTextAreaElement>;\n    value?: string;\n    className?: string;\n    id?: string;\n    required?: boolean;\n    placeholder?: string;\n    variant?: LabelVariant;\n    forceCompact?: boolean;\n    readOnly?: boolean;\n    maxLength?: number;\n    width?: string;\n    autoComplete?: string;\n}\n\ninterface Props extends BaseInputProps {\n    type?: \"text\" | \"number\" | \"tel\" | \"password\" | \"email\" | \"year\";\n    invalid?: boolean;\n    ariaDescribedby?: string;\n}\n\nfunction getWidthAsStyle(width?: string, maxLength?: number): CSSProperties | undefined {\n    if (width) {\n        return { width }; // prioritize width prop\n    }\n\n    if (maxLength && maxLength < 15) {\n        return { width: `${maxLength + 3}ch` }; // else use maxLength if not large\n    }\n\n    return undefined;\n}\n\nexport const BaseInputField = ({ maxLength, width, invalid, ariaDescribedby, ...rest }: Props) => {\n    const style = getWidthAsStyle(width, maxLength);\n\n    return (\n        <input\n            data-testid=\"jkl-text-field__input\"\n            className=\"jkl-text-field__input\"\n            maxLength={maxLength}\n            style={style}\n            aria-describedby={ariaDescribedby}\n            aria-invalid={invalid}\n            {...rest}\n        />\n    );\n};\n","import React from \"react\";\nimport { Label, SupportLabel } from \"@fremtind/jkl-typography-react\";\nimport { BaseInputField, BaseInputProps } from \"./BaseInputField\";\n\ninterface Props extends BaseInputProps {\n    label: string;\n    helpLabel?: string;\n    errorLabel?: string;\n    type?: \"text\" | \"number\" | \"tel\" | \"password\" | \"email\" | \"year\";\n}\n\nexport const TextField = ({ helpLabel, errorLabel, label, className, variant, forceCompact, ...rest }: Props) => {\n    const componentClassName = \"jkl-text-field\".concat(\n        forceCompact ? \" jkl-text-field--compact\" : \"\",\n        className ? ` ${className}` : \"\",\n    );\n\n    return (\n        <label data-testid=\"jkl-text-field\" className={componentClassName}>\n            <Label variant={variant} forceCompact={forceCompact}>\n                {label}\n            </Label>\n            <BaseInputField invalid={!!errorLabel} {...rest} />\n            <SupportLabel helpLabel={helpLabel} errorLabel={errorLabel} forceCompact={forceCompact} />\n        </label>\n    );\n};\n","import React, { FocusEvent } from \"react\";\nimport { Label, SupportLabel } from \"@fremtind/jkl-typography-react\";\nimport { BaseInputProps } from \"./BaseInputField\";\n\ninterface Props extends BaseInputProps {\n    label: string;\n    onBlur?: (value: FocusEvent<HTMLTextAreaElement>) => void;\n    rows?: number;\n    helpLabel?: string;\n    errorLabel?: string;\n}\n\nexport const TextArea = ({\n    id,\n    variant,\n    label,\n    className,\n    helpLabel,\n    errorLabel,\n    rows = 7,\n    placeholder = \" \",\n    forceCompact,\n    ...restProps\n}: Props) => {\n    const componentClassName = \"jkl-text-field jkl-text-area\".concat(\n        forceCompact ? ` jkl-text-field--compact` : \"\",\n        className ? ` ${className}` : \"\",\n    );\n\n    return (\n        <label data-testid=\"jkl-text-field\" className={componentClassName}>\n            <Label variant={variant} forceCompact={forceCompact}>\n                {label}\n            </Label>\n            <textarea\n                aria-invalid={!!errorLabel}\n                className={`jkl-text-field__input jkl-text-field__input--${rows}-rows`}\n                id={id}\n                placeholder={placeholder}\n                {...restProps}\n            />\n            <SupportLabel helpLabel={helpLabel} errorLabel={errorLabel} forceCompact={forceCompact} />\n        </label>\n    );\n};\n","import React from \"react\";\n\nexport const IconSearch = () => (\n    <svg viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\" fillRule=\"evenodd\" clipRule=\"evenodd\">\n        <path\n            d=\"M15.853 16.56c-1.683 1.517-3.911 2.44-6.353 2.44-5.243 0-9.5-4.257-9.5-9.5s4.257-9.5 9.5-9.5 9.5 \n        4.257 9.5 9.5c0 2.442-.923 4.67-2.44 6.353l7.44 7.44-.707.707-7.44-7.44zm-6.353-15.56c4.691 0 8.5 3.809 8.5 \n        8.5s-3.809 8.5-8.5 8.5-8.5-3.809-8.5-8.5 3.809-8.5 8.5-8.5z\"\n        />\n    </svg>\n);\n","import React from \"react\";\n\nexport const IconClear = () => (\n    <svg viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\" fillRule=\"evenodd\" clipRule=\"evenodd\">\n        <path d=\"M12 11.293l10.293-10.293.707.707-10.293 10.293 10.293 10.293-.707.707-10.293-10.293-10.293 10.293-.707-.707 10.293-10.293-10.293-10.293.707-.707 10.293 10.293z\" />\n    </svg>\n);\n","import React from \"react\";\nimport { IconSearch } from \"./Icons/IconSearch\";\nimport { IconClear } from \"./Icons/IconClear\";\n\ninterface Props {\n    action: IconVariant;\n    className: string;\n}\n\nfunction getIcon(actionType: IconVariant) {\n    switch (actionType) {\n        case \"clear\":\n            return <IconClear />;\n        case \"search\":\n            return <IconSearch />;\n        default:\n            return null;\n    }\n}\n\nexport const ActionIcon = ({ action, className }: Props) => {\n    return (\n        <span data-testid=\"jkl-action-icon\" className={className}>\n            {getIcon(action)}\n        </span>\n    );\n};\n\nexport type IconVariant = \"clear\" | \"search\";\n","import React, { MouseEventHandler } from \"react\";\nimport { ActionIcon, IconVariant } from \"./ActionIcon\";\nimport { Label, SupportLabel } from \"@fremtind/jkl-typography-react\";\nimport { BaseInputField, BaseInputProps } from \"./BaseInputField\";\n\ninterface Props extends BaseInputProps {\n    action: {\n        icon: IconVariant;\n        label: string;\n        onClick: MouseEventHandler<HTMLButtonElement>;\n    };\n    label: string;\n    helpLabel?: string;\n    errorLabel?: string;\n    type?: \"text\" | \"number\" | \"tel\" | \"password\" | \"email\" | \"year\";\n}\n\nexport const ActionTextField = ({\n    action,\n    forceCompact,\n    className,\n    helpLabel,\n    errorLabel,\n    variant,\n    label,\n    ...baseInputProps\n}: Props) => {\n    const componentClassName = \"jkl-text-field jkl-text-field--action\".concat(\n        forceCompact ? \" jkl-text-field--compact\" : \"\",\n        className ? ` ${className}` : \"\",\n    );\n\n    return (\n        <label data-testid=\"jkl-text-field\" className={componentClassName}>\n            <Label variant={variant} forceCompact={forceCompact}>\n                {label}\n            </Label>\n            <div className=\"jkl-text-field__input-wrapper\">\n                <BaseInputField invalid={!!errorLabel} {...baseInputProps} />\n                <button\n                    type=\"button\"\n                    className=\"jkl-text-field__action-button\"\n                    onClick={action.onClick}\n                    aria-label={action.label}\n                    title={action.label}\n                >\n                    <ActionIcon className=\"jkl-text-field__action-icon\" action={action.icon} />\n                </button>\n            </div>\n            <SupportLabel helpLabel={helpLabel} errorLabel={errorLabel} forceCompact={forceCompact} />\n        </label>\n    );\n};\n","import React from \"react\";\nimport { Label } from \"@fremtind/jkl-typography-react\";\nimport { BaseInputField, BaseInputProps } from \"./BaseInputField\";\n\ninterface Props extends BaseInputProps {\n    label: string;\n    invalid?: boolean;\n    type?: \"text\" | \"number\" | \"tel\" | \"password\" | \"email\" | \"year\";\n}\n\nexport const InlineTextField = ({ label, className, variant, forceCompact, ...rest }: Props) => {\n    const componentClassName = \"jkl-text-field jkl-text-field--inline\".concat(\n        forceCompact ? \" jkl-text-field--compact\" : \"\",\n        className ? ` ${className}` : \"\",\n    );\n\n    return (\n        <label data-testid=\"jkl-text-field\" className={componentClassName}>\n            <Label srOnly variant={variant} forceCompact={forceCompact}>\n                {label}\n            </Label>\n            <BaseInputField {...rest} />\n        </label>\n    );\n};\n","import React, { ChangeEvent, useState } from \"react\";\nimport { TextArea, TextField, ActionTextField, InlineTextField } from \"../src\";\nimport \"@fremtind/jkl-core/core.min.css\";\nimport \"@fremtind/jkl-text-input/text-input.min.css\";\nimport \"./index.scss\";\n\nconst Example = () => {\n    const [value, setValue] = useState(\"\");\n    function handleChange(event: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) {\n        setValue(event.target.value);\n    }\n\n    return (\n        <section className=\"jkl-spacing--top-3 jkl-spacing--bottom-3\">\n            <div className=\"side-by-side jkl-spacing--bottom-2\">\n                <pre>\n                    <code>{`forceCompact={true}`}</code>\n                </pre>\n                <pre>\n                    <code>{`forceCompact={false}`}</code>\n                </pre>\n            </div>\n            <div className=\"side-by-side jkl-spacing--bottom-2\">\n                <ActionTextField\n                    forceCompact\n                    action={{\n                        icon: \"clear\",\n                        label: \"Utfør nullstilling\",\n                        onClick: () => setValue(\"\"),\n                    }}\n                    label=\"Nullstill felt\"\n                    value={value}\n                    onChange={(e) => setValue(e.target.value)}\n                />\n                <ActionTextField\n                    action={{\n                        icon: \"search\",\n                        label: \"Skriv til konsoll\",\n                        onClick: console.log,\n                    }}\n                    label=\"Skriv til konsoll\"\n                    value={value}\n                    onChange={(e) => setValue(e.target.value)}\n                />\n            </div>\n            <div className=\"side-by-side jkl-spacing--bottom-2\">\n                <p className=\"jkl-small\">\n                    Jeg tjener <InlineTextField type=\"number\" maxLength={5} label=\"kronebeløp\" forceCompact /> kroner i\n                    måneden.\n                </p>\n                <p className=\"jkl-p\">\n                    Jeg tjener <InlineTextField invalid type=\"number\" maxLength={5} label=\"kronebeløp\" /> kroner i\n                    måneden.\n                </p>\n            </div>\n            <div className=\"side-by-side jkl-spacing--bottom-2\">\n                <TextField\n                    label=\"Fornavn\"\n                    value={value}\n                    onChange={handleChange}\n                    placeholder={\"f.eks. Ola\"}\n                    variant=\"small\"\n                    helpLabel=\"La oss se...\"\n                    forceCompact\n                    maxLength={10}\n                />\n                <TextField label=\"Fornavn\" value={\"Per\"} onChange={handleChange} readOnly variant=\"small\" />\n            </div>\n\n            <div className=\"side-by-side jkl-spacing--bottom-2\">\n                <TextField\n                    forceCompact\n                    label=\"Telefon\"\n                    type=\"tel\"\n                    value={value}\n                    onChange={handleChange}\n                    placeholder=\"999 99 999\"\n                />\n                <TextField label=\"Telefon\" type=\"tel\" value={value} onChange={handleChange} placeholder=\"999 99 999\" />\n            </div>\n\n            <div className=\"side-by-side jkl-spacing--bottom-5\">\n                <TextField\n                    forceCompact\n                    label=\"Passord\"\n                    type=\"password\"\n                    value={value}\n                    onChange={handleChange}\n                    helpLabel=\"Passord er en vanlig form for autentisering\"\n                    variant=\"large\"\n                />\n                <TextField\n                    label=\"Passord\"\n                    type=\"password\"\n                    value={value}\n                    onChange={handleChange}\n                    helpLabel=\"Passord er en vanlig form for autentisering\"\n                    variant=\"large\"\n                />\n            </div>\n\n            <div className=\"side-by-side jkl-spacing--bottom-4\">\n                <TextArea\n                    rows={3}\n                    label=\"Svar med en kommentar\"\n                    value={value}\n                    onChange={handleChange}\n                    forceCompact\n                    placeholder=\"Begrens deg til tre linjer\"\n                />\n                <TextArea\n                    rows={3}\n                    label=\"Svar med en kommentar\"\n                    value={value}\n                    onChange={handleChange}\n                    placeholder=\"Begrens deg til tre linjer\"\n                />\n            </div>\n            <div className=\"side-by-side jkl-spacing--bottom-2\">\n                <TextArea label=\"Din livshistorie\" value={value} onChange={handleChange} variant=\"large\" forceCompact />\n                <TextArea label=\"Din livshistorie\" value={value} onChange={handleChange} variant=\"large\" />\n            </div>\n        </section>\n    );\n};\nexport default Example;\n","import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/github/workspace/portal/src/components/Layout/ComponentLayout.tsx\";\nimport Example from \"./Example\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <Example mdxType=\"Example\" />\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}