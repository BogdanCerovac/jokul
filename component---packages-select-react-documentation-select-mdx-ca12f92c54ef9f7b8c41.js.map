{"version":3,"sources":["webpack:///../packages/select-react/src/useListNavigation.ts","webpack:///../packages/select-react/src/Select.tsx","webpack:///../packages/select-react/src/NativeSelect.tsx","webpack:///../packages/select-react/documentation/Example.tsx","webpack:///../packages/select-react/documentation/Select.mdx"],"names":["handleMoveTo","direction","event","list","currentFocus","preventDefault","current","thisLI","parentElement","prevLI","previousElementSibling","prevItem","querySelector","focus","nextLI","nextElementSibling","nextItem","firstItem","listItems","querySelectorAll","length","moveFocusTo","handleListKeyNav","moveFunction","search","searchResetTimer","key","moveDetails","target","undefined","searchResult","keys","concat","timer","clearTimeout","setTimeout","resetWhenIdle","n","label","innerText","toLowerCase","indexOf","findItem","toLower","str","replace","Select","items","value","onChange","className","helpLabel","errorLabel","inline","defaultPrompt","variant","forceCompact","initialInputValue","useState","selectedValue","setSelectedValue","hasSelectedValue","getLabelFromValue","useCallback","matchingItem","map","getValuePair","filter","item","displayedValue","setDisplayedValue","dropdownIsShown","setShown","listId","nanoid","listRef","typeAheadIsEnabled","useRef","useEffect","addEventListener","removeEventListener","useListNavigation","componentClassName","classNames","elementRef","useAnimatedHeight","data-testid","type","aria-haspopup","id","ref","role","popup","hidden","onToggle","listElement","listEl","selected","focusedItem","focusSelected","onToggleSelect","e","button","detail","nextValue","textContent","aria-activedescendant","tabIndex","aria-selected","NativeSelect","placeholder","defaultValue","onBlur","disabled","Example","boolValues","choiceValues","C","setValue","input","_frontmatter","makeShortcode","name","props","console","warn","Ingress","ComponentExample","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","component","knobs","boolProps","choiceProps","values","parentName","isMDXComponent"],"mappings":"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","file":"component---packages-select-react-documentation-select-mdx-ca12f92c54ef9f7b8c41.js","sourcesContent":["import { useRef, useEffect, RefObject } from \"react\";\n\ntype Timer = NodeJS.Timeout | undefined;\ntype KeyBuffer = { keys: string } | undefined;\ntype Direction = \"prev\" | \"next\" | \"first\" | \"last\";\ninterface MoveDetails {\n    event: KeyboardEvent;\n    list: HTMLUListElement;\n    currentFocus: HTMLButtonElement;\n}\ninterface ListDetails {\n    list: HTMLUListElement;\n    search: KeyBuffer;\n    searchResetTimer: Timer;\n}\ninterface SearchDetails extends ListDetails {\n    key: string;\n}\ninterface EventDetails extends ListDetails {\n    event: KeyboardEvent;\n}\n\nexport function useListNavigation(typeAheadIsEnabled = true): RefObject<HTMLUListElement> {\n    const listRef = useRef<HTMLUListElement>(null);\n    let search: KeyBuffer;\n    let searchResetTimer: Timer;\n    if (typeAheadIsEnabled) {\n        search = { keys: \"\" }; // keypress buffer is object to preserve state\n    }\n    useEffect(() => {\n        const list = listRef.current;\n        if (list) {\n            list.addEventListener(\"keydown\", (event) => handleListKeyNav({ list, event, search, searchResetTimer }));\n        }\n        return () => {\n            if (list) {\n                list.removeEventListener(\"keydown\", (event) =>\n                    handleListKeyNav({ list, event, search, searchResetTimer }),\n                );\n            }\n        };\n    }, [search, searchResetTimer]);\n\n    return listRef;\n}\n\nfunction handleMoveTo(direction: Direction, { event, list, currentFocus }: MoveDetails) {\n    event.preventDefault();\n    moveFocusTo(direction, list, currentFocus);\n}\n\nfunction handleListKeyNav({ list, event, search, searchResetTimer }: EventDetails, moveFunction = handleMoveTo) {\n    const { key, target } = event;\n    const currentFocus = target as HTMLButtonElement;\n\n    const moveDetails = {\n        event,\n        list,\n        currentFocus,\n    };\n\n    switch (key) {\n        case \"ArrowUp\" || \"PageUp\":\n            moveFunction(\"prev\", moveDetails);\n            break;\n        case \"ArrowDown\" || \"PageDown\":\n            moveFunction(\"next\", moveDetails);\n            break;\n        case \"Home\":\n            moveFunction(\"first\", moveDetails);\n            break;\n        case \"End\":\n            moveFunction(\"last\", moveDetails);\n            break;\n        case \"Tab\":\n            // in a standard select, tab does nothing in-menu\n            event.preventDefault();\n            break;\n        case \"Enter\" || \" \":\n            break;\n\n        default:\n            if (search !== undefined) {\n                const searchResult = findItem({ list, key, search, searchResetTimer });\n                if (searchResult) {\n                    searchResult.focus();\n                }\n            }\n            break;\n    }\n}\n\nfunction moveFocusTo(direction: Direction, list: HTMLUListElement, current: HTMLButtonElement) {\n    const thisLI = current.parentElement;\n    switch (direction) {\n        case \"prev\":\n            const prevLI = thisLI && thisLI.previousElementSibling;\n            if (prevLI) {\n                const prevItem = prevLI.querySelector<HTMLButtonElement>(`[role=\"option\"]`);\n                if (prevItem) {\n                    prevItem.focus();\n                }\n            }\n            break;\n        case \"next\":\n            const nextLI = thisLI && thisLI.nextElementSibling;\n            if (nextLI) {\n                const nextItem = nextLI.querySelector<HTMLButtonElement>(`[role=\"option\"]`);\n                if (nextItem) {\n                    nextItem.focus();\n                }\n            }\n            break;\n        case \"first\":\n            const firstItem = list.querySelector<HTMLButtonElement>(`[role=\"option\"]`);\n            if (firstItem) {\n                firstItem.focus();\n            }\n            break;\n        case \"last\":\n            const listItems = list.querySelectorAll<HTMLButtonElement>(`[role=\"option\"]`);\n            if (listItems.length) {\n                listItems[listItems.length - 1].focus();\n            }\n            break;\n    }\n}\n\nfunction findItem({ list, key, search, searchResetTimer }: SearchDetails): HTMLButtonElement | null {\n    const listItems = list.querySelectorAll(`[role=\"option\"]`);\n    if (!listItems.length) return null;\n\n    if (search) {\n        search.keys = search.keys.concat(key);\n        resetWhenIdle(search, searchResetTimer);\n\n        for (let n = 0; n < listItems.length; n++) {\n            const label = (listItems[n] as HTMLButtonElement).innerText;\n            if (label && label.toLowerCase().indexOf(search.keys) === 0) {\n                return listItems[n] as HTMLButtonElement;\n            }\n        }\n    }\n\n    return null;\n}\n\nfunction resetWhenIdle(search: KeyBuffer, timer: Timer) {\n    if (timer) {\n        clearTimeout(timer);\n        timer = undefined;\n    }\n    timer = setTimeout(\n        () => {\n            search ? (search.keys = \"\") : (search = { keys: \"\" });\n            timer = undefined;\n        },\n        500,\n        search,\n        timer,\n    );\n}\n","// @ts-ignore\nimport CoreToggle from \"@nrk/core-toggle/jsx\";\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport nanoid from \"nanoid\";\nimport { Label, SupportLabel } from \"@fremtind/jkl-typography-react\";\nimport { LabelVariant, ValuePair, getValuePair } from \"@fremtind/jkl-core\";\nimport { useAnimatedHeight } from \"@fremtind/jkl-react-hooks\";\nimport { useListNavigation } from \"./useListNavigation\";\nimport classNames from \"classnames\";\n\ninterface Props {\n    label: string;\n    items: Array<string | ValuePair>;\n    inline?: boolean;\n    defaultPrompt?: string;\n    className?: string;\n    value?: string;\n    initialInputValue?: string; // Deprecated!\n    onChange?: (value: string) => void;\n    helpLabel?: string;\n    errorLabel?: string;\n    variant?: LabelVariant;\n    forceCompact?: boolean;\n}\n\ninterface CoreToggleSelectEvent {\n    detail: { textContent: string; value: string };\n    target: { hidden: boolean; button: HTMLButtonElement; value: { textContent: string } };\n}\n\nfunction toLower(str = \"\") {\n    return str.toLowerCase().replace(/[\\W_]+/g, \"\"); // strip all non-alphanumeric chars\n}\n\nfunction focusSelected(listEl: HTMLElement, listId: string, selected: string | undefined) {\n    let focusedItem: HTMLElement | null;\n    if (selected !== undefined) {\n        // move focus to selected option\n        focusedItem = listEl.querySelector(`#${listId}__${toLower(selected)}`);\n    } else {\n        // move focus to first option\n        focusedItem = listEl.querySelector('[role=\"option\"]');\n    }\n    focusedItem && focusedItem.focus();\n}\n\nexport function Select({\n    items,\n    value,\n    label,\n    onChange,\n    className,\n    helpLabel,\n    errorLabel,\n    inline = false,\n    defaultPrompt = \"Velg\",\n    variant,\n    forceCompact,\n    initialInputValue,\n}: Props) {\n    const [selectedValue, setSelectedValue] = useState(value);\n    const hasSelectedValue = typeof selectedValue !== \"undefined\" && selectedValue !== \"\";\n\n    const getLabelFromValue = useCallback(\n        (value: string | undefined) => {\n            const matchingItem = items.map(getValuePair).filter((item) => item.value === value)[0];\n            return matchingItem && matchingItem.label;\n        },\n        [items],\n    );\n    const [displayedValue, setDisplayedValue] = useState(getLabelFromValue(value));\n\n    const [dropdownIsShown, setShown] = useState(false);\n    const [listId] = useState(`dropdown${nanoid(16)}`);\n    const listRef = useListNavigation();\n    const componentClassName = classNames(\"jkl-select\", className, {\n        \"jkl-select--inline\": inline,\n        \"jkl-select--compact\": forceCompact,\n        \"jkl-select--open\": dropdownIsShown,\n        \"jkl-select--no-value\": !hasSelectedValue,\n        \"jkl-select--invalid\": !!errorLabel,\n    });\n\n    if (initialInputValue && process.env.NODE_ENV !== \"production\") {\n        console.warn(\n            \"Warning!: The 'initialInputValue' prop on the Select component is deprecated and does nothing. Use the 'value' prop instead.\",\n        );\n    }\n\n    function onToggle() {\n        const listElement = listRef.current;\n        if (listElement && !dropdownIsShown) {\n            focusSelected(listElement, listId, selectedValue);\n        }\n        setShown(!dropdownIsShown);\n    }\n\n    function onToggleSelect(e: CoreToggleSelectEvent) {\n        e.target.hidden = true;\n        e.target.button.focus();\n        e.target.value = e.detail;\n        const nextValue = e.detail.value;\n        setDisplayedValue(e.detail.textContent);\n        setSelectedValue(nextValue);\n        onChange && onChange(nextValue);\n    }\n\n    useEffect(() => {\n        setSelectedValue(value);\n        setDisplayedValue(getLabelFromValue(value));\n    }, [value, items, getLabelFromValue]);\n\n    const [elementRef] = useAnimatedHeight(dropdownIsShown);\n\n    return (\n        <div data-testid=\"jkl-select\" className={componentClassName}>\n            <Label variant={variant} forceCompact={forceCompact}>\n                {label}\n            </Label>\n            <div className=\"jkl-select__outer-wrapper\">\n                <button\n                    type=\"button\"\n                    className=\"jkl-select__value\"\n                    data-testid=\"jkl-select__value\"\n                    aria-haspopup=\"listbox\"\n                >\n                    {hasSelectedValue ? displayedValue : defaultPrompt}\n                </button>\n                <CoreToggle\n                    id={listId}\n                    ref={elementRef}\n                    role=\"listbox\"\n                    className=\"jkl-select__toggler\"\n                    popup={label}\n                    hidden={!dropdownIsShown}\n                    onToggle={onToggle}\n                    onToggleSelect={onToggleSelect}\n                    aria-activedescendant={hasSelectedValue && `${listId}__${toLower(selectedValue)}`}\n                >\n                    <ul\n                        className=\"jkl-select__option-wrapper\"\n                        data-testid=\"jkl-select__option-wrapper\"\n                        tabIndex={-1}\n                        ref={listRef}\n                    >\n                        {items.map(getValuePair).map((item) => (\n                            <li key={item.value}>\n                                <button\n                                    type=\"button\"\n                                    id={`${listId}__${toLower(item.value)}`}\n                                    className=\"jkl-select__option\"\n                                    data-testid=\"jkl-select__option\"\n                                    aria-selected={item.value === selectedValue}\n                                    role=\"option\"\n                                    value={item.value}\n                                >\n                                    {item.label}\n                                </button>\n                            </li>\n                        ))}\n                    </ul>\n                </CoreToggle>\n                <span className=\"jkl-select__chevron\" />\n            </div>\n            <SupportLabel helpLabel={helpLabel} errorLabel={errorLabel} forceCompact={forceCompact} />\n        </div>\n    );\n}\n","/* eslint \"jsx-a11y/no-onchange\": 0 */\n\nimport React from \"react\";\nimport { LabelVariant, ValuePair, getValuePair } from \"@fremtind/jkl-core\";\nimport { Label, SupportLabel } from \"@fremtind/jkl-typography-react\";\nimport classNames from \"classnames\";\n\ninterface Props {\n    label: string;\n    items: Array<string | ValuePair>;\n    inline?: boolean;\n    className?: string;\n    onChange?: (event: React.ChangeEvent<HTMLSelectElement>) => void;\n    helpLabel?: string;\n    errorLabel?: string;\n    variant?: LabelVariant;\n    placeholder?: string;\n    value?: string;\n    forceCompact?: boolean;\n}\n\nexport function NativeSelect({\n    label,\n    items,\n    className = \"\",\n    onChange,\n    inline = false,\n    helpLabel,\n    errorLabel,\n    variant,\n    placeholder,\n    value,\n    forceCompact,\n}: Props) {\n    // If no value is given, set it to first item, or to empty string if there is a placeholder\n    if (!value) {\n        if (!placeholder && items.length) {\n            value = getValuePair(items[0]).value;\n        }\n    }\n\n    const componentClassName = classNames(\"jkl-select\", className, {\n        \"jkl-select--inline\": inline,\n        \"jkl-select--compact\": forceCompact,\n        \"jkl-select--invalid\": !!errorLabel,\n    });\n\n    const defaultValue = value ? undefined : \"\";\n\n    return (\n        <label data-testid=\"jkl-select\" className={componentClassName}>\n            <Label variant={variant} forceCompact={forceCompact}>\n                {label}\n            </Label>\n            <select\n                value={value}\n                defaultValue={defaultValue}\n                className=\"jkl-select__value\"\n                onBlur={onChange}\n                onChange={onChange}\n            >\n                {placeholder && !value && (\n                    <option disabled value=\"\">\n                        {placeholder}\n                    </option>\n                )}\n                {items.map(getValuePair).map((item) => (\n                    <option data-testid=\"jkl-select__option\" key={item.value} value={item.value}>\n                        {item.label}\n                    </option>\n                ))}\n            </select>\n            <span className=\"jkl-select__chevron\" />\n            <SupportLabel helpLabel={helpLabel} errorLabel={errorLabel} forceCompact={forceCompact} />\n        </label>\n    );\n}\n","import React, { useState, ChangeEvent } from \"react\";\nimport { ExampleComponentProps } from \"@fremtind/jkl-portal-components\";\nimport { Select, NativeSelect } from \"../src\";\nimport { LabelVariant } from \"@fremtind/jkl-core\";\nimport \"@fremtind/jkl-core/core.min.css\";\nimport \"@fremtind/jkl-select/select.min.css\";\n\nexport const Example = ({ boolValues, choiceValues }: ExampleComponentProps) => {\n    const C = boolValues && boolValues[\"Native\"] ? NativeSelect : Select;\n\n    const values = [\n        { value: \"firstvalue\", label: \"Value 1\" },\n        { value: \"secondvalue\", label: \"Value 2\" },\n    ];\n    const [value, setValue] = useState<string>();\n    const universalSetValue = (input: string | ChangeEvent<HTMLSelectElement>) => {\n        if (typeof input === \"string\") {\n            setValue(input);\n        } else {\n            setValue(input.target.value);\n        }\n    };\n\n    const errorLabel = boolValues && boolValues[\"Med feil\"] ? \"Beskrivende feilmelding\" : undefined;\n    const helpLabel = boolValues && boolValues[\"Med hjelpetekst\"] ? \"Hjelpsom beskjed\" : undefined;\n    const variant = choiceValues && (choiceValues[\"Etikettvariant\"] as LabelVariant);\n\n    return (\n        <C\n            forceCompact={boolValues && boolValues[\"Kompakt\"]}\n            variant={variant}\n            label=\"Select\"\n            items={values}\n            value={value}\n            helpLabel={helpLabel}\n            errorLabel={errorLabel}\n            onChange={universalSetValue}\n        />\n    );\n};\n\nexport default Example;\n","import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/jokul/jokul/portal/src/components/Layout/DocPageLayout.tsx\";\nimport { Example } from \"./Example\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst Ingress = makeShortcode(\"Ingress\");\nconst ComponentExample = makeShortcode(\"ComponentExample\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <Ingress mdxType=\"Ingress\">\n    Vi bruker nedtrekkslister til å gi brukeren en liste med alternativ. Nedtrekkslister passer i de tilfellene det er\n    for mange valg til å bruke radioknapper. Nedtrekkslisten må ha en overskrift, som forteller hva det er brukerne kan\n    velge mellom i listen.\n    </Ingress>\n    <ComponentExample component={Example} knobs={{\n      boolProps: [\"Native\", \"Kompakt\", \"Invertert\", \"Med hjelpetekst\", \"Med feil\"],\n      choiceProps: [{\n        name: \"Etikettvariant\",\n        values: [\"small\", \"medium\", \"large\"],\n        defaultValue: 1\n      }]\n    }} mdxType=\"ComponentExample\" />\n    <p>{`Hvis du trenger en nedtrekksliste med mange valg, kan du også legge inn en søke- eller filtreringsfunksjon.`}</p>\n    <h2>{`Tekst og validering`}</h2>\n    <p>{`Bruk prinsippene for skjemadesign til å velge størrelse på overskriften til listen. Lag en kort og tydelig tekst, som forteller hva det er brukeren skal gjøre i nedtrekkslisten. Eksempel: `}<em parentName=\"p\">{`Velg land`}</em>{`. Hvis det trengs, kan du legge en hjelpetekst under listen for å forklare mer.`}</p>\n    <p>{`Hvis nedtrekkslisten ikke validerer, viser systemet en feilmelding som forklarer hva som er galt. Feilmeldingen erstatter en eventuell hjelpetekst, så den må eventuelt gjenta informasjonen fra hjelpeteksten.`}</p>\n    <p>{`Eksempel:\n`}<strong parentName=\"p\">{`Hjelpetekst`}</strong>{`: `}<em parentName=\"p\">{`Velg landet du var på ferie i da du ble syk`}</em>{`. `}<strong parentName=\"p\">{`Feilmelding`}</strong>{`: `}<em parentName=\"p\">{`Du må velge hvor du var på ferie`}</em>{`.`}</p>\n    <h2>{`Bruk`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`Velg årsak eller skadetype (gjerne mange valg)`}</li>\n      <li parentName=\"ul\">{`Velg diagnose (for dyre- eller helseforsikring, gjerne med søkemulighet)`}</li>\n      <li parentName=\"ul\">{`Velg stilling (gjerne med søkemulighet)`}</li>\n    </ul>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}