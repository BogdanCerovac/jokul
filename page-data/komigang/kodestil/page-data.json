{"componentChunkName":"component---src-templates-doc-template-js","path":"/komigang/kodestil","result":{"data":{"markdownRemark":{"id":"0c8084e0-c0fd-572d-8c96-8e5ac5edb33a","rawMarkdownBody":"\n# Slik skriver du kode til Jøkul\n\nJøkul er et designsystem: Et bibliotek med komponenter. Det gir litt andre utfordringer enn når du driver med klientutvikling. Her får du en liten innføring i hvordan vi jobber med Jøkul. Jøkul blir brukt til å utvikle mange forskjellige løsninger, og må derfor dekke forskjellige behov og ønsker. Det er viktig at vi balanserer funksjonalitet, brukervennlighet, pakkestørrelse og kompleksitet i hver enkelt komponent.\n\n## Dette bruker vi\n\n-   Språk: [Typescript](https://www.typescriptlang.org/docs/home.html)\n-   JS-rammeverk: [React](https://reactjs.org/)\n-   Byggverktøy: [Rollup](https://rollupjs.org/guide/en/) og [Gulp](https://gulpjs.com/)\n-   Test runner: [Jest](https://jestjs.io/)\n-   Testrammeverk: [React Testing Library](https://testing-library.com/docs/react-testing-library/intro)\n-   CSS-preprosessor: [Sass](https://sass-lang.com/)\n\n## Slik setter du opp utviklingsmiljøet på din egen maskin\n1. Klon eller fork [Jøkul-biblioteket](https://github.com/fremtind/jokul) fra GitHub.\n2. Lag en ny branch og gi den et fornuftig navn etter hva du skal lage.\n3. Bygg prosjektet med kommandoene `yarn` og `yarn build` fra rot i prosjektet.\n\n## Slik har vi organisert pakkene\nAlle komponentene er organisert under `/packages`. De som slutter på `-react` er React-pakker. De som ikke har en endelse, er stilpakker. Stilpakkene skal være generelle og du kan bruke dem uten noe JavaScript-rammeverk. Hver enkelt pakke inneholder et eksempel, som du kan kan starte med `yarn dev` fra hver enkelt pakke. Noen av stilpakkene mangler eksempler, fordi det kreves en del JavaScript for å få eksempelet til å kjøre. `Select` og `Datepicker` er eksempler på dette.\n\n## Slik lager du en ny pakke\n1. Gå til rot og kjør kommandoen `lerna create <pakke-navn>`.\n2. Du får noen spørsmål om pakken. Fyll ut så godt du kan. Husk at navnet på pakken skal starte med `@fremtind/jkl-`.\n3. Når pakken er opprettet, finner du en pakke av typen du skal lage (stil eller React). Kopier de script- og oppsettfilene du trenger, for eksempel `tsconfig-for-declarations.json` for React-pakker eller `gulpfile.js` for stilpakker.\n\n## Slik lenker du pakker sammen\nHvis du vil legge til en pakke i en annen, kan du fra hvor som helst i prosjektet kjøre `lerna add <pakke-som-skal-legges-til> --scope=<pakken-den-skal-inn-i>`. For eksempel vil `lerna add @fremtind/jkl-core scope=@fremtind/jkl-button` legge til `jkl-core` som en avhengighet i `jkl-button`-pakken. Når du legger til avhengigheter på denne måten, kan Lerna bruke den lokale versjonen av `jkl-core` i stedet for å laste ned fra NPM, slik at du kan utvikle raskere. Dette fungerer bare for andre pakker i Jøkul.\n\n## Slik legger du til en avhengighet\nDet finnes avhengigheter på ulike nivåer i Jøkul. Globale avhengigheter, for eksempel de som trengs til å kjøre en byggejobb, ligger på rotnivå. Du kan legge til en ny pakke på rotnivå, med kommandoen `yarn add pakke -W`. For å legge til som en utviklingsavhengighet bruker du `-DW`.\n\nLokale avhengigheter, som trengs for at en pakke skal fungere i bruk, legger vi vanligvis på pakkenivå. Se \"Slik lenker du pakker sammen\". Bruk kommandoen `yarn add` for å legge til pakker som ikke er en del av Jøkul. Før du gjør det, er det lurt å tenke på om de skal sendes med komponenten eller om brukeren av komponenten har ansvaret for å ha avhengigheten i sitt prosjekt. React bør for eksempel være en `peerDependency`, slik at brukeren ikke ender opp med flere utgaver av React i sin pakke.\n","frontmatter":{"path":"/komigang/kodestil","title":"kodestil"}}},"pageContext":{}}}