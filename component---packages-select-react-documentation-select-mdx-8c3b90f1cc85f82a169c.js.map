{"version":3,"sources":["webpack:///../packages/select-react/src/useListNavigation.ts","webpack:///../packages/select-react/src/ExpandArrow.tsx","webpack:///../packages/select-react/src/Select.tsx","webpack:///../packages/select-react/src/NativeSelect.tsx","webpack:///../packages/select-react/documentation/Example.tsx","webpack:///../packages/select-react/documentation/Select.mdx"],"names":["handleMoveTo","direction","event","list","currentFocus","preventDefault","current","thisLI","parentElement","prevLI","previousElementSibling","prevItem","querySelector","focus","nextLI","nextElementSibling","nextItem","firstItem","listItems","querySelectorAll","length","moveFocusTo","handleListKeyNav","moveFunction","search","searchResetTimer","key","moveDetails","target","undefined","searchResult","keys","concat","timer","clearTimeout","setTimeout","resetWhenIdle","n","label","innerText","toLowerCase","indexOf","findItem","ExpandArrow","expanded","className","componentClassName","classNames","viewBox","fill","xmlns","d","toLower","str","replace","Select","id","items","value","onChange","onBlur","onFocus","helpLabel","errorLabel","searchable","inline","defaultPrompt","variant","forceCompact","inverted","width","selectProps","useState","searchValue","setSearchValue","hasSelectedValue","visibleItems","map","getValuePair","item","visible","selectedValueLabel","find","searchRef","useRef","componentRootElementRef","focusInsideRef","dropdownIsShown","setShown","listId","nanoid","listRef","typeAheadIsEnabled","useEffect","addEventListener","removeEventListener","useListNavigation","handleBlur","e","componentRootElement","contains","relatedTarget","handleFocus","elementRef","useAnimatedHeight","showSearchInputField","searchInputId","data-testid","style","ref","standAlone","htmlFor","srOnly","hidden","placeholder","type","aria-haspopup","role","popup","onToggle","opening","listElement","listEl","selected","focusedItem","focusSelected","onToggleSelect","detail","nextValue","button","aria-activedescendant","tabIndex","i","aria-selected","data-testautoid","NativeSelect","forwardRef","defaultValue","uid","disabled","Example","boolValues","choiceValues","C","setValue","searchAble","input","console","log","_frontmatter","makeShortcode","name","props","warn","Ingress","ComponentExample","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","component","knobs","boolProps","choiceProps","values","parentName","isMDXComponent"],"mappings":"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","file":"component---packages-select-react-documentation-select-mdx-8c3b90f1cc85f82a169c.js","sourcesContent":["import { useRef, useEffect, RefObject } from \"react\";\n\ntype Timer = NodeJS.Timeout | undefined;\ntype KeyBuffer = { keys: string } | undefined;\ntype Direction = \"prev\" | \"next\" | \"first\" | \"last\";\ninterface MoveDetails {\n    event: KeyboardEvent;\n    list: HTMLUListElement;\n    currentFocus: HTMLButtonElement;\n}\ninterface ListDetails {\n    list: HTMLUListElement;\n    search: KeyBuffer;\n    searchResetTimer: Timer;\n}\ninterface SearchDetails extends ListDetails {\n    key: string;\n}\ninterface EventDetails extends ListDetails {\n    event: KeyboardEvent;\n}\n\nexport function useListNavigation(typeAheadIsEnabled = true): RefObject<HTMLUListElement> {\n    const listRef = useRef<HTMLUListElement>(null);\n    let search: KeyBuffer;\n    let searchResetTimer: Timer;\n    if (typeAheadIsEnabled) {\n        search = { keys: \"\" }; // keypress buffer is object to preserve state\n    }\n    useEffect(() => {\n        const list = listRef.current;\n        if (list) {\n            list.addEventListener(\"keydown\", (event) => handleListKeyNav({ list, event, search, searchResetTimer }));\n        }\n        return () => {\n            if (list) {\n                list.removeEventListener(\"keydown\", (event) =>\n                    handleListKeyNav({ list, event, search, searchResetTimer }),\n                );\n            }\n        };\n    }, [search, searchResetTimer]);\n\n    return listRef;\n}\n\nfunction handleMoveTo(direction: Direction, { event, list, currentFocus }: MoveDetails) {\n    event.preventDefault();\n    moveFocusTo(direction, list, currentFocus);\n}\n\nfunction handleListKeyNav({ list, event, search, searchResetTimer }: EventDetails, moveFunction = handleMoveTo) {\n    const { key, target } = event;\n    const currentFocus = target as HTMLButtonElement;\n\n    const moveDetails = {\n        event,\n        list,\n        currentFocus,\n    };\n\n    switch (key) {\n        case \"ArrowUp\" || \"PageUp\":\n            moveFunction(\"prev\", moveDetails);\n            break;\n        case \"ArrowDown\" || \"PageDown\":\n            moveFunction(\"next\", moveDetails);\n            break;\n        case \"Home\":\n            moveFunction(\"first\", moveDetails);\n            break;\n        case \"End\":\n            moveFunction(\"last\", moveDetails);\n            break;\n        case \"Tab\":\n            // in a standard select, tab does nothing in-menu\n            event.preventDefault();\n            break;\n        case \"Enter\" || \" \":\n            break;\n\n        default:\n            if (search !== undefined) {\n                const searchResult = findItem({ list, key, search, searchResetTimer });\n                if (searchResult) {\n                    searchResult.focus();\n                }\n            }\n            break;\n    }\n}\n\nfunction moveFocusTo(direction: Direction, list: HTMLUListElement, current: HTMLButtonElement) {\n    const thisLI = current.parentElement;\n    switch (direction) {\n        case \"prev\":\n            const prevLI = thisLI && thisLI.previousElementSibling;\n            if (prevLI) {\n                const prevItem = prevLI.querySelector<HTMLButtonElement>(`[role=\"option\"]`);\n                if (prevItem) {\n                    prevItem.focus();\n                }\n            }\n            break;\n        case \"next\":\n            const nextLI = thisLI && thisLI.nextElementSibling;\n            if (nextLI) {\n                const nextItem = nextLI.querySelector<HTMLButtonElement>(`[role=\"option\"]`);\n                if (nextItem) {\n                    nextItem.focus();\n                }\n            }\n            break;\n        case \"first\":\n            const firstItem = list.querySelector<HTMLButtonElement>(`[role=\"option\"]`);\n            if (firstItem) {\n                firstItem.focus();\n            }\n            break;\n        case \"last\":\n            const listItems = list.querySelectorAll<HTMLButtonElement>(`[role=\"option\"]`);\n            if (listItems.length) {\n                listItems[listItems.length - 1].focus();\n            }\n            break;\n    }\n}\n\nfunction findItem({ list, key, search, searchResetTimer }: SearchDetails): HTMLButtonElement | null {\n    const listItems = list.querySelectorAll(`[role=\"option\"]`);\n    if (!listItems.length) return null;\n\n    if (search) {\n        search.keys = search.keys.concat(key);\n        resetWhenIdle(search, searchResetTimer);\n\n        for (let n = 0; n < listItems.length; n++) {\n            const label = (listItems[n] as HTMLButtonElement).innerText;\n            if (label && label.toLowerCase().indexOf(search.keys) === 0) {\n                return listItems[n] as HTMLButtonElement;\n            }\n        }\n    }\n\n    return null;\n}\n\nfunction resetWhenIdle(search: KeyBuffer, timer: Timer) {\n    if (timer) {\n        clearTimeout(timer);\n        timer = undefined;\n    }\n    timer = setTimeout(\n        () => {\n            search ? (search.keys = \"\") : (search = { keys: \"\" });\n            timer = undefined;\n        },\n        500,\n        search,\n        timer,\n    );\n}\n","import React from \"react\";\nimport classNames from \"classnames\";\n\ninterface Props {\n    className?: string;\n    expanded?: boolean;\n}\n\nexport function ExpandArrow({ expanded = false, className }: Props) {\n    const componentClassName = classNames(\n        {\n            \"jkl-expand-arrow\": true,\n            \"jkl-expand-arrow--expanded\": expanded,\n        },\n        className,\n    );\n    return (\n        <span className={componentClassName}>\n            <svg className=\"jkl-expand-arrow__down\" viewBox=\"0 0 13 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                <path\n                    d=\"M6.90762 13.8828L11.9272 8.86326L12.7093 9.64537L6.35463 16L-1.68645e-06 9.64536L0.782101 8.86326L5.80156 13.8827L5.80156 1.01438e-06L6.90762 1.20777e-06L6.90762 13.8828Z\"\n                    fill=\"currentColor\"\n                />\n            </svg>\n            <svg className=\"jkl-expand-arrow__up\" viewBox=\"0 0 13 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                <path\n                    d=\"M5.80163 2.1172L0.78209 7.13674L-1.29938e-05 6.35464L6.35462 5.14415e-08L12.7093 6.35464L11.9272 7.13674L6.90769 2.11728L6.9077 16L5.80163 16L5.80163 2.1172Z\"\n                    fill=\"currentColor\"\n                />\n            </svg>\n        </span>\n    );\n}\n","// @ts-ignore: wait for core-components to expose types\nimport CoreToggle from \"@nrk/core-toggle/jsx\";\nimport React, { FocusEvent, useRef, useState } from \"react\";\nimport { nanoid } from \"nanoid\";\nimport { Label, LabelVariant, SupportLabel, ValuePair, getValuePair, DataTestAutoId } from \"@fremtind/jkl-core\";\nimport { useAnimatedHeight } from \"@fremtind/jkl-react-hooks\";\nimport { useListNavigation } from \"./useListNavigation\";\nimport classNames from \"classnames\";\n\nimport { ExpandArrow } from \"./ExpandArrow\";\n\ntype SelectEventHandler = (value?: string) => void;\n\ninterface Props extends DataTestAutoId {\n    id?: string;\n    label: string;\n    items: Array<string | ValuePair>;\n    inline?: boolean;\n    defaultPrompt?: string;\n    className?: string;\n    value?: string;\n    helpLabel?: string;\n    errorLabel?: string;\n    variant?: LabelVariant;\n    searchable?: boolean;\n    forceCompact?: boolean;\n    inverted?: boolean;\n    width?: string;\n    onChange?: SelectEventHandler;\n    onBlur?: SelectEventHandler;\n    onFocus?: SelectEventHandler;\n}\n\ninterface CoreToggleSelectEvent {\n    detail: { textContent: string; value: string };\n    target: { hidden: boolean; button: HTMLButtonElement; value: { textContent: string } };\n}\n\nfunction toLower(str = \"\") {\n    return str.toLowerCase().replace(/[\\W_]+/g, \"\"); // strip all non-alphanumeric chars\n}\n\nfunction focusSelected(listEl: HTMLElement, listId: string, selected: string | undefined) {\n    let focusedItem: HTMLElement | null;\n    if (selected !== undefined) {\n        // move focus to selected option\n        focusedItem = listEl.querySelector(`#${listId}__${toLower(selected)}`);\n    } else {\n        // move focus to first option\n        focusedItem = listEl.querySelector('[role=\"option\"]');\n    }\n    focusedItem && focusedItem.focus();\n}\n\nexport function Select({\n    id,\n    items,\n    value,\n    label,\n    onChange,\n    onBlur,\n    onFocus,\n    className,\n    helpLabel,\n    errorLabel,\n    searchable = false,\n    inline = false,\n    defaultPrompt = \"Velg\",\n    variant,\n    forceCompact,\n    inverted,\n    width,\n    ...selectProps\n}: Props) {\n    const [searchValue, setSearchValue] = useState(\"\");\n    const hasSelectedValue = typeof value !== \"undefined\" && value !== \"\";\n\n    const visibleItems = items.map(getValuePair).map((item) => {\n        const visible =\n            !searchable || searchValue === \"\" || item.label.toLowerCase().indexOf(searchValue.toLowerCase()) > -1;\n        return { ...item, visible };\n    });\n    const selectedValueLabel = visibleItems.find((item) => item.value === value)?.label || defaultPrompt;\n\n    const searchRef = useRef<HTMLInputElement>(null);\n    const componentRootElementRef = useRef<HTMLDivElement>(null);\n    const focusInsideRef = useRef(false);\n    const [dropdownIsShown, setShown] = useState(false);\n    const [listId] = useState(id || `jkl-select-${nanoid(8)}`);\n    const listRef = useListNavigation();\n    const componentClassName = classNames(\"jkl-select\", className, {\n        \"jkl-select--inline\": inline,\n        \"jkl-select--compact\": forceCompact,\n        \"jkl-select--inverted\": inverted,\n        \"jkl-select--open\": dropdownIsShown,\n        \"jkl-select--no-value\": !hasSelectedValue,\n        \"jkl-select--invalid\": !!errorLabel,\n    });\n\n    function onToggle() {\n        const opening = !dropdownIsShown;\n        setShown(!dropdownIsShown);\n        if (opening && !searchable) {\n            const listElement = listRef.current;\n            listElement && focusSelected(listElement, listId, value);\n        } else if (opening) {\n            if (searchRef.current) {\n                searchRef.current.focus();\n            }\n        }\n    }\n\n    function onToggleSelect(e: CoreToggleSelectEvent) {\n        e.target.value = e.detail;\n        const nextValue = e.detail.value;\n        setSearchValue(\"\");\n        onChange && onChange(nextValue);\n        e.target.hidden = true;\n        e.target.button.focus();\n    }\n\n    function handleBlur(e: FocusEvent<HTMLButtonElement | HTMLInputElement>) {\n        const componentRootElement = componentRootElementRef.current;\n        // There are known issues in Firefox when using \"relatedTarget\" in onBlur events:\n        // https://github.com/facebook/react/issues/2011\n        // This might be fixed in react 17. Se issue above.\n        const nextFocusIsInsideComponent =\n            componentRootElement && componentRootElement.contains(e.relatedTarget as Node);\n        if (!nextFocusIsInsideComponent && onBlur) {\n            onBlur(value);\n            focusInsideRef.current = false;\n        }\n    }\n\n    function handleFocus() {\n        if (onFocus && !focusInsideRef.current) {\n            onFocus(value);\n            focusInsideRef.current = true;\n        }\n    }\n\n    const [elementRef] = useAnimatedHeight(dropdownIsShown);\n    const showSearchInputField = searchable && dropdownIsShown;\n    const searchInputId = `${listId}_search-input`;\n    return (\n        <div\n            data-testid=\"jkl-select\"\n            className={componentClassName}\n            style={{ width }}\n            ref={componentRootElementRef}\n            {...selectProps}\n        >\n            <Label\n                standAlone={searchable} // Use <label> as the element when searchAble=true for accessibility\n                htmlFor={searchable ? searchInputId : undefined}\n                variant={variant}\n                forceCompact={forceCompact}\n                srOnly={inline}\n            >\n                {label}\n            </Label>\n            <div className=\"jkl-select__outer-wrapper\">\n                {searchable && (\n                    <input\n                        id={searchInputId}\n                        hidden={!showSearchInputField}\n                        ref={searchRef}\n                        placeholder=\"Søk\"\n                        value={searchValue}\n                        onChange={(e) => setSearchValue(e.target.value)}\n                        className=\"jkl-select__search-input\"\n                        onBlur={handleBlur}\n                        onFocus={handleFocus}\n                    />\n                )}\n                <button\n                    hidden={showSearchInputField}\n                    type=\"button\"\n                    className=\"jkl-select__button\"\n                    data-testid=\"jkl-select__button\"\n                    aria-haspopup=\"listbox\"\n                    onBlur={handleBlur}\n                    onFocus={handleFocus}\n                >\n                    {selectedValueLabel}\n                </button>\n                <CoreToggle\n                    id={listId}\n                    ref={elementRef}\n                    role=\"listbox\"\n                    className=\"jkl-select__options-menu\"\n                    popup={label}\n                    hidden={!dropdownIsShown}\n                    onToggle={onToggle}\n                    onToggleSelect={onToggleSelect}\n                    aria-activedescendant={hasSelectedValue && `${listId}__${toLower(value)}`}\n                >\n                    <ul\n                        className=\"jkl-select__option-wrapper\"\n                        data-testid=\"jkl-select__option-wrapper\"\n                        tabIndex={-1}\n                        ref={listRef}\n                    >\n                        {visibleItems.map((item, i) => (\n                            <li key={item.value} hidden={!item.visible}>\n                                <button\n                                    type=\"button\"\n                                    id={`${listId}__${toLower(item.value)}`}\n                                    className=\"jkl-select__option\"\n                                    data-testid=\"jkl-select__option\"\n                                    aria-selected={item.value === value}\n                                    role=\"option\"\n                                    value={item.value}\n                                    data-testautoid={`jkl-select__option-${i}`}\n                                    onBlur={handleBlur}\n                                    onFocus={handleFocus}\n                                >\n                                    {item.label}\n                                </button>\n                            </li>\n                        ))}\n                    </ul>\n                </CoreToggle>\n                <ExpandArrow className=\"jkl-select__arrow\" expanded={dropdownIsShown} />\n            </div>\n            <SupportLabel\n                inverted={inverted}\n                helpLabel={helpLabel}\n                errorLabel={errorLabel}\n                forceCompact={forceCompact}\n            />\n        </div>\n    );\n}\n","/* eslint \"jsx-a11y/no-onchange\": 0 */\n\nimport React, { FocusEventHandler, ChangeEventHandler, useState, forwardRef } from \"react\";\nimport { nanoid } from \"nanoid\";\nimport { Label, LabelVariant, SupportLabel, ValuePair, getValuePair } from \"@fremtind/jkl-core\";\nimport classNames from \"classnames\";\n\nimport { ExpandArrow } from \"./ExpandArrow\";\n\ninterface Props {\n    id?: string;\n    label: string;\n    items: Array<string | ValuePair>;\n    className?: string;\n    inline?: boolean;\n    helpLabel?: string;\n    errorLabel?: string;\n    variant?: LabelVariant;\n    placeholder?: string;\n    value?: string;\n    forceCompact?: boolean;\n    inverted?: boolean;\n    onChange?: ChangeEventHandler<HTMLSelectElement>;\n    onFocus?: FocusEventHandler<HTMLSelectElement>;\n    onBlur?: FocusEventHandler<HTMLSelectElement>;\n}\n\nexport const NativeSelect = forwardRef<HTMLSelectElement, Props>(\n    (\n        {\n            id,\n            label,\n            items,\n            className = \"\",\n            inline = false,\n            helpLabel,\n            errorLabel,\n            variant,\n            placeholder,\n            value,\n            forceCompact,\n            inverted,\n            onChange,\n            onBlur,\n            onFocus,\n        },\n        ref,\n    ) => {\n        // If no value is given, set it to first item, or to empty string if there is a placeholder\n        if (!value) {\n            if (!placeholder && items.length) {\n                value = getValuePair(items[0]).value;\n            }\n        }\n\n        const componentClassName = classNames(\"jkl-select\", className, {\n            \"jkl-select--inline\": inline,\n            \"jkl-select--compact\": forceCompact,\n            \"jkl-select--inverted\": inverted,\n            \"jkl-select--invalid\": !!errorLabel,\n        });\n\n        const defaultValue = value ? undefined : \"\";\n\n        const [uid] = useState(id || `jkl-select-${nanoid(8)}`);\n\n        return (\n            <div data-testid=\"jkl-select\" className={componentClassName}>\n                <Label standAlone htmlFor={uid} variant={variant} forceCompact={forceCompact}>\n                    {label}\n                </Label>\n                <div className=\"jkl-select__outer-wrapper\">\n                    <select\n                        ref={ref}\n                        id={uid}\n                        value={value}\n                        defaultValue={defaultValue}\n                        className=\"jkl-select__button\"\n                        onChange={onChange}\n                        onBlur={onBlur || onChange}\n                        onFocus={onFocus}\n                    >\n                        {placeholder && !value && (\n                            <option disabled value=\"\">\n                                {placeholder}\n                            </option>\n                        )}\n                        {items.map(getValuePair).map((item) => (\n                            <option\n                                data-testid=\"jkl-select__option\"\n                                className=\"jkl-select__option\"\n                                key={item.value}\n                                value={item.value}\n                            >\n                                {item.label}\n                            </option>\n                        ))}\n                    </select>\n                    <ExpandArrow className=\"jkl-select__arrow\" />\n                </div>\n                <SupportLabel helpLabel={helpLabel} errorLabel={errorLabel} forceCompact={forceCompact} />\n            </div>\n        );\n    },\n);\n","import React, { FocusEvent, useState, ChangeEvent } from \"react\";\nimport { ExampleComponentProps } from \"@fremtind/jkl-portal-components\";\nimport { Select, NativeSelect } from \"../src\";\nimport { LabelVariant } from \"@fremtind/jkl-core\";\n\nexport const Example = ({ boolValues, choiceValues }: ExampleComponentProps) => {\n    const C = boolValues && boolValues[\"Native\"] ? NativeSelect : Select;\n\n    const values = [\n        { value: \"apple\", label: \"Apple\" },\n        { value: \"samsung\", label: \"Samsung\" },\n        { value: \"huawei\", label: \"Huawei\" },\n        { value: \"LG\", label: \"LG\" },\n    ];\n    const [value, setValue] = useState<string>();\n    const universalSetValue = (input: string | ChangeEvent<HTMLSelectElement> | undefined) => {\n        if (typeof input === \"string\") {\n            setValue(input);\n        } else if (input) {\n            setValue(input.target.value);\n        }\n    };\n\n    const onFocus = (input: string | FocusEvent<HTMLSelectElement> | undefined) => {\n        console.log(\"Focus: \", input);\n    };\n    const onBlur = (input: string | FocusEvent<HTMLSelectElement> | undefined) => {\n        console.log(\"Blur: \", input);\n    };\n\n    const errorLabel = boolValues && boolValues[\"Med feil\"] ? \"Beskrivende feilmelding\" : undefined;\n    const helpLabel = boolValues && boolValues[\"Med hjelpetekst\"] ? \"Hjelpsom beskjed\" : undefined;\n    const variant = choiceValues && (choiceValues[\"Etikettvariant\"] as LabelVariant);\n    const searchAble = boolValues && boolValues[\"Med søk\"];\n    return (\n        <C\n            forceCompact={boolValues && boolValues[\"Kompakt\"]}\n            inverted={boolValues && boolValues[\"Invertert\"]}\n            variant={variant}\n            label=\"Hvilket merke er telefonen?\"\n            items={values}\n            value={value}\n            helpLabel={helpLabel}\n            errorLabel={errorLabel}\n            onChange={universalSetValue}\n            searchable={searchAble}\n            onBlur={onBlur}\n            onFocus={onFocus}\n        />\n    );\n};\n\nexport default Example;\n","import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/jokul/jokul/portal/src/components/Layout/DocPageLayout.tsx\";\nimport { Example } from \"./Example\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst Ingress = makeShortcode(\"Ingress\");\nconst ComponentExample = makeShortcode(\"ComponentExample\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <Ingress mdxType=\"Ingress\">\n    Vi bruker nedtrekkslister til å gi brukeren en liste med alternativ. Nedtrekkslister passer i de tilfellene det er\n    for mange valg til å bruke radioknapper. Nedtrekkslisten må ha en overskrift, som forteller hva det er brukerne kan\n    velge mellom i listen.\n    </Ingress>\n    <ComponentExample component={Example} knobs={{\n      boolProps: [\"Native\", \"Kompakt\", \"Invertert\", \"Med hjelpetekst\", \"Med feil\", \"Med søk\"],\n      choiceProps: [{\n        name: \"Etikettvariant\",\n        values: [\"small\", \"medium\", \"large\"],\n        defaultValue: 1\n      }]\n    }} mdxType=\"ComponentExample\" />\n    <p>{`Hvis du trenger en nedtrekksliste med mange valg, kan du også legge inn en søke- eller filtreringsfunksjon.`}</p>\n    <h2>{`Tekst og validering`}</h2>\n    <p>{`Bruk prinsippene for skjemadesign til å velge størrelse på overskriften til listen. Lag en kort og tydelig tekst, som forteller hva det er brukeren skal gjøre i nedtrekkslisten. Eksempel: `}<em parentName=\"p\">{`Velg land`}</em>{`. Hvis det trengs, kan du legge en hjelpetekst under listen for å forklare mer.`}</p>\n    <p>{`Hvis nedtrekkslisten ikke validerer, viser systemet en feilmelding som forklarer hva som er galt. Feilmeldingen erstatter en eventuell hjelpetekst, så den må eventuelt gjenta informasjonen fra hjelpeteksten.`}</p>\n    <p>{`Eksempel:\n`}<strong parentName=\"p\">{`Hjelpetekst`}</strong>{`: `}<em parentName=\"p\">{`Velg landet du var på ferie i da du ble syk`}</em>{`. `}<strong parentName=\"p\">{`Feilmelding`}</strong>{`: `}<em parentName=\"p\">{`Du må velge hvor du var på ferie`}</em>{`.`}</p>\n    <h2>{`Bruk`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`Velg årsak eller skadetype (gjerne mange valg)`}</li>\n      <li parentName=\"ul\">{`Velg diagnose (for dyre- eller helseforsikring, gjerne med søkemulighet)`}</li>\n      <li parentName=\"ul\">{`Velg stilling (gjerne med søkemulighet)`}</li>\n    </ul>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}