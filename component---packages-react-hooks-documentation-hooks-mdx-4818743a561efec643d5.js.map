{"version":3,"sources":["webpack:///../packages/react-hooks/src/animation.tsx","webpack:///../packages/react-hooks/documentation/Example.tsx","webpack:///../packages/react-hooks/documentation/hooks.mdx"],"names":["getElement","elementRef","current","el","Example","useState","isOpen","setIsOpen","ref","raf1","raf2","useRef","isFirstRender","setIsFirstRender","heightTransitioned","element","removeAttribute","runAnimation","style","display","overflow","height","scrollHeight","requestAnimationFrame","useLayoutEffect","useEffect","addEventListener","removeEventListener","cancelAnimationFrame","useAnimatedHeight","className","onClick","_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","isMDXComponent"],"mappings":"sOAqEA,SAASA,EAAWC,GAGhB,OAAOA,EAAWC,UAAYD,EAAWC,QAAQC,IAAMF,EAAWC,S,oBClEtE,IAiBeE,EAjBC,WAAM,MACUC,qBAArBC,EADW,KACHC,EADG,KAEXC,EDFJ,SAAkDF,GACrD,IAAIG,EACAC,EACET,EAAaU,iBAAU,MAH+D,EAIlDN,oBAAS,GAA5CO,EAJqF,KAItEC,EAJsE,KAM5F,SAASC,IACL,IAAMC,EAAUf,EAAWC,GACvBc,GACAA,EAAQC,gBAAgB,SAIhC,SAASC,IACL,IAAMF,EAAUf,EAAWC,GACvBc,IACAA,EAAQG,MAAMC,QAAU,QACxBJ,EAAQG,MAAME,SAAW,SACrBd,GACAS,EAAQG,MAAMG,OAAS,IACvBN,EAAQG,MAAMG,OAAYN,EAAQO,aAAlC,OAEAP,EAAQG,MAAMG,OAAYN,EAAQO,aAAlC,KAEAb,EAAOc,uBAAsB,WACzBb,EAAOa,uBAAsB,WACzBR,EAAQG,MAAMG,OAAY,cAkC9C,OA3BAG,2BAAgB,WACPZ,GACDK,MAEL,CAACX,IAEJmB,qBAAU,WACN,IAAMV,EAAUf,EAAWC,GAK3B,OAJIc,GACAA,EAAQW,iBAAiB,gBAAiBZ,GAGvC,WACCC,GACAA,EAAQY,oBAAoB,gBAAiBb,MAGtD,CAACR,IAEJmB,qBAAU,WAEN,OADAZ,GAAiB,GACV,WACHe,qBAAqBnB,GACrBmB,qBAAqBlB,MAE1B,IAEI,CAACT,EAAYgB,GC1DNY,CAAkCvB,GAF9B,GAGlB,OACI,6BAASwB,UAAU,4CACf,4BAAQC,QAAS,kBAAMxB,GAAWD,KAAlC,sBACA,yBAAKwB,UAAS,uBAAwBxB,EAAS,GAAK,8BAAgCE,IAAKA,GACrF,yBAAKsB,UAAS,cAAd,8O,qFCNT,IAAME,EAAe,GAOtBC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,iBAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAI5E,YAAC,EAAD,CAASA,QAAQ,aAKrBH,EAAWI,gBAAiB","file":"component---packages-react-hooks-documentation-hooks-mdx-4818743a561efec643d5.js","sourcesContent":["import { MutableRefObject, Ref, useEffect, useLayoutEffect, useRef, useState } from \"react\";\n\ninterface HTMLElementOrCoreToggleElement<T extends HTMLElementOrCoreToggleElement<T>> extends HTMLElement {\n    el?: T; // Hack and workaround until https://github.com/nrkno/custom-element-to-react/pull/17 has landed\n}\n\nexport function useAnimatedHeight<T extends HTMLElement>(isOpen: boolean): [Ref<T>, () => void] {\n    let raf1: number;\n    let raf2: number;\n    const elementRef = useRef<T>(null);\n    const [isFirstRender, setIsFirstRender] = useState(true);\n\n    function heightTransitioned() {\n        const element = getElement(elementRef);\n        if (element) {\n            element.removeAttribute(\"style\");\n        }\n    }\n\n    function runAnimation() {\n        const element = getElement(elementRef);\n        if (element) {\n            element.style.display = \"block\";\n            element.style.overflow = \"hidden\";\n            if (isOpen) {\n                element.style.height = \"0\";\n                element.style.height = `${element.scrollHeight}px`;\n            } else {\n                element.style.height = `${element.scrollHeight}px`;\n\n                raf1 = requestAnimationFrame(() => {\n                    raf2 = requestAnimationFrame(() => {\n                        element.style.height = `${0}px`;\n                    });\n                });\n            }\n        }\n    }\n\n    useLayoutEffect(() => {\n        if (!isFirstRender) {\n            runAnimation();\n        }\n    }, [isOpen]);\n\n    useEffect(() => {\n        const element = getElement(elementRef);\n        if (element) {\n            element.addEventListener(\"transitionend\", heightTransitioned);\n        }\n\n        return () => {\n            if (element) {\n                element.removeEventListener(\"transitionend\", heightTransitioned);\n            }\n        };\n    }, [isOpen]);\n\n    useEffect(() => {\n        setIsFirstRender(false);\n        return () => {\n            cancelAnimationFrame(raf1);\n            cancelAnimationFrame(raf2);\n        };\n    }, []);\n\n    return [elementRef, runAnimation];\n}\n\nfunction getElement(elementRef: MutableRefObject<HTMLElementOrCoreToggleElement<HTMLElement> | null>) {\n    // Workaround to handle custom elements from NRK Core components until this lands:\n    // https://github.com/nrkno/custom-element-to-react/pull/17\n    return elementRef.current && (elementRef.current.el || elementRef.current);\n}\n","import React, { useState } from \"react\";\nimport \"@fremtind/jkl-button/button.css\";\nimport \"@fremtind/jkl-core/core.min.css\";\nimport \"./index.scss\";\nimport { useAnimatedHeight } from \"../src\";\n\nconst Example = () => {\n    const [isOpen, setIsOpen] = useState();\n    const [ref] = useAnimatedHeight<HTMLDivElement>(isOpen);\n    return (\n        <section className=\"jkl-spacing--top-3 jkl-spacing--bottom-3\">\n            <button onClick={() => setIsOpen(!isOpen)}> Open lorem ipsum </button>\n            <div className={`lorem-text-wrapper ${isOpen ? \"\" : \"lorem-text-wrapper--hidden\"}`} ref={ref}>\n                <div className={`lorem-text`}>\n                    Lorem ipsum dolor sit amet, consectetur adipisicing elit. Adipisci amet, aperiam asperiores aut\n                    beatae consequuntur cumque delectus dolore doloremque ea fugit inventore ipsam libero magnam\n                    officiis optio soluta veniam voluptatibus!\n                </div>\n            </div>\n        </section>\n    );\n};\n\nexport default Example;\n","import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/jokul/jokul/portal/src/components/Layout/ComponentLayout.tsx\";\nimport Example from \"./Example\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <Example mdxType=\"Example\" />\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}