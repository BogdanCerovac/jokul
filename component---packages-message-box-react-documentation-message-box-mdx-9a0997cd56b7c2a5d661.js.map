{"version":3,"sources":["webpack:///../packages/message-box-react/src/MessageBox.tsx","webpack:///../packages/message-box-react/documentation/Example.tsx","webpack:///../packages/message-box-react/documentation/MessageBox.mdx"],"names":["messageFactory","messageType","title","fullWidth","className","children","componentClassName","concat","InfoMessage","ErrorMessage","WarningMessage","SuccessMessage","Example","types","label","component","useState","selectedType","setSelectedType","C","value","onChange","e","parseInt","target","map","type","i","key","_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"0NAWA,SAASA,EAAeC,GACpB,OAAO,YAA2E,IAArDC,EAAqD,EAArDA,MAAOC,EAA8C,EAA9CA,UAA8C,IAAnCC,iBAAmC,MAAvB,GAAuB,EAAnBC,EAAmB,EAAnBA,SACrDC,EAAqB,kBAAkBC,OAAlB,qBACFN,EACrBE,EAAY,yBAA2B,GACvCC,EAAY,IAAIA,EAAc,IAElC,OACI,2BAAOA,UAAWE,GACd,yBAAKF,UAAU,iCAAiCF,GAChD,yBAAKE,UAAU,qCAAqCC,KAM7D,IAAMG,EAAcR,EAAe,QAC7BS,EAAeT,EAAe,SAC9BU,EAAiBV,EAAe,WAChCW,EAAiBX,EAAe,WCS9BY,EAlCC,WACZ,IAAMC,EAAQ,CACV,CAAEC,MAAO,oBAAqBC,UAAWP,GACzC,CAAEM,MAAO,uBAAwBC,UAAWL,GAC5C,CAAEI,MAAO,qBAAsBC,UAAWN,GAC1C,CAAEK,MAAO,yBAA0BC,UAAWJ,IALhC,EAOsBK,mBAAS,GAA1CC,EAPW,KAOGC,EAPH,KASZC,EAAIN,EAAMI,GAAcF,UAC9B,OACI,6BAASX,UAAU,4CACf,2BAAOA,UAAU,yBAAjB,qBAGI,4BAAQgB,MAAOH,EAAcI,SAPpB,SAACC,GAAD,OAAuCJ,EAAgBK,SAASD,EAAEE,OAAOJ,UAQ7EP,EAAMY,KAAI,SAACC,EAAMC,GAAP,OACP,4BAAQC,IAAKF,EAAKZ,MAAOM,MAAOO,GAC3BD,EAAKZ,YAMtB,kBAACK,EAAD,CAAGf,UAAU,wBAAwBF,MAAOW,EAAMI,GAAcH,OAAhE,wFAGA,kBAACK,EAAD,CAAGf,UAAU,wBAAwBD,WAAS,EAACD,MAAUW,EAAMI,GAAcH,MAAzB,cAApD,0F,qFCzBL,IAAMe,EAAe,GAOtBC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,iBAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAI5E,YAAC,EAAD,CAASA,QAAQ,YACjB,gQACA,uCACA,yFACA,qBAAG,sBAAQC,WAAW,KAAnB,QAAH,kCACA,qBAAG,sBAAQA,WAAW,KAAnB,QAAH,gGACA,qBAAG,sBAAQA,WAAW,KAAnB,QAAH,kHACA,qBAAG,sBAAQA,WAAW,KAAnB,UAAH,4CACA,yCACA,mPAKJJ,EAAWK,gBAAiB","file":"component---packages-message-box-react-documentation-message-box-mdx-9a0997cd56b7c2a5d661.js","sourcesContent":["import React, { ReactNode } from \"react\";\n\ninterface Props {\n    title: string;\n    children: ReactNode;\n    fullWidth?: boolean;\n    className?: string;\n}\n\ntype messageTypes = \"info\" | \"error\" | \"success\" | \"warning\";\n\nfunction messageFactory(messageType: messageTypes) {\n    return function messageBox({ title, fullWidth, className = \"\", children }: Props) {\n        const componentClassName = \"jkl-message-box\".concat(\n            ` jkl-message-box--${messageType}`,\n            fullWidth ? ` jkl-message-box--full` : \"\",\n            className ? ` ${className}` : \"\",\n        );\n        return (\n            <aside className={componentClassName}>\n                <div className=\"jkl-message-box__title jkl-h4\">{title}</div>\n                <div className=\"jkl-message-box__message jkl-body\">{children}</div>\n            </aside>\n        );\n    };\n}\n\nexport const InfoMessage = messageFactory(\"info\");\nexport const ErrorMessage = messageFactory(\"error\");\nexport const WarningMessage = messageFactory(\"warning\");\nexport const SuccessMessage = messageFactory(\"success\");\n","import React, { useState, ChangeEvent } from \"react\";\nimport \"@fremtind/jkl-core/core.css\";\nimport \"@fremtind/jkl-message-box/message-box.scss\";\nimport { ErrorMessage, InfoMessage, SuccessMessage, WarningMessage } from \"../src\";\n\nconst Example = () => {\n    const types = [\n        { label: \"InfoMessage (blå)\", component: InfoMessage },\n        { label: \"WarningMessage (gul)\", component: WarningMessage },\n        { label: \"ErrorMessage (rød)\", component: ErrorMessage },\n        { label: \"SuccessMessage (grønn)\", component: SuccessMessage },\n    ];\n    const [selectedType, setSelectedType] = useState(0);\n    const handleChange = (e: ChangeEvent<HTMLSelectElement>) => setSelectedType(parseInt(e.target.value));\n    const C = types[selectedType].component;\n    return (\n        <section className=\"jkl-spacing--top-3 jkl-spacing--bottom-3\">\n            <label className=\"jkl-spacing--bottom-1\">\n                Velg type melding:\n                {/* eslint-disable jsx-a11y/no-onchange */}\n                <select value={selectedType} onChange={handleChange}>\n                    {types.map((type, i) => (\n                        <option key={type.label} value={i}>\n                            {type.label}\n                        </option>\n                    ))}\n                </select>\n                {/* eslint-enable jsx-a11y/no-onchange */}\n            </label>\n            <C className=\"jkl-spacing--bottom-2\" title={types[selectedType].label}>\n                Cupidatat Lorem incididunt incididunt in non mollit cillum Lorem eiusmod sunt magna.\n            </C>\n            <C className=\"jkl-spacing--bottom-2\" fullWidth title={`${types[selectedType].label} fullWidth`}>\n                Cupidatat Lorem incididunt incididunt in non mollit cillum Lorem eiusmod sunt magna.\n            </C>\n        </section>\n    );\n};\n\nexport default Example;\n","import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/jokul/jokul/portal/src/components/Layout/ComponentLayout.tsx\";\nimport Example from \"./Example\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <Example mdxType=\"Example\" />\n    <p>{`En melding er en beskjed til brukeren. Det kan være et varsel om at noe er feil, informasjon om at noe mangler i et skjema, eller en bekreftelse på at noe har blitt oppdatert. Meldingene består av en overskrift og en meldingstekst.`}</p>\n    <h2>{`Meldingstyper`}</h2>\n    <p>{`Vi har fire ulike meldinger, med fargene blå, rød, gul og grønn.`}</p>\n    <p><strong parentName=\"p\">{`Blå:`}</strong>{` gir informasjon til brukeren.`}</p>\n    <p><strong parentName=\"p\">{`Gul:`}</strong>{` gir brukeren en advarsel, for eksempel at en funksjonalitet er i beta og derfor er ustabil.`}</p>\n    <p><strong parentName=\"p\">{`Rød:`}</strong>{` gir brukeren en feilmelding, for eksempel hvis det oppstår en systemfeil eller brukeren avbryter en handling.`}</p>\n    <p><strong parentName=\"p\">{`Grønn:`}</strong>{` forteller at en handling var vellykket.`}</p>\n    <h3>{`Tilgjengelighet`}</h3>\n    <p>{`Når vi bruker meldinger med farge, må vi alltid huske å ha en god og beskrivende overskrift, siden farge ikke er et godt nok kjennetegn for alle brukere. Skriv en presis meldingstekst, der du sier det viktigste først.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}