{"version":3,"sources":["webpack:///../packages/text-input-react/documentation/AutosuggestExample.tsx","webpack:///../packages/text-input-react/documentation/Autosuggest.mdx","webpack:///../packages/text-input-react/src/TextArea.tsx","webpack:///../packages/text-input-react/src/BaseInputField.tsx","webpack:///../packages/text-input-react/src/TextInput.tsx","webpack:///../packages/text-input-react/src/autosuggest/ControllerButton.tsx","webpack:///../packages/text-input-react/src/autosuggest/Menu.tsx","webpack:///../packages/text-input-react/src/autosuggest/BaseAutosuggest.tsx","webpack:///../packages/text-input-react/src/autosuggest/Autosuggest.tsx","webpack:///../packages/text-input-react/src/autosuggest/utils.ts"],"names":["AutosuggestExample","boolValues","choiceValues","useState","value","setValue","value2","setValue2","filteredItems","filter","item","toLowerCase","includes","style","maxWidth","width","label","onChange","nextCountry","onConfirm","console","log","allItems","helpLabel","Hjelpetekst","undefined","errorLabel","Feiltekst","leadText","Leadtekst","placeholder","Placeholder","showDropdownControllerButton","noHitsMessage","maxNumberOfHits","variant","Variant","inverted","Invertert","className","onInputValueChange","_frontmatter","makeShortcode","name","props","warn","Ingress","Experimental","ComponentExample","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","href","component","knobs","boolProps","choiceProps","values","defaultValue","isMDXComponent","TextArea","forwardRef","ref","id","rows","autoExpand","forceCompact","restProps","componentClassName","classNames","uid","nanoid","supportId","textAreaFocused","setTextAreaFocused","baseScrollHeight","setBaseScrollHeight","currentRows","setCurrentRows","internalRef","useRef","textAreaRef","useEffect","textAreaElement","current","savedValue","savedPlaceholder","savedRows","scrollHeight","minimumRows","calculatedRows","lineHeightWithPx","window","getComputedStyle","lineHeight","parseInt","replace","Math","ceil","calculateRows","max","data-testid","standAlone","htmlFor","onFocus","e","onBlur","aria-invalid","aria-describedby","height","overflowX","displayName","getWidthAsStyle","maxLength","min","BaseInputField","describedBy","invalid","type","rest","TextInput","inline","action","inputProps","srOnly","iconType","icon","buttonTitle","onClick","ControllerButton","isOpen","hasSelectedItem","clearSelection","aria-label","pointingDown","Menu","downshiftProps","getMenuProps","getItemProps","highlightedIndex","items","itemToString","Infinity","visibleItems","length","slice","position","map","index","key","BaseAutosuggest","inputId","labelId","customLabelProps","getInputProps","getToggleButtonProps","getLabelProps","selectedItem","onKeyDown","keyCode","Autosuggest","onStateChange","hits","setHits","changes","inputValue","keys","options","matchSorter"],"mappings":"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","file":"component---packages-text-input-react-documentation-autosuggest-mdx-90e9a53dd8b38ca4f6d4.js","sourcesContent":["import React, { useState } from \"react\";\nimport { ExampleComponentProps } from \"@fremtind/jkl-portal-components\";\nimport { Autosuggest } from \"../src\";\n\nexport const AutosuggestExample: React.FC<ExampleComponentProps> = ({ boolValues, choiceValues }) => {\n    const [value, setValue] = useState(\"\");\n    const [value2, setValue2] = useState(\"\");\n\n    const allItems = [\n        \"Afghanistan\",\n        \"Aland Islands\",\n        \"Algeria\",\n        \"Australia\",\n        \"Austria\",\n        \"Bahrain\",\n        \"Bangladesh\",\n        \"Benin\",\n        \"Bermuda\",\n        \"Bhutan\",\n    ];\n\n    const filteredItems = allItems.filter((item) => item.toLowerCase().includes(value2.toLowerCase()));\n\n    return (\n        <div style={{ maxWidth: \"400px\", width: \"100%\" }}>\n            <Autosuggest\n                label=\"Velg land\"\n                onChange={(nextCountry) => setValue(nextCountry)}\n                value={value}\n                onConfirm={() => console.log(\"onConfirm\")}\n                allItems={[\n                    \"Afghanistan\",\n                    \"Aland Islands\",\n                    \"Algeria\",\n                    \"Australia\",\n                    \"Austria\",\n                    \"Bahrain\",\n                    \"Bangladesh\",\n                    \"Benin\",\n                    \"Bermuda\",\n                    \"Bhutan\",\n                ]}\n                helpLabel={boolValues?.Hjelpetekst ? \"Velg et land\" : undefined}\n                errorLabel={boolValues?.Feiltekst ? \"Du må velge et land\" : undefined}\n                leadText={boolValues?.Leadtekst ? \"Velg det beste landet\" : undefined}\n                placeholder={boolValues?.Placeholder ? \"Velg et land\" : undefined}\n                showDropdownControllerButton={boolValues && boolValues[\"Vis kontroller\"]}\n                noHitsMessage={boolValues && boolValues[\"Ingen treff\"] ? \"Tror ikke det er et land\" : undefined}\n                maxNumberOfHits={boolValues && boolValues[\"Max antall treff\"] ? 3 : undefined}\n                variant={(choiceValues?.Variant as \"small\" | \"medium\" | \"large\") || \"medium\"}\n                inverted={boolValues?.Invertert}\n            />\n\n            <Autosuggest\n                className=\"jkl-layout-spacing--small-top\"\n                label=\"Velg land med fritekst\"\n                onInputValueChange={setValue2}\n                onChange={setValue2}\n                value={value2}\n                onConfirm={() => console.log(\"onConfirm\")}\n                allItems={filteredItems}\n                helpLabel={boolValues?.Hjelpetekst ? \"Velg et land\" : undefined}\n                errorLabel={boolValues?.Feiltekst ? \"Du må velge et land\" : undefined}\n                leadText={boolValues?.Leadtekst ? \"Velg det beste landet\" : undefined}\n                placeholder={boolValues?.Placeholder ? \"Velg et land\" : undefined}\n                showDropdownControllerButton={boolValues && boolValues[\"Vis kontroller\"]}\n                noHitsMessage={boolValues && boolValues[\"Ingen treff\"] ? \"Tror ikke det er et land\" : undefined}\n                maxNumberOfHits={boolValues && boolValues[\"Max antall treff\"] ? 3 : undefined}\n                variant={(choiceValues?.Variant as \"small\" | \"medium\" | \"large\") || \"medium\"}\n                inverted={boolValues?.Invertert}\n            />\n        </div>\n    );\n};\n\nexport default AutosuggestExample;\n","import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/jokul/jokul/portal/src/components/Layout/DocPageLayout.tsx\";\nimport AutosuggestExample from \"./AutosuggestExample\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst Ingress = makeShortcode(\"Ingress\");\nconst Experimental = makeShortcode(\"Experimental\");\nconst ComponentExample = makeShortcode(\"ComponentExample\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <Ingress mdxType=\"Ingress\">\n    Autosuggest er en del av{\" \"}\n    <a className=\"jkl-link\" href=\"/komponenter/textinput\">\n        text-input\n    </a>{\" \"}\n    pakken, og kan brukes til å gi brukerene forslag basert på det man legger inn. Spesielt nyttig når brukeren må/kan\n    velge fra en veldig lang liste med potensielle resultat. Kan også brukes async, hvor resultatene hentes etter at\n    brukeren har tastet inn x-tegn.\n    </Ingress>\n    <Experimental mdxType=\"Experimental\">\n    Denne bruker{\" \"}\n    <a className=\"jkl-link jkl-link--external\" href=\"https://github.com/downshift-js/downshift\">\n        downshift.js\n    </a>{\" \"}\n    isteden for{\" \"}\n    <a className=\"jkl-link jkl-link--external\" href=\"https://static.nrk.no/core-components/latest/index.html?core-suggest/readme.md\">\n        NRK Core-components\n    </a>\n    . Du må gjerne bruke denne, men forvent at Autosuggest kommer til å bli skrevet om. Det kommer til å være breaking changes.\n    </Experimental>\n    <ComponentExample component={AutosuggestExample} knobs={{\n      boolProps: [\"Invertert\", \"Hjelpetekst\", \"Feiltekst\", \"Leadtekst\", \"Ingen treff\", \"Max antall treff\", \"Placeholder\", \"Vis kontroller\"],\n      choiceProps: [{\n        name: \"Variant\",\n        values: [\"small\", \"medium\", \"large\"],\n        defaultValue: 1\n      }]\n    }} mdxType=\"ComponentExample\" />\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","import React, { forwardRef, FocusEvent, useRef, useState, useEffect, RefObject } from \"react\";\nimport classNames from \"classnames\";\nimport { nanoid } from \"nanoid\";\nimport { Label, SupportLabel, LabelVariant } from \"@fremtind/jkl-core\";\nimport { BaseProps } from \"./BaseInputField\";\n\nexport interface Props extends BaseProps {\n    label: string;\n    helpLabel?: string;\n    errorLabel?: string;\n    variant?: LabelVariant;\n    inverted?: boolean;\n    forceCompact?: boolean;\n    rows?: number;\n    autoExpand?: boolean;\n}\n\nexport const TextArea = forwardRef<HTMLTextAreaElement, Props>(\n    (\n        {\n            id,\n            variant,\n            inverted,\n            label,\n            className,\n            helpLabel,\n            errorLabel,\n            rows = 7,\n            placeholder = \" \",\n            autoExpand = false,\n            forceCompact,\n            ...restProps\n        },\n        ref,\n    ) => {\n        const componentClassName = classNames(\"jkl-text-input jkl-text-area\", className, {\n            \"jkl-text-input--compact\": forceCompact,\n            \"jkl-text-input--inverted\": inverted,\n        });\n        const [uid] = useState(id || `jkl-text-area-${nanoid(8)}`);\n        const [supportId] = useState(`jkl-support-label-${nanoid(8)}`);\n\n        const [textAreaFocused, setTextAreaFocused] = useState(false);\n        const [baseScrollHeight, setBaseScrollHeight] = useState(0);\n        const [currentRows, setCurrentRows] = useState(1);\n        const internalRef = useRef<HTMLTextAreaElement>(null);\n        const textAreaRef = (ref as RefObject<HTMLTextAreaElement>) || internalRef;\n\n        useEffect(() => {\n            const textAreaElement = textAreaRef.current;\n            if (autoExpand && textAreaElement) {\n                const savedValue = textAreaElement.value;\n                const savedPlaceholder = textAreaElement.placeholder;\n                const savedRows = textAreaElement.rows;\n                // BaseScrollHeight must be calculated from an empty textarea and empty placeholder.\n                textAreaElement.value = \"\";\n                textAreaElement.placeholder = \"\";\n                textAreaElement.rows = 1;\n                setBaseScrollHeight(textAreaElement.scrollHeight);\n                textAreaElement.value = savedValue;\n                textAreaElement.placeholder = savedPlaceholder;\n                textAreaElement.rows = savedRows;\n            }\n        }, [textAreaRef, autoExpand]);\n\n        useEffect(() => {\n            const textAreaElement = textAreaRef.current;\n            const minimumRows = rows;\n\n            if (textAreaElement) {\n                const calculatedRows = calculateRows(textAreaElement, baseScrollHeight);\n                if (textAreaFocused || restProps.value) {\n                    setCurrentRows(Math.max(minimumRows, calculatedRows));\n                } else {\n                    setCurrentRows(calculatedRows);\n                }\n            }\n        }, [textAreaRef, restProps.value, textAreaFocused, baseScrollHeight, rows]);\n\n        function onFocus(e: FocusEvent<HTMLTextAreaElement>) {\n            setTextAreaFocused(true);\n            restProps.onFocus && restProps.onFocus(e);\n        }\n\n        function onBlur(e: FocusEvent<HTMLTextAreaElement>) {\n            setTextAreaFocused(false);\n            restProps.onBlur && restProps.onBlur(e);\n        }\n\n        function calculateRows(textAreaElement: HTMLTextAreaElement, baseScrollHeight: number) {\n            const lineHeightWithPx = window ? window.getComputedStyle(textAreaElement).lineHeight : \"16px\"; // Default to 16px\n            const lineHeight = parseInt(lineHeightWithPx.replace(\"px\", \"\"));\n            const savedRows = textAreaElement.rows;\n            // We need to set rows to 1 to shrink the textarea when removing characters.\n            textAreaElement.rows = 1;\n            const calculatedRows = Math.ceil((textAreaElement.scrollHeight - baseScrollHeight) / lineHeight) + 1;\n            textAreaElement.rows = savedRows;\n            return calculatedRows;\n        }\n\n        return (\n            <div data-testid=\"jkl-text-area\" className={componentClassName}>\n                <Label standAlone htmlFor={uid} variant={variant} forceCompact={forceCompact}>\n                    {label}\n                </Label>\n                <textarea\n                    id={uid}\n                    ref={textAreaRef}\n                    className={`jkl-text-input__input jkl-text-input__input--${rows}-rows`}\n                    onFocus={onFocus}\n                    onBlur={onBlur}\n                    aria-invalid={!!errorLabel}\n                    aria-describedby={supportId}\n                    placeholder={placeholder}\n                    rows={autoExpand ? currentRows : undefined}\n                    // Must set overflowX hidden for Firefox https://stackoverflow.com/a/22700700\n                    style={autoExpand ? { height: \"auto\", overflowX: \"hidden\" } : undefined}\n                    {...restProps}\n                />\n                <SupportLabel\n                    inverted={inverted}\n                    id={supportId}\n                    helpLabel={helpLabel}\n                    errorLabel={errorLabel}\n                    forceCompact={forceCompact}\n                />\n            </div>\n        );\n    },\n);\n\nTextArea.displayName = \"TextArea\";\n","import React, { ChangeEventHandler, FocusEventHandler, CSSProperties, forwardRef, KeyboardEventHandler } from \"react\";\n\nexport interface BaseProps {\n    id?: string;\n    className?: string;\n    maxLength?: number;\n    width?: string;\n    value?: string;\n    onChange?: ChangeEventHandler<HTMLInputElement | HTMLTextAreaElement>;\n    onBlur?: FocusEventHandler<HTMLInputElement | HTMLTextAreaElement>;\n    onFocus?: FocusEventHandler<HTMLInputElement | HTMLTextAreaElement>;\n    onKeyDown?: KeyboardEventHandler<HTMLInputElement | HTMLTextAreaElement>;\n    onKeyUp?: KeyboardEventHandler<HTMLInputElement | HTMLTextAreaElement>;\n    onKeyPress?: KeyboardEventHandler<HTMLInputElement | HTMLTextAreaElement>;\n    placeholder?: string;\n    readOnly?: boolean;\n    autoComplete?: string;\n    required?: boolean;\n    type?: \"text\" | \"number\" | \"tel\" | \"password\" | \"email\" | \"year\";\n    name?: string;\n}\n\nexport interface Props extends BaseProps {\n    describedBy?: string;\n    style?: CSSProperties;\n    invalid?: boolean;\n}\n\nfunction getWidthAsStyle(width?: string, maxLength?: number): CSSProperties | undefined {\n    if (width) {\n        return { width }; // prioritize width prop\n    }\n\n    if (maxLength) {\n        // adapt to maxLength, but capped at 40ch\n        const length = `${Math.min(maxLength, 40)}ch`;\n        const padding = \"24px\"; // left + right padding\n        return { width: `calc(${length} + ${padding})` };\n    }\n\n    return undefined;\n}\n\nexport const BaseInputField = forwardRef<HTMLInputElement, Props>(\n    ({ id, describedBy, invalid, maxLength, width, type = \"text\", className = \"\", ...rest }, ref) => (\n        <input\n            ref={ref}\n            id={id}\n            className={`jkl-text-input__input ${className}`}\n            style={getWidthAsStyle(width, maxLength)}\n            aria-describedby={describedBy}\n            aria-invalid={invalid}\n            maxLength={maxLength}\n            type={type}\n            {...rest}\n        />\n    ),\n);\nBaseInputField.displayName = \"BaseInputField\";\n","import React, { forwardRef, useState, HTMLAttributes, MouseEventHandler } from \"react\";\nimport { nanoid } from \"nanoid\";\nimport classNames from \"classnames\";\nimport { Label, SupportLabel, LabelVariant } from \"@fremtind/jkl-core\";\nimport { IconButton, IconVariant } from \"@fremtind/jkl-icon-button-react\";\nimport { BaseInputField, BaseProps } from \"./BaseInputField\";\n\nexport interface Action extends Exclude<HTMLAttributes<HTMLButtonElement>, \"disabled\"> {\n    icon: IconVariant;\n    label: string;\n    onClick: MouseEventHandler<HTMLButtonElement>;\n}\n\nexport interface Props extends BaseProps {\n    label: string;\n    helpLabel?: string;\n    errorLabel?: string;\n    variant?: LabelVariant;\n    inverted?: boolean;\n    forceCompact?: boolean;\n    inline?: boolean;\n    action?: Action;\n}\n\nexport const TextInput = forwardRef<HTMLInputElement, Props>(\n    (\n        {\n            id,\n            className,\n            label,\n            helpLabel,\n            errorLabel,\n            variant = \"medium\",\n            inline,\n            inverted,\n            forceCompact,\n            action,\n            ...inputProps\n        },\n        ref,\n    ) => {\n        const [uid] = useState(id || `jkl-text-input-${nanoid(8)}`);\n        const [supportId] = useState(`jkl-support-label-${nanoid(8)}`);\n        const hasSupportText = helpLabel || errorLabel;\n        const describedBy = hasSupportText ? supportId : undefined;\n        const componentClassName = classNames(\n            {\n                \"jkl-text-input\": true,\n                \"jkl-text-input--inline\": inline,\n                \"jkl-text-input--inverted\": inverted,\n                \"jkl-text-input--compact\": forceCompact,\n                \"jkl-text-input--action\": action,\n            },\n            className,\n        );\n        return (\n            <div data-testid=\"jkl-text-input\" className={componentClassName}>\n                <Label forceCompact={forceCompact} standAlone srOnly={inline} htmlFor={uid} variant={variant}>\n                    {label}\n                </Label>\n                <div className=\"jkl-text-input__input-wrapper\">\n                    <BaseInputField\n                        ref={ref}\n                        id={uid}\n                        describedBy={describedBy}\n                        invalid={!!errorLabel}\n                        {...inputProps}\n                    />\n                    {action && (\n                        <IconButton\n                            className=\"jkl-text-input__action-button\"\n                            iconType={action.icon}\n                            buttonTitle={action.label}\n                            onClick={action.onClick}\n                            onFocus={action.onFocus}\n                            onBlur={action.onBlur}\n                        />\n                    )}\n                </div>\n                <SupportLabel\n                    inverted={inverted}\n                    id={supportId}\n                    helpLabel={helpLabel}\n                    errorLabel={errorLabel}\n                    srOnly={inline}\n                />\n            </div>\n        );\n    },\n);\nTextInput.displayName = \"TextInput\";\n","import React from \"react\";\nimport { ArrowVerticalAnimated, Close } from \"@fremtind/jkl-icons-react\";\n\ninterface Props {\n    clearSelection: () => void;\n    hasSelectedItem: boolean;\n    isOpen: boolean;\n    onClick: () => void;\n    inverted?: boolean;\n}\n\nconst ControllerButton: React.FC<Props> = ({\n    isOpen,\n    hasSelectedItem,\n    clearSelection,\n    onClick,\n    inverted = false,\n    ...rest\n}) => (\n    <button\n        {...rest}\n        className={`jkl-autosuggest__controller-button ${\n            inverted ? \"jkl-autosuggest__controller-button--inverted\" : \"\"\n        }`}\n        aria-label={hasSelectedItem ? \"Fjern valg\" : \"Vis valg\"}\n        onClick={hasSelectedItem ? clearSelection : onClick}\n        type=\"button\"\n    >\n        {!hasSelectedItem && <ArrowVerticalAnimated pointingDown={!isOpen} />}\n        {hasSelectedItem && <Close variant=\"small\" />}\n    </button>\n);\n\nexport default ControllerButton;\n","import React, { ReactNode } from \"react\";\nimport { PropGetters } from \"downshift\";\n\ninterface MenuProps<T> {\n    downshiftProps: Pick<PropGetters<T>, \"getMenuProps\" | \"getItemProps\">;\n    highlightedIndex: number | null;\n    items: T[];\n    itemToString: (item: T | null) => string;\n    noHitsMessage?: ReactNode;\n    maxNumberOfHits?: number;\n    inverted?: boolean;\n}\n\nfunction Menu<T>({\n    downshiftProps: { getMenuProps, getItemProps },\n    highlightedIndex,\n    items,\n    itemToString,\n    noHitsMessage,\n    maxNumberOfHits = Infinity,\n    inverted = false,\n}: MenuProps<T>) {\n    const visibleItems = items.length > maxNumberOfHits ? items.slice(0, maxNumberOfHits) : items;\n\n    if (visibleItems.length === 0 && !noHitsMessage) {\n        return null;\n    }\n\n    return (\n        <div data-testid=\"autosuggest__menu\" style={{ position: \"relative\" }}>\n            <ul\n                {...getMenuProps({\n                    className: `jkl-autosuggest__menu ${inverted ? \"jkl-autosuggest__menu--inverted\" : \"\"}`,\n                })}\n            >\n                {visibleItems.length === 0 && <div className=\"jkl-autosuggest__no-hits-message\">{noHitsMessage}</div>}\n                {visibleItems.map((item, index) => (\n                    <li\n                        {...getItemProps({\n                            item,\n                            className: `\n                                        jkl-autosuggest__item\n                                        ${index === highlightedIndex ? \"jkl-autosuggest__item--active\" : \"\"}\n                                        `,\n                        })}\n                        data-testid=\"autosuggest__item\"\n                        key={itemToString(item)}\n                    >\n                        {itemToString(item)}\n                    </li>\n                ))}\n            </ul>\n        </div>\n    );\n}\n\nexport default Menu;\n","import React from \"react\";\nimport { SupportLabel } from \"@fremtind/jkl-core\";\nimport Downshift, { DownshiftProps } from \"downshift\";\n\nimport { CommonProps } from \"./Autosuggest\";\nimport ControllerButton from \"./ControllerButton\";\nimport Menu from \"./Menu\";\n\nconst KEY_ENTER = 13;\n\ntype BaseAutosuggestProps<T> = CommonProps & {\n    inverted?: boolean;\n    itemToString: (item: T | null) => string;\n    items: T[];\n    downshiftProps: DownshiftProps<T>;\n    showDropdownControllerButton?: boolean;\n    onConfirm?: () => void;\n};\n\nfunction BaseAutosuggest<T>({\n    inverted = false,\n    className = \"\",\n    label,\n    inputId,\n    labelId,\n    leadText,\n    errorLabel,\n    helpLabel,\n    variant = \"medium\",\n    noHitsMessage,\n    maxNumberOfHits,\n    placeholder,\n    itemToString,\n    items,\n    downshiftProps,\n    showDropdownControllerButton = false,\n    onConfirm = () => {\n        /* noop */\n    },\n}: BaseAutosuggestProps<T>) {\n    const customLabelProps =\n        inputId && labelId\n            ? {\n                  inputId,\n                  labelId,\n              }\n            : {};\n\n    return (\n        <Downshift {...downshiftProps} {...customLabelProps} itemToString={itemToString}>\n            {({\n                getInputProps,\n                getToggleButtonProps,\n                getItemProps,\n                getLabelProps,\n                getMenuProps,\n                selectedItem,\n                isOpen,\n                highlightedIndex,\n                clearSelection,\n            }) => {\n                return (\n                    <div className={`jkl-autosuggest ${className}`}>\n                        {label && (\n                            <label\n                                {...getLabelProps({\n                                    className: `jkl-label jkl-label--${variant}`,\n                                })}\n                            >\n                                {label}\n                            </label>\n                        )}\n                        {leadText && <p className=\"jkl-body jkl-spacing--bottom-1\">{leadText}</p>}\n                        <div className={`jkl-autosuggest__input_group ${inverted ? \"jkl-text-input--inverted\" : \"\"}`}>\n                            <input\n                                {...getInputProps({\n                                    placeholder,\n                                    className: \"jkl-text-input__input\",\n                                    \"aria-invalid\": !!errorLabel,\n                                    onKeyDown: (e) => {\n                                        if (e.keyCode === KEY_ENTER && !isOpen) {\n                                            onConfirm();\n                                        }\n                                    },\n                                })}\n                                data-testid=\"autosuggest__input\"\n                            />\n                            {showDropdownControllerButton && (\n                                <ControllerButton\n                                    {...getToggleButtonProps()}\n                                    isOpen={isOpen}\n                                    hasSelectedItem={!!selectedItem}\n                                    clearSelection={clearSelection}\n                                    inverted={inverted}\n                                />\n                            )}\n                        </div>\n                        <SupportLabel inverted={inverted} errorLabel={errorLabel} helpLabel={helpLabel} />\n                        {isOpen && (\n                            <Menu\n                                downshiftProps={{\n                                    getMenuProps,\n                                    getItemProps,\n                                }}\n                                highlightedIndex={highlightedIndex}\n                                items={items}\n                                itemToString={itemToString}\n                                noHitsMessage={noHitsMessage}\n                                maxNumberOfHits={maxNumberOfHits}\n                                inverted={inverted}\n                            />\n                        )}\n                    </div>\n                );\n            }}\n        </Downshift>\n    );\n}\n\nexport default BaseAutosuggest;\n","import { StateChangeOptions } from \"downshift\";\nimport React, { ReactNode, useEffect, useState } from \"react\";\n\nimport BaseAutosuggest from \"./BaseAutosuggest\";\nimport { filter } from \"./utils\";\n\nexport type CommonProps = (\n    | {\n          label: string;\n          inputId?: null;\n          labelId?: null;\n      }\n    | {\n          label?: null;\n          inputId: string;\n          labelId: string;\n      }\n) & {\n    className?: string;\n    isOpen?: boolean;\n    leadText?: string;\n    errorLabel?: string;\n    helpLabel?: string;\n    variant?: \"large\" | \"medium\" | \"small\";\n    placeholder?: string;\n    noHitsMessage?: ReactNode;\n    maxNumberOfHits?: number;\n    showDropdownControllerButton?: boolean;\n    onInputValueChange?: (inputValue: string) => void;\n    inverted?: boolean;\n};\n\nexport interface AutosuggestStringItemProps {\n    allItems: string[];\n    value: string;\n    onChange?: (item: string) => void;\n    onStateChange?: (changes: StateChangeOptions<string>) => void;\n    onConfirm?: () => void;\n}\n\ntype Props = CommonProps & AutosuggestStringItemProps;\n\nexport function Autosuggest({\n    allItems,\n    onChange = () => {\n        /* default noop */\n    },\n    onConfirm = () => {\n        /* noop */\n    },\n    onInputValueChange,\n    onStateChange,\n    value,\n    isOpen,\n    ...rest\n}: Props) {\n    const [hits, setHits] = useState(allItems);\n\n    useEffect(() => setHits(allItems), [allItems]);\n\n    const handleStateChange = (changes: StateChangeOptions<string>) => {\n        if (onStateChange) {\n            onStateChange(changes);\n        }\n\n        if (changes.selectedItem !== undefined) {\n            onChange(changes.selectedItem || \"\");\n        } else if (changes.inputValue) {\n            setHits(filter(allItems, changes.inputValue));\n        }\n    };\n\n    const itemToString = (item: string | null) => (item ? item : \"\");\n\n    return (\n        <BaseAutosuggest\n            {...rest}\n            items={hits}\n            itemToString={itemToString}\n            onConfirm={onConfirm}\n            downshiftProps={{\n                selectedItem: value,\n                onInputValueChange,\n                onStateChange: handleStateChange,\n                isOpen,\n            }}\n        />\n    );\n}\n","import matchSorter from \"match-sorter\";\n\nexport function filter<T>(allItems: T[], inputValue: string | null, keys?: string[]) {\n    const options = keys ? { keys } : {};\n    if (!inputValue) {\n        return allItems;\n    }\n    return matchSorter(allItems, inputValue, options);\n}\n"],"sourceRoot":""}