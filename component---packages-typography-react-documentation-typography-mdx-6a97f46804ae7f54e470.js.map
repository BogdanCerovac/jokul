{"version":3,"sources":["webpack:///../packages/typography-react/src/Typography.tsx","webpack:///../packages/typography-react/src/Link.tsx","webpack:///../packages/typography-react/src/SupportLabel.tsx","webpack:///../packages/typography-react/src/Label.tsx","webpack:///../packages/typography-react/documentation/Example.tsx","webpack:///../packages/typography-react/documentation/Typography.mdx"],"names":["makeTypographyComponent","variant","textStyle","modifier","children","className","rest","replace","c","toUpperCase","Element","Link","negative","SupportLabel","helpLabel","errorLabel","forceCompact","componentClassName","classNames","Label","srOnly","standAlone","htmlFor","C","undefined","Example","style","padding","href","backgroundColor","color","_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"kNASA,SAASA,EAAwBC,EAA+BC,EAAmBC,GAC/E,OAAO,YAA6D,IAAvCC,EAAuC,EAAvCA,SAAUC,EAA6B,EAA7BA,UAAcC,E,oIAAe,8BAC/CH,GAAYF,GAASM,QAAQ,OAAO,SAACC,GAAD,OAAOA,EAAEC,iBAM9D,IAAMC,EAAUT,EAEhB,OACI,kBAACS,EAAD,eAASL,UAAcH,EAAL,KAAkBG,GAAa,KAAUC,GACtDF,IAMCJ,EAAwB,KAAM,mBAC9BA,EAAwB,KAAM,mBAC9BA,EAAwB,KAAM,qBAC9BA,EAAwB,KAAM,sBAC9BA,EAAwB,KAAM,qBAC5BA,EAAwB,IAAK,WAAY,QACzCA,EAAwB,IAAK,WAAY,QACxCA,EAAwB,IAAK,YAAa,SAC1CA,EAAwB,IAAK,YAAa,SC5BxD,IAAMW,EAAO,SAAC,GAAD,QAAGC,gBAAH,SAAqBR,EAArB,EAAqBA,SAArB,IAA+BC,iBAA/B,MAA2C,GAA3C,EAAkDC,E,oIAAlD,+CAChB,qCAAGD,UAAS,cAAeO,EAAW,qBAAuB,IAAjD,IAAuDP,GAAiBC,GAC/EF,I,qBCCIS,EAAe,SAAC,GAA8D,IAA5DC,EAA4D,EAA5DA,UAAWC,EAAiD,EAAjDA,WAAYC,EAAqC,EAArCA,aAAcX,EAAuB,EAAvBA,UAC1DY,EAAqBC,IAAW,yBAA0Bb,EAAW,CACvE,kCAAmCW,EACnC,gCAAiCD,EACjC,gCAAiCA,IAGrC,OAAIA,GAAcD,EACP,0BAAMT,UAAWY,GAAqBF,GAAcD,GAGxD,MCRJ,SAASK,EAAT,GAAmG,UAAlFlB,eAAkF,MAAxE,SAAwE,EAA9De,EAA8D,EAA9DA,aAAcI,EAAgD,EAAhDA,OAAQhB,EAAwC,EAAxCA,SAAUiB,EAA8B,EAA9BA,WAAYC,EAAkB,EAAlBA,QAC9EjB,EAAYa,IAAW,cAAD,oBACTjB,GAAYA,EADH,EAExB,sBAAsBe,EAFE,EAGxB,sBAAsBI,EAHE,IAMtBG,EAAIF,EAAa,QAAU,OAWjC,OATKA,GAAcC,IACfA,OAAUE,GASV,kBAACD,EAAD,CAAGlB,UAAWA,EAAWiB,QAASA,GAC7BlB,G,cCAEqB,EA5BC,kBACZ,6BAASpB,UAAU,sBACf,wBAAIA,UAAU,2CAAd,SACA,kBAACc,EAAD,CAAOE,YAAU,EAACpB,QAAQ,SAA1B,SAGA,kBAACkB,EAAD,CAAOE,YAAU,EAACpB,QAAQ,UAA1B,UAGA,kBAACkB,EAAD,CAAOE,YAAU,EAACpB,QAAQ,SAA1B,SAGA,wBAAII,UAAU,8DAAd,gBACA,kBAAC,EAAD,CAAcS,UAAU,gBACxB,kBAAC,EAAD,CAAcC,WAAW,gBACzB,wBAAIV,UAAU,8DAAd,QACA,uBAAGA,UAAU,WAAWqB,MAAO,CAAEC,QAAS,WAA1C,8BAC+B,kBAAC,EAAD,CAAMC,KAAK,KAAX,QAD/B,gCAGA,uBAAGvB,UAAU,WAAWqB,MAAO,CAAEG,gBAAiB,UAAWC,MAAO,OAAQH,QAAS,WAArF,6BAC+B,IAC3B,kBAAC,EAAD,CAAMf,UAAQ,EAACgB,KAAK,KAApB,QAEQ,IAJZ,iC,qFCjBD,IAAMG,EAAe,GAOtBC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,iBAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAI5E,+LAA8K,0BAAYC,WAAW,KAAvB,YAA9K,KACA,2BAAU,+BAAGA,WAAW,KAAQ,CAC5B,KAAQ,4BADF,sBAAV,8FAGA,YAAC,EAAD,CAASD,QAAQ,aAKrBH,EAAWK,gBAAiB","file":"component---packages-typography-react-documentation-typography-mdx-6a97f46804ae7f54e470.js","sourcesContent":["import React, { HTMLAttributes } from \"react\";\n\ntype ValidSemanticHeaders = \"h1\" | \"h2\" | \"h3\" | \"h4\" | \"h5\";\ntype ValidSemanticBlocks = \"p\";\ntype ValidModifiers = \"lead\" | \"small\" | \"micro\" | \"body\";\ntype ValidSemanticElement = ValidSemanticHeaders | ValidSemanticBlocks;\n\ntype Props = HTMLAttributes<HTMLHeadingElement> | HTMLAttributes<HTMLParagraphElement>;\n\nfunction makeTypographyComponent(variant: ValidSemanticElement, textStyle: string, modifier?: ValidModifiers) {\n    return function typography({ children, className, ...rest }: Props) {\n        const tagName = (modifier || variant).replace(/^\\w/, (c) => c.toUpperCase());\n        if (process.env.NODE_ENV === \"development\") {\n            console.warn(\n                `ATTENTION! The typographic components in jkl-core, like \"${tagName}\", are deprecated. Please stop using them and start using typographic CSS classes or the jkl-text-style Sass mixin instead. Refer to the documentation for more info.`,\n            );\n        }\n        const Element = variant;\n\n        return (\n            <Element className={`${textStyle} ${className || \"\"}`} {...rest}>\n                {children}\n            </Element>\n        );\n    };\n}\n\nexport const H1 = makeTypographyComponent(\"h1\", \"jkl-title-large\");\nexport const H2 = makeTypographyComponent(\"h2\", \"jkl-title-small\");\nexport const H3 = makeTypographyComponent(\"h3\", \"jkl-heading-large\");\nexport const H4 = makeTypographyComponent(\"h4\", \"jkl-heading-medium\");\nexport const H5 = makeTypographyComponent(\"h5\", \"jkl-heading-small\");\nexport const Lead = makeTypographyComponent(\"p\", \"jkl-lead\", \"lead\");\nexport const Body = makeTypographyComponent(\"p\", \"jkl-body\", \"body\");\nexport const Small = makeTypographyComponent(\"p\", \"jkl-small\", \"small\");\nexport const Micro = makeTypographyComponent(\"p\", \"jkl-micro\", \"micro\");\n","import React, { AnchorHTMLAttributes, ReactNode } from \"react\";\n\ninterface Props extends Pick<AnchorHTMLAttributes<HTMLAnchorElement>, \"rel\" | \"target\" | \"className\" | \"href\"> {\n    negative?: boolean;\n    children: ReactNode;\n}\n\nexport const Link = ({ negative = false, children, className = \"\", ...rest }: Props) => (\n    <a className={`jkl-link  ${negative ? \"jkl-link--negative\" : \"\"} ${className}`} {...rest}>\n        {children}\n    </a>\n);\n","import React from \"react\";\nimport classNames from \"classnames\";\n\ninterface Props {\n    helpLabel?: string;\n    errorLabel?: string;\n    forceCompact?: boolean;\n    className?: string;\n}\n\nexport const SupportLabel = ({ helpLabel, errorLabel, forceCompact, className }: Props) => {\n    const componentClassName = classNames(\"jkl-form-support-label\", className, {\n        \"jkl-form-support-label--compact\": forceCompact,\n        \"jkl-form-support-label--error\": errorLabel,\n        \"jkl-form-support-label--help\": !errorLabel,\n    });\n\n    if (errorLabel || helpLabel) {\n        return <span className={componentClassName}>{errorLabel || helpLabel}</span>;\n    }\n\n    return null;\n};\n","import React, { ReactNode } from \"react\";\nimport { LabelVariant } from \"@fremtind/jkl-core\";\nimport classNames from \"classnames\";\n\ninterface Props {\n    variant?: LabelVariant;\n    forceCompact?: boolean;\n    srOnly?: boolean;\n    children: ReactNode;\n    standAlone?: boolean;\n    htmlFor?: string;\n}\n\nexport function Label({ variant = \"medium\", forceCompact, srOnly, children, standAlone, htmlFor }: Props) {\n    const className = classNames(\"jkl-label\", {\n        [`jkl-label--${variant}`]: variant,\n        \"jkl-label--compact\": forceCompact,\n        \"jkl-label--sr-only\": srOnly,\n    });\n\n    const C = standAlone ? \"label\" : \"span\";\n\n    if (!standAlone && htmlFor) {\n        htmlFor = undefined;\n        if (process.env.NODE_ENV !== \"production\") {\n            console.warn(\n                \"WARNING: The standard Label component renders as a <span> element, which does not take a htmlFor prop. If you want the Label to belong to a specific input, use the standAlone prop, which renders as a <label> element instead. In most cases the Label component should not be used directly, as it is part of all our input components.\",\n            );\n        }\n    }\n\n    return (\n        <C className={className} htmlFor={htmlFor}>\n            {children}\n        </C>\n    );\n}\n","import React from \"react\";\nimport { Label, SupportLabel, Link } from \"../src\";\n\nimport \"@fremtind/jkl-core/core.min.css\";\n\nconst Example = () => (\n    <section className=\"jkl-spacing--top-3\">\n        <h2 className=\"jkl-heading-large jkl-spacing--bottom-1\">Label</h2>\n        <Label standAlone variant=\"small\">\n            Small\n        </Label>\n        <Label standAlone variant=\"medium\">\n            Medium\n        </Label>\n        <Label standAlone variant=\"large\">\n            Large\n        </Label>\n        <h2 className=\"jkl-heading-large jkl-spacing--bottom-1 jkl-spacing--top-3\">SupportLabel</h2>\n        <SupportLabel helpLabel=\"Hjelpetekst\" />\n        <SupportLabel errorLabel=\"Feilmelding\" />\n        <h2 className=\"jkl-heading-large jkl-spacing--bottom-1 jkl-spacing--top-3\">Link</h2>\n        <p className=\"jkl-body\" style={{ padding: \"1.5rem\" }}>\n            Lorem ipsum dolor sin amet <Link href=\"#\">Link</Link> consectetur adipiscing elit\n        </p>\n        <p className=\"jkl-body\" style={{ backgroundColor: \"#181818\", color: \"#FFF\", padding: \"1.5rem\" }}>\n            Lorem ipsum dolor sin amet{\" \"}\n            <Link negative href=\"#\">\n                Link\n            </Link>{\" \"}\n            consectetur adipiscing elit\n        </p>\n    </section>\n);\nexport default Example;\n","import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/jokul/jokul/portal/src/components/Layout/ComponentLayout.tsx\";\nimport Example from \"./Example\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <p>{`Vi tilbyr komponenter for spesielle typografiske elementer, som etiketter og lenker. For l√∏pende tekst og overskrifter kan man bruke CSS-klasser eller Sass-mixins fra `}<inlineCode parentName=\"p\">{`jkl-core`}</inlineCode>{`.`}</p>\n    <p>{`Se `}<a parentName=\"p\" {...{\n        \"href\": \"/jokul/profil/typografi\"\n      }}>{`siden om typografi`}</a>{` under \"Profilen v√•r\" for informasjon om hvordan du bruker typografiske elementer i J√∏kul.`}</p>\n    <Example mdxType=\"Example\" />\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}