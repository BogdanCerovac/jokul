diff --git a/node_modules/@nrk/core-datepicker/jsx.js b/node_modules/@nrk/core-datepicker/jsx.js
index 00848d7..5096ed7 100644
--- a/node_modules/@nrk/core-datepicker/jsx.js
+++ b/node_modules/@nrk/core-datepicker/jsx.js
@@ -328,6 +328,35 @@ var index_min = createCommonjsModule(function (module, exports) {
   });
 });
 
+var FILL = {
+  month: function month(self, value) {
+    if (!self.disabled(value)) {
+      return value;
+    }
+
+    var firstAvailableDate = daysInMonth(self.parse(value)).filter(function (day) {
+      return !self.disabled(day);
+    })[0];
+    return firstAvailableDate || value;
+  },
+  "null": function _null(_self, value) {
+    return value;
+  }
+};
+var DISABLED = {
+  month: function month(self, value) {
+    var allDays = daysInMonth(self.parse(value));
+    var allDaysDisabled = allDays.map(function (day) {
+      return self.disabled(day);
+    }).reduce(function (a, b) {
+      return a && b;
+    });
+    return allDaysDisabled;
+  },
+  "null": function _null(self, value) {
+    return self.disabled(value);
+  }
+};
 var MASK = {
   year: '*-m-d',
   month: 'y-*-d',
@@ -404,8 +433,12 @@ function (_HTMLElement) {
     key: "handleEvent",
     value: function handleEvent(event) {
       if (event.defaultPrevented || event.ctrlKey || event.metaKey || event.shiftKey || event.altKey || event.type === 'keydown' && !KEYS[event.keyCode]) return;
-      if (!this.contains(event.target) && !closest(event.target, "[for=\"".concat(this.id, "\"]"))) return;
-      if (event.type === 'change') this.date = MASK[event.target.getAttribute('data-type')].replace('*', event.target.value);else if (event.type === 'click') {
+      if (!this.contains(event.target) && !closest(event.target, "[for=\"".concat(this.id, "\"]").concat(", [data-for=\"".concat(this.id, "\"]")))) return;
+      if (event.type === 'change') {
+        var date = MASK[event.target.getAttribute('data-type')].replace('*', event.target.value);
+        this.date = FILL[event.target.getAttribute('data-fill')](this, date);
+      }
+      else if (event.type === 'click') {
         var _button = closest(event.target, 'button[value]');
 
         var _table = closest(event.target, 'table');
@@ -580,18 +613,34 @@ function table(self, table) {
 function select(self, select) {
   if (!select.firstElementChild) {
     select._autofill = true;
+    select.setAttribute('data-fill', 'month');
     select.innerHTML = self.months.map(function (name, month) {
       return "<option value=\"y-".concat(month + 1, "-d\"></option>");
     }).join('');
   }
 
+  var disabled = DISABLED[select.getAttribute('data-fill')];
   queryAll(select.children).forEach(function (option, month) {
     if (select._autofill) option.textContent = self.months[month];
-    option.disabled = self.disabled(option.value);
+    option.disabled = disabled(self, option.value);
     option.selected = !self.diff(option.value);
   });
 }
 
+function daysInMonth(dateInMonth) {
+  var date = new Date(dateInMonth);
+  date.setDate(1);
+  var month = date.getMonth();
+  var days = [];
+
+  while (date.getMonth() === month) {
+    days.push(new Date(date));
+    date.setDate(date.getDate() + 1);
+  }
+
+  return days;
+}
+
 var version = "3.0.8";
 
 /**
@@ -617,6 +666,14 @@ var closest$1 = function () {
   };
 }();
 /**
+* getUUID
+* @return {String} A generated unique ID
+*/
+
+function getUUID() {
+  return Date.now().toString(36) + Math.random().toString(36).slice(2, 5)
+}
+/**
 * customElementToReact
 * @param {Class|Function} elementClass A custom element definition.
 * @param {Array} options Props and custom events
@@ -626,7 +683,8 @@ var closest$1 = function () {
 
 function customElementToReact(elementClass, options) {
   if (options === void 0) options = {};
-  var name = elementClass.name || String(elementClass).match(/function ([^(]+)/)[1]; // String match for IE11
+  var suppliedName = options.name || elementClass.name || String(elementClass).match(/function ([^(]+)/)[1] // String match for IE11
+  var name = suppliedName + "-" + getUUID();
 
   var dashCase = name.replace(/.[A-Z]/g, function (ref) {
     var a = ref[0];
@@ -746,10 +804,9 @@ function customElementToReact(elementClass, options) {
   );
 }
 
-var coreDatepicker = customElementToReact(CoreDatepicker, {
+export default customElementToReact(CoreDatepicker, {
+  name: "CoreDatepicker",
   props: ['disabled'],
   customEvents: ['datepicker.change', 'datepicker.click.day'],
   suffix: version
 });
-
-module.exports = coreDatepicker;
