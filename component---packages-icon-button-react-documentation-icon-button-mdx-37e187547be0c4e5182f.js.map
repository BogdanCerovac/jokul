{"version":3,"sources":["webpack:///../packages/icon-button-react/src/Icons/IconSearch.tsx","webpack:///../packages/icon-button-react/src/Icons/IconClear.tsx","webpack:///../packages/icon-button-react/src/Icons/IconCalendar.tsx","webpack:///../packages/icon-button-react/src/IconButton.tsx","webpack:///../packages/icon-button-react/documentation/Example.tsx","webpack:///../packages/icon-button-react/documentation/IconButton.mdx"],"names":["IconSearch","data-testid","viewBox","fill","xmlns","cx","cy","r","stroke","strokeWidth","d","IconClear","IconCalendar","IconButton","iconType","buttonTitle","rest","type","title","className","getIcon","onClick","console","log","Example","choiceValues","_frontmatter","makeShortcode","name","props","warn","Ingress","ComponentExample","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","component","knobs","choiceProps","values","defaultValue","isMDXComponent"],"mappings":"uPAEaA,EAAa,kBACtB,yBAAKC,cAAY,kBAAkBC,QAAQ,YAAYC,KAAK,OAAOC,MAAM,8BACrE,4BAAQC,GAAG,MAAMC,GAAG,MAAMC,EAAE,MAAMC,OAAO,eAAeC,YAAY,QACpE,0BAAMC,EAAE,eAAeF,OAAO,eAAeC,YAAY,UCHpDE,EAAY,kBACrB,yBAAKT,QAAQ,YAAYC,KAAK,OAAOC,MAAM,8BACvC,0BAAMM,EAAE,aAAaF,OAAO,eAAeC,YAAY,QACvD,0BAAMC,EAAE,aAAaF,OAAO,eAAeC,YAAY,UCHlDG,EAAe,kBACxB,yBAAKV,QAAQ,YAAYC,KAAK,QAC1B,0BAAMK,OAAO,eAAeE,EAAE,uCAC9B,0BACIP,KAAK,eACLO,EAAE,sOCiBP,IAAMG,EAAa,SAAC,GAAwD,QAAtDC,gBAAsD,MAA3C,QAA2C,EAAlCC,EAAkC,EAAlCA,YAAgBC,EAAkB,0CAC/E,OACI,0CAAQC,KAAK,SAASC,MAAOH,EAAad,cAAY,kBAAkBkB,UAAU,mBAAsBH,GACpG,0BAAMf,cAAY,kBAAkBkB,UAAU,yBAhB1D,SAAiBL,GACb,OAAQA,GACJ,IAAK,QACD,OAAO,kBAAC,EAAD,MACX,IAAK,SACD,OAAO,kBAAC,EAAD,MACX,IAAK,WACD,OAAO,kBAAC,EAAD,MACX,QACI,OAAO,MAQFM,CAAQN,IAEb,0BAAMK,UAAU,eAAeJ,KC1B3C,SAASM,IACLC,QAAQC,IAAI,mBAGT,IAUQC,EAVyC,SAAC,GAAqB,IAAnBC,EAAmB,EAAnBA,aACjDR,EAAOQ,GAAiBA,EAAY,KAE1C,OACI,oCACI,kBAAC,EAAD,CAAYX,SAAUG,EAAMI,QAASA,EAASN,YAAY,kBCJzDW,EAAe,GAEtBC,EAAgB,SAAAC,GAAI,OAAI,SAA6BC,GAEzD,OADAP,QAAQQ,KAAK,aAAeF,EAAO,2EAC5B,kBAASC,KAGZE,EAAUJ,EAAc,WACxBK,EAAmBL,EAAc,oBACjCM,EAAc,CAClBP,gBAEIQ,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGR,EACF,8BACD,OAAO,YAACK,EAAD,iBAAeD,EAAiBJ,EAAhC,CAAuCQ,WAAYA,EAAYC,QAAQ,cAI5E,YAACP,EAAD,CAASO,QAAQ,WAAjB,2HAGA,YAACN,EAAD,CAAkBO,UAAWf,EAASgB,MAAO,CAC3CC,YAAa,CAAC,CACZb,KAAM,OACNc,OAAQ,CAAC,QAAS,SAAU,YAC5BC,aAAc,KAEfL,QAAQ,sBAKfF,EAAWQ,gBAAiB","file":"component---packages-icon-button-react-documentation-icon-button-mdx-37e187547be0c4e5182f.js","sourcesContent":["import React from \"react\";\n\nexport const IconSearch = () => (\n    <svg data-testid=\"jkl-search-icon\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n        <circle cx=\"9.5\" cy=\"9.5\" r=\"8.5\" stroke=\"currentColor\" strokeWidth=\"1.5\" />\n        <path d=\"M23 23L15 15\" stroke=\"currentColor\" strokeWidth=\"1.5\" />\n    </svg>\n);\n","import React from \"react\";\n\nexport const IconClear = () => (\n    <svg viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path d=\"M3 21L21 3\" stroke=\"currentColor\" strokeWidth=\"1.5\" />\n        <path d=\"M3 3L21 21\" stroke=\"currentColor\" strokeWidth=\"1.5\" />\n    </svg>\n);\n","import React from \"react\";\n\nexport const IconCalendar = () => (\n    <svg viewBox=\"0 0 24 24\" fill=\"none\">\n        <path stroke=\"currentColor\" d=\"M.5 3.5h23v20H.5zM6.5 0v7M17.5 0v7\" />\n        <path\n            fill=\"currentColor\"\n            d=\"M4.5 9.5H6V11H4.5zM4.5 14H6v1.5H4.5zM4.5 18.5H6V20H4.5zM9 9.5h1.5V11H9zM9 14h1.5v1.5H9zM9 18.5h1.5V20H9zM13.5 9.5H15V11h-1.5zM13.5 14H15v1.5h-1.5zM13.5 18.5H15V20h-1.5zM18 9.5h1.5V11H18zM18 14h1.5v1.5H18zM18 18.5h1.5V20H18z\"\n        />\n    </svg>\n);\n","import React, { HTMLAttributes } from \"react\";\nimport { IconVariant } from \"./index\";\nimport { IconSearch } from \"./Icons/IconSearch\";\nimport { IconClear } from \"./Icons/IconClear\";\nimport { IconCalendar } from \"./Icons/IconCalendar\";\n\ninterface Props extends Exclude<HTMLAttributes<HTMLButtonElement>, \"disabled\"> {\n    iconType?: IconVariant;\n    buttonTitle: string;\n}\n\nfunction getIcon(iconType: IconVariant) {\n    switch (iconType) {\n        case \"clear\":\n            return <IconClear />;\n        case \"search\":\n            return <IconSearch />;\n        case \"calendar\":\n            return <IconCalendar />;\n        default:\n            return null;\n    }\n}\n\nexport const IconButton = ({ iconType = \"clear\", buttonTitle, ...rest }: Props) => {\n    return (\n        <button type=\"button\" title={buttonTitle} data-testid=\"jkl-icon-button\" className=\"jkl-icon-button\" {...rest}>\n            <span data-testid=\"jkl-action-icon\" className=\"jkl-icon-button__icon\">\n                {getIcon(iconType)}\n            </span>\n            <span className=\"jkl-sr-only\">{buttonTitle}</span>\n        </button>\n    );\n};\n","import React from \"react\";\nimport { ExampleComponentProps } from \"@fremtind/jkl-portal-components\";\nimport { IconButton, IconVariant } from \"../src\";\n\nfunction onClick() {\n    console.log(\"Button Clicked!\");\n}\n\nexport const Example: React.FC<ExampleComponentProps> = ({ choiceValues }) => {\n    const type = choiceValues && (choiceValues[\"Type\"] as IconVariant);\n\n    return (\n        <>\n            <IconButton iconType={type} onClick={onClick} buttonTitle=\"Vis knappen\" />\n        </>\n    );\n};\n\nexport default Example;\n","import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/jokul/jokul/portal/src/components/Layout/DocPageLayout.tsx\";\nimport Example from \"./Example\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst Ingress = makeShortcode(\"Ingress\");\nconst ComponentExample = makeShortcode(\"ComponentExample\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <Ingress mdxType=\"Ingress\">\n    En rekke av komponenter bruker ulike ikon knapper. IconButton er en klikkbar komponent som støtter Jøkuls UI elementer.\n    </Ingress>\n    <ComponentExample component={Example} knobs={{\n      choiceProps: [{\n        name: \"Type\",\n        values: [\"clear\", \"search\", \"calendar\"],\n        defaultValue: 1\n      }]\n    }} mdxType=\"ComponentExample\" />\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}