{"version":3,"sources":["webpack:///./src/texts/getstarted/CodeGuide.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"4OAMaA,EAAe,GAOtBC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YAACJ,EAAD,iBAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,wDACA,2bACA,yCACA,sBACE,kBAAIC,WAAW,MAAf,UAA+B,+BAAGA,WAAW,MAAS,CAClD,KAAQ,kDADmB,eAG/B,kBAAIA,WAAW,MAAf,iBAAsC,+BAAGA,WAAW,MAAS,CACzD,KAAQ,yBAD0B,UAGtC,kBAAIA,WAAW,MAAf,gBAAqC,+BAAGA,WAAW,MAAS,CACxD,KAAQ,mCADyB,UAArC,OAE2B,+BAAGA,WAAW,MAAS,CAC9C,KAAQ,wBADe,SAG3B,kBAAIA,WAAW,MAAf,gBAAqC,+BAAGA,WAAW,MAAS,CACxD,KAAQ,uBADyB,SAGrC,kBAAIA,WAAW,MAAf,kBAAuC,+BAAGA,WAAW,MAAS,CAC1D,KAAQ,iEAD2B,0BAGvC,kBAAIA,WAAW,MAAf,qBAA0C,+BAAGA,WAAW,MAAS,CAC7D,KAAQ,2BAD8B,SAG1C,kBAAIA,WAAW,MAAf,iBAAsC,+BAAGA,WAAW,MAAS,CACzD,KAAQ,sBAD0B,SAIxC,iFACA,sBACE,kBAAIA,WAAW,MAAf,mBAAwC,+BAAGA,WAAW,MAAS,CAC3D,KAAQ,sCAD4B,qBAAxC,gBAGA,kBAAIA,WAAW,MAAf,wEACA,kBAAIA,WAAW,MAAf,mCAAwD,0BAAYA,WAAW,MAAvB,QAAxD,OAAiH,0BAAYA,WAAW,MAAvB,cAAjH,2BAEF,wDACA,8DAA6C,0BAAYA,WAAW,KAAvB,aAA7C,uBAA0H,0BAAYA,WAAW,KAAvB,UAA1H,uNAAoY,0BAAYA,WAAW,KAAvB,YAApY,sIAA+jB,0BAAYA,WAAW,KAAvB,UAA/jB,OAAynB,0BAAYA,WAAW,KAAvB,cAAznB,2BACA,mDACA,sBACE,kBAAIA,WAAW,MAAf,iCAAsD,0BAAYA,WAAW,MAAvB,6BAAtD,KACA,kBAAIA,WAAW,MAAf,oGAAyH,0BAAYA,WAAW,MAAvB,kBAAzH,KACA,kBAAIA,WAAW,MAAf,qJAA0K,0BAAYA,WAAW,MAAvB,kCAA1K,2BAAiR,0BAAYA,WAAW,MAAvB,eAAjR,qBAEF,sDACA,gHAA+F,0BAAYA,WAAW,KAAvB,yEAA/F,sBAAuO,0BAAYA,WAAW,KAAvB,2DAAvO,cAAyV,0BAAYA,WAAW,KAAvB,YAAzV,yBAAua,0BAAYA,WAAW,KAAvB,cAAva,oGAAkkB,0BAAYA,WAAW,KAAvB,YAAlkB,oHACA,2DACA,iOAAgN,0BAAYA,WAAW,KAAvB,qBAAhN,4DAA0U,0BAAYA,WAAW,KAAvB,OAA1U,KACA,mLAAkK,0BAAYA,WAAW,KAAvB,YAAlK,uPAA8c,0BAAYA,WAAW,KAAvB,kBAA9c,6EACA,8CACA,qKACA,kPACA,kVAKJJ,EAAWK,gBAAiB","file":"component---src-texts-getstarted-code-guide-mdx-d467f9433cb9f2d5c321.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/jokul/jokul/portal/src/components/Layout/DocPageLayout.tsx\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1>{`Slik skriver du kode til Jøkul`}</h1>\n    <p>{`Jøkul er et designsystem: Et bibliotek med komponenter. Det gir litt andre utfordringer enn når du driver med klientutvikling. Her får du en liten innføring i hvordan vi jobber med Jøkul. Jøkul blir brukt til å utvikle mange forskjellige løsninger, og må derfor dekke forskjellige behov og ønsker. Det er viktig at vi balanserer funksjonalitet, brukervennlighet, pakkestørrelse og kompleksitet i hver enkelt komponent.`}</p>\n    <h2>{`Dette bruker vi`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`Språk: `}<a parentName=\"li\" {...{\n          \"href\": \"https://www.typescriptlang.org/docs/home.html\"\n        }}>{`Typescript`}</a></li>\n      <li parentName=\"ul\">{`JS-rammeverk: `}<a parentName=\"li\" {...{\n          \"href\": \"https://reactjs.org/\"\n        }}>{`React`}</a></li>\n      <li parentName=\"ul\">{`Byggverktøy: `}<a parentName=\"li\" {...{\n          \"href\": \"https://rollupjs.org/guide/en/\"\n        }}>{`Rollup`}</a>{` og `}<a parentName=\"li\" {...{\n          \"href\": \"https://gulpjs.com/\"\n        }}>{`Gulp`}</a></li>\n      <li parentName=\"ul\">{`Test runner: `}<a parentName=\"li\" {...{\n          \"href\": \"https://jestjs.io/\"\n        }}>{`Jest`}</a></li>\n      <li parentName=\"ul\">{`Testrammeverk: `}<a parentName=\"li\" {...{\n          \"href\": \"https://testing-library.com/docs/react-testing-library/intro\"\n        }}>{`React Testing Library`}</a></li>\n      <li parentName=\"ul\">{`CSS-preprosessor: `}<a parentName=\"li\" {...{\n          \"href\": \"https://sass-lang.com/\"\n        }}>{`Sass`}</a></li>\n      <li parentName=\"ul\">{`CSS-metodikk: `}<a parentName=\"li\" {...{\n          \"href\": \"http://getbem.com\"\n        }}>{`BEM`}</a></li>\n    </ul>\n    <h2>{`Slik setter du opp utviklingsmiljøet på din egen maskin`}</h2>\n    <ol>\n      <li parentName=\"ol\">{`Klon eller fork `}<a parentName=\"li\" {...{\n          \"href\": \"https://github.com/fremtind/jokul\"\n        }}>{`Jøkul-biblioteket`}</a>{` fra GitHub.`}</li>\n      <li parentName=\"ol\">{`Lag en ny branch og gi den et fornuftig navn etter hva du skal lage.`}</li>\n      <li parentName=\"ol\">{`Bygg prosjektet med kommandoene `}<inlineCode parentName=\"li\">{`yarn`}</inlineCode>{` og `}<inlineCode parentName=\"li\">{`yarn build`}</inlineCode>{` fra rot i prosjektet.`}</li>\n    </ol>\n    <h2>{`Slik har vi organisert pakkene`}</h2>\n    <p>{`Alle komponentene er organisert under `}<inlineCode parentName=\"p\">{`/packages`}</inlineCode>{`. De som slutter på `}<inlineCode parentName=\"p\">{`-react`}</inlineCode>{` er React-pakker. De som ikke har en endelse, er stilpakker. Stilpakkene skal være generelle og du kan bruke dem uten noe JavaScript-rammeverk. Hver enkelt pakke inneholder et eksempel, som du kan kan starte med `}<inlineCode parentName=\"p\">{`yarn dev`}</inlineCode>{` fra hver enkelt pakke. Noen av stilpakkene mangler eksempler, fordi det kreves en del JavaScript for å få eksempelet til å kjøre. `}<inlineCode parentName=\"p\">{`Select`}</inlineCode>{` og `}<inlineCode parentName=\"p\">{`Datepicker`}</inlineCode>{` er eksempler på dette.`}</p>\n    <h2>{`Slik lager du en ny pakke`}</h2>\n    <ol>\n      <li parentName=\"ol\">{`Gå til rot og kjør kommandoen `}<inlineCode parentName=\"li\">{`lerna create <pakke-navn>`}</inlineCode>{`.`}</li>\n      <li parentName=\"ol\">{`Du får noen spørsmål om pakken. Fyll ut så godt du kan. Husk at navnet på pakken skal starte med `}<inlineCode parentName=\"li\">{`@fremtind/jkl-`}</inlineCode>{`.`}</li>\n      <li parentName=\"ol\">{`Når pakken er opprettet, finner du en pakke av typen du skal lage (stil eller React). Kopier de script- og oppsettfilene du trenger, for eksempel `}<inlineCode parentName=\"li\">{`tsconfig-for-declarations.json`}</inlineCode>{` for React-pakker eller `}<inlineCode parentName=\"li\">{`gulpfile.js`}</inlineCode>{` for stilpakker.`}</li>\n    </ol>\n    <h2>{`Slik lenker du pakker sammen`}</h2>\n    <p>{`Hvis du vil legge til en pakke i en annen, kan du fra hvor som helst i prosjektet kjøre `}<inlineCode parentName=\"p\">{`lerna add <pakke-som-skal-legges-til> --scope=<pakken-den-skal-inn-i>`}</inlineCode>{`. For eksempel vil `}<inlineCode parentName=\"p\">{`lerna add @fremtind/jkl-core scope=@fremtind/jkl-button`}</inlineCode>{` legge til `}<inlineCode parentName=\"p\">{`jkl-core`}</inlineCode>{` som en avhengighet i `}<inlineCode parentName=\"p\">{`jkl-button`}</inlineCode>{`-pakken. Når du legger til avhengigheter på denne måten, kan Lerna bruke den lokale versjonen av `}<inlineCode parentName=\"p\">{`jkl-core`}</inlineCode>{` i stedet for å laste ned fra NPM, slik at du kan utvikle raskere. Dette fungerer bare for andre pakker i Jøkul.`}</p>\n    <h2>{`Slik legger du til en avhengighet`}</h2>\n    <p>{`Det finnes avhengigheter på ulike nivåer i Jøkul. Globale avhengigheter, for eksempel de som trengs til å kjøre en byggejobb, ligger på rotnivå. Du kan legge til en ny pakke på rotnivå, med kommandoen `}<inlineCode parentName=\"p\">{`yarn add pakke -W`}</inlineCode>{`. For å legge til som en utviklingsavhengighet bruker du `}<inlineCode parentName=\"p\">{`-DW`}</inlineCode>{`.`}</p>\n    <p>{`Lokale avhengigheter, som trengs for at en pakke skal fungere i bruk, legger vi vanligvis på pakkenivå. Se \"Slik lenker du pakker sammen\". Bruk kommandoen `}<inlineCode parentName=\"p\">{`yarn add`}</inlineCode>{` for å legge til pakker som ikke er en del av Jøkul. Før du gjør det, er det lurt å tenke på om de skal sendes med komponenten eller om brukeren av komponenten har ansvaret for å ha avhengigheten i sitt prosjekt. React bør for eksempel være en `}<inlineCode parentName=\"p\">{`peerDependency`}</inlineCode>{`, slik at brukeren ikke ender opp med flere utgaver av React i sin pakke.`}</p>\n    <h2>{`Ende til ende tester`}</h2>\n    <p>{`Hvis du lager en ny komponent, så kan du installere Cypress lokalt og utvikle ny integrasjons- og visuell regresjonstest av komponenten din.`}</p>\n    <p>{`Hvis du gjør endring i en komponent som har visuell regresjonstest, sørg for at endringen din er ønsket og forventet på alle støttede plattformer. Så sletter du de eksisterende snapshotene av komponenten i prosjektet.`}</p>\n    <p>{`Grunnen til at vi ikke vil ha lokale snapshots inn, er fordi vi ønsker at konteineren som kjører testene på vår CI server er fastiten. Den vil ikke rendere 100% likt som din maskin, så får å unngå konflikter lar vi CI serveren styre. Den vil commite inn de nye eller oppdaterte snapshotene hvis testene passerer.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}