{"version":3,"sources":["webpack:///../node_modules/nanoid/index.browser.js","webpack:///../packages/radio-button-react/src/RadioButtonOption.tsx","webpack:///../packages/radio-button-react/src/RadioButtons.tsx","webpack:///../packages/radio-button-react/documentation/Example.tsx","webpack:///../packages/radio-button-react/documentation/RadioButton.mdx"],"names":["nanoid","size","arguments","length","undefined","id","bytes","crypto","getRandomValues","Uint8Array","byte","toString","toUpperCase","RadioButtonOption","value","label","onChange","name","inline","checked","invalid","forceCompact","inverted","inputId","useState","componentClassName","classNames","className","type","data-testid","htmlFor","aria-hidden","RadioButtons","legend","choices","selectedValue","helpLabel","errorLabel","variant","map","getValuePair","key","Example","boolValues","choiceValues","React","setSelectedValue","e","target","_frontmatter","makeShortcode","props","console","warn","Ingress","ComponentExample","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","component","knobs","boolProps","choiceProps","values","defaultValue","parentName","isMDXComponent"],"mappings":"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","file":"component---packages-radio-button-react-documentation-radio-button-mdx-f560e833229f1c8dc662.js","sourcesContent":["import \"core-js/modules/es6.regexp.to-string\";\nimport \"core-js/modules/es6.object.to-string\";\nimport \"core-js/modules/es6.typed.uint8-array\";\n// This file replaces `index.js` in bundlers like webpack or Rollup,\n// according to `browser` config in `package.json`.\nimport { urlAlphabet } from './url-alphabet/index.js';\n\nif (process.env.NODE_ENV !== 'production') {\n  // All bundlers will remove this block in the production bundle.\n  if (typeof navigator !== 'undefined' && navigator.product === 'ReactNative' && typeof crypto === 'undefined') {\n    throw new Error('React Native does not have a built-in secure random generator. ' + 'If you don’t need unpredictable IDs use `nanoid/non-secure`. ' + 'For secure IDs, import `react-native-get-random-values` ' + 'before Nano ID. If you use Expo, install `expo-random` ' + 'and use `nanoid/async`.');\n  }\n\n  if (typeof msCrypto !== 'undefined' && typeof crypto === 'undefined') {\n    throw new Error('Add `if (!window.crypto) window.crypto = window.msCrypto` ' + 'before Nano ID to fix IE 11 support');\n  }\n\n  if (typeof crypto === 'undefined') {\n    throw new Error('Your browser does not have secure random generator. ' + 'If you don’t need unpredictable IDs, you can use nanoid/non-secure.');\n  }\n}\n\nvar random = function random(bytes) {\n  return crypto.getRandomValues(new Uint8Array(bytes));\n};\n\nvar customRandom = function customRandom(alphabet, size, getRandom) {\n  // First, a bitmask is necessary to generate the ID. The bitmask makes bytes\n  // values closer to the alphabet size. The bitmask calculates the closest\n  // `2^31 - 1` number, which exceeds the alphabet size.\n  // For example, the bitmask for the alphabet size 30 is 31 (00011111).\n  // `Math.clz32` is not used, because it is not available in browsers.\n  var mask = (2 << Math.log(alphabet.length - 1) / Math.LN2) - 1; // Though, the bitmask solution is not perfect since the bytes exceeding\n  // the alphabet size are refused. Therefore, to reliably generate the ID,\n  // the random bytes redundancy has to be satisfied.\n  // Note: every hardware random generator call is performance expensive,\n  // because the system call for entropy collection takes a lot of time.\n  // So, to avoid additional system calls, extra bytes are requested in advance.\n  // Next, a step determines how many random bytes to generate.\n  // The number of random bytes gets decided upon the ID size, mask,\n  // alphabet size, and magic number 1.6 (using 1.6 peaks at performance\n  // according to benchmarks).\n  // `-~f => Math.ceil(f)` if f is a float\n  // `-~i => i + 1` if i is an integer\n\n  var step = -~(1.6 * mask * size / alphabet.length);\n  return function () {\n    var id = '';\n\n    while (true) {\n      var bytes = getRandom(step); // A compact alternative for `for (var i = 0; i < step; i++)`.\n\n      var j = step;\n\n      while (j--) {\n        // Adding `|| ''` refuses a random byte that exceeds the alphabet size.\n        id += alphabet[bytes[j] & mask] || ''; // `id.length + 1 === size` is a more compact option.\n\n        if (id.length === +size) return id;\n      }\n    }\n  };\n};\n\nvar customAlphabet = function customAlphabet(alphabet, size) {\n  return customRandom(alphabet, size, random);\n};\n\nvar nanoid = function nanoid() {\n  var size = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 21;\n  var id = '';\n  var bytes = crypto.getRandomValues(new Uint8Array(size)); // A compact alternative for `for (var i = 0; i < step; i++)`.\n\n  while (size--) {\n    // It is incorrect to use bytes exceeding the alphabet size.\n    // The following mask reduces the random byte in the 0-255 value\n    // range to the 0-63 value range. Therefore, adding hacks, such\n    // as empty string fallback or magic numbers, is unneccessary because\n    // the bitmask trims bytes down to the alphabet size.\n    var byte = bytes[size] & 63;\n\n    if (byte < 36) {\n      // `0-9a-z`\n      id += byte.toString(36);\n    } else if (byte < 62) {\n      // `A-Z`\n      id += (byte - 26).toString(36).toUpperCase();\n    } else if (byte < 63) {\n      id += '_';\n    } else {\n      id += '-';\n    }\n  }\n\n  return id;\n};\n\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random };","import React, { ChangeEventHandler, useState } from \"react\";\nimport classNames from \"classnames\";\nimport { nanoid } from \"nanoid\";\n\ninterface Props {\n    value: string;\n    label: string;\n    name: string;\n    onChange: ChangeEventHandler<HTMLInputElement>;\n    inline?: boolean;\n    checked?: boolean;\n    invalid?: boolean;\n    forceCompact?: boolean;\n    inverted?: boolean;\n}\n\nexport const RadioButtonOption = ({\n    value,\n    label,\n    onChange,\n    name = \"\",\n    inline = false,\n    checked,\n    invalid = false,\n    forceCompact,\n    inverted,\n}: Props) => {\n    const [inputId] = useState(`jkl-radio-button-${nanoid(8)}`);\n    const componentClassName = classNames(\"jkl-radio-button\", {\n        \"jkl-radio-button--compact\": forceCompact,\n        \"jkl-radio-button--inline\": inline,\n        \"jkl-radio-button--error\": invalid,\n        \"jkl-radio-button--inverted\": inverted,\n    });\n\n    return (\n        <div className={componentClassName}>\n            <input\n                id={inputId}\n                className=\"jkl-radio-button__input\"\n                type=\"radio\"\n                name={name}\n                value={value}\n                onChange={onChange}\n                checked={checked}\n            />\n            <label data-testid=\"jkl-radio-button__label-tag\" htmlFor={inputId} className=\"jkl-radio-button__label\">\n                <span aria-hidden className=\"jkl-radio-button__dot\" />\n                <span className=\"jkl-radio-button__text\">{label}</span>\n            </label>\n        </div>\n    );\n};\n","import React, { ChangeEventHandler } from \"react\";\nimport { FieldGroup } from \"@fremtind/jkl-field-group-react\";\nimport { LabelVariant, ValuePair, getValuePair } from \"@fremtind/jkl-core\";\nimport { RadioButtonOption } from \"./RadioButtonOption\";\n\ninterface Props {\n    name: string;\n    legend: string;\n    choices: Array<string | ValuePair>;\n    selectedValue?: string;\n    inline?: boolean;\n    onChange: ChangeEventHandler<HTMLInputElement>;\n    helpLabel?: string;\n    errorLabel?: string;\n    variant?: LabelVariant;\n    forceCompact?: boolean;\n    className?: string;\n    inverted?: boolean;\n}\n\nexport const RadioButtons = ({\n    name,\n    legend,\n    choices,\n    selectedValue,\n    onChange,\n    inline = false,\n    helpLabel,\n    errorLabel,\n    variant,\n    forceCompact,\n    className,\n    inverted,\n}: Props) => (\n    <FieldGroup\n        legend={legend}\n        helpLabel={helpLabel}\n        errorLabel={errorLabel}\n        variant={variant}\n        forceCompact={forceCompact}\n        className={className}\n    >\n        {choices.map(getValuePair).map(({ label, value }) => (\n            <RadioButtonOption\n                key={value}\n                name={name}\n                value={value}\n                label={label}\n                inline={inline}\n                checked={value === selectedValue}\n                onChange={onChange}\n                invalid={!!errorLabel}\n                forceCompact={forceCompact}\n                inverted={inverted}\n            />\n        ))}\n    </FieldGroup>\n);\n","import React from \"react\";\nimport { LabelVariant } from \"@fremtind/jkl-core\";\nimport { ExampleComponentProps } from \"@fremtind/jkl-portal-components\";\nimport { RadioButtons } from \"../src\";\n\nconst Example = ({ boolValues, choiceValues }: ExampleComponentProps) => {\n    const choices = [\n        \"Jeg vil at dere skal ringe meg\",\n        \"Nei\",\n        \"Jeg vil at dere sender et brev til meg til min registrerte adresse fra folkeregisteret\",\n        \"Jeg vil at dere skal sende en e-post\",\n    ];\n    const [selectedValue, setSelectedValue] = React.useState(\"Yes\");\n    const errorLabel = boolValues && boolValues[\"Med feil\"] ? \"Her er det noe feil\" : undefined;\n    const variant = choiceValues && choiceValues[\"Variant\"] ? (choiceValues[\"Variant\"] as LabelVariant) : \"medium\";\n\n    return (\n        <RadioButtons\n            legend=\"Hvordan vil du bli kontaktet?\"\n            name=\"likesradiobuttons\"\n            choices={choices}\n            inline={boolValues && boolValues[\"Inline\"]}\n            forceCompact={boolValues && boolValues[\"Kompakt\"]}\n            selectedValue={selectedValue}\n            onChange={(e) => setSelectedValue(e.target.value)}\n            helpLabel=\"Hvis du trenger hjelp, kan du kontakte supporten vår\"\n            errorLabel={errorLabel}\n            variant={variant}\n            inverted={boolValues && boolValues[\"Invertert\"]}\n        />\n    );\n};\n\nexport default Example;\n","import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/jokul/jokul/portal/src/components/Layout/DocPageLayout.tsx\";\nimport Example from \"./Example\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst Ingress = makeShortcode(\"Ingress\");\nconst ComponentExample = makeShortcode(\"ComponentExample\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <Ingress mdxType=\"Ingress\">\n    Vi bruker radioknapper når vi vil at brukeren skal velge ett av flere alternativ. Bruk helst radioknapper for inntil\n    fire alternativ. Hvis du trenger å gi brukeren flere muligheter enn det, er det ofte bedre med en nedtrekksliste.\n    </Ingress>\n    <ComponentExample component={Example} knobs={{\n      boolProps: [\"Kompakt\", \"Inline\", \"Med feil\", \"Invertert\"],\n      choiceProps: [{\n        name: \"Variant\",\n        values: [\"small\", \"medium\", \"large\"],\n        defaultValue: 1\n      }]\n    }} mdxType=\"ComponentExample\" />\n    <p>{`Over radioknappene setter vi inn en tydelig overskrift, som forteller hva det er brukeren skal velge mellom. I tillegg skal hver radioknapp ha en kort og tydelig ledetekst til høyre for knappen, som beskriver alternativet.`}</p>\n    <h2>{`Bruk`}</h2>\n    <p>{`En gruppe radioknapper kan enten settes opp under eller ved siden av hverandre. Det er mest brukervennlig å sette dem opp vertikalt.`}</p>\n    <p>{`En av radioknappene bør alltid være valgt på forhånd. Det kan være det alternativet som de fleste vil velge, eller det som har minst følger for brukeren. I noen tilfeller kan det være viktig at brukeren selv velger, uten å bli påvirket av et forhåndsvalg. Da kan vi sette opp radioknapper uten forhåndsvalg. `}<strong parentName=\"p\">{`Vis eksempler på det`}</strong></p>\n    <h2>{`Tekst og validering`}</h2>\n    <p>{`Bruk prinsippene for skjemadesign når du velger størrelse på overskriften til en gruppe radioknapper. Skriv en kort og tydelig overskrift, som forteller hva brukeren skal velge. Hvis det er behov for det, kan vi legge inn en hjelpetekst under gruppen, for å forklare mer.`}</p>\n    <p>{`Hvis radioknappene ikke validerer, viser systemet en feilmelding som forklarer hva som er galt. Feilmeldingen erstatter en eventuell hjelpetekst, så den må eventuelt gjenta det viktigste fra hjelpeteksten.`}</p>\n    <p>{`Eksempel fra helsevurdering:\n`}<strong parentName=\"p\">{`Hjelpetekst`}</strong>{`: `}<em parentName=\"p\">{`Velg om du har hatt diagnosen de siste 5, 10 eller 15 årene`}</em>{`. `}<strong parentName=\"p\">{`Feilmelding`}</strong>{`: `}<em parentName=\"p\">{`Du har ikke valgt hvor lenge du har hatt diagnosen`}</em>{`.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}