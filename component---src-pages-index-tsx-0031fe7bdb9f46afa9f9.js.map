{"version":3,"sources":["webpack:///./src/components/VisibleDetector/VisibleDetector.tsx","webpack:///./src/components/Delaytext/DelayText.tsx","webpack:///./src/components/Card/Card.tsx","webpack:///./src/components/Card/CardList.tsx","webpack:///./src/components/PrincipleDiamond/PureCanvas.tsx","webpack:///./src/components/PrincipleDiamond/PrincipleDiamond.tsx","webpack:///./src/pages/index.tsx"],"names":["VisibleDetector","forwardRef","ref","onEnter","onLeave","render","threshold","useState","isInViewport","setIsInViewport","internalRef","useRef","targetRef","options","rootMargin","useIntersectionObserver","entries","isIntersecting","some","entry","console","log","displayName","DelayText","text","delay","children","index","setIndex","isRunning","setIsRunning","charactersAnimated","setCharactersAnimated","hidden","noiseMap","Array","from","length","map","Math","random","textRef","filteredText","useMemo","split","filter","char","i","useEffect","elRef","current","parentEl","parentElement","elHeight","offsetHeight","parseInt","window","getComputedStyle","getPropertyValue","top","left","behavior","setTimeout","scrollY","scrollTo","onEnd","lolRandom","callback","savedCallback","id","setInterval","clearInterval","useInterval","delayTextClassName","classNames","textWrapper","textClassName","childrenClassName","className","c","key","style","transitionDelay","onTransitionEnd","Card","heading","link","arrow","startsWith","onClick","navigate","CardList","vertical","componentClassNames","PureCanvas","width","height","contextRef","node","getContext","States","PrincipleDiamond","props","generateClasses","baseClass","principleState","saveContext","bind","draw","getScale","lastMinScale","lastMaxScale","updatedScaleAt","tileSize","tiles","ctx","size","componentDidMount","this","minScale","maxScale","componentDidUpdate","nextProps","Date","now","componentWillUnmount","animationTimeout","clearTimeout","canvas","amount","t","clearRect","fillStyle","time","scale","x","y","position","abs","sin","fillRect","requestAnimationFrame","type","React","Component","defaultProps","IndexPage","location","setPrincipleState","onPrincipleStateChange","state","isFrontpage","backgroundImage","withPrefix"],"mappings":"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","file":"component---src-pages-index-tsx-0031fe7bdb9f46afa9f9.js","sourcesContent":["import React, { useRef, useState, forwardRef } from \"react\";\nimport { useIntersectionObserver } from \"@fremtind/jkl-react-hooks\";\n\ninterface Props {\n    render: Function;\n    onEnter?: Function;\n    onLeave?: Function;\n    threshold?: Array<number>;\n}\n\nexport const VisibleDetector: React.FC<Props> = forwardRef<HTMLElement, Props>(\n    ({ onEnter, onLeave, render, threshold = [0.7] }, ref) => {\n        const [isInViewport, setIsInViewport] = useState(false);\n        const internalRef = useRef<HTMLElement>(null);\n        const targetRef = (ref as React.RefObject<HTMLElement>) || internalRef;\n\n        const onIntersect = (entries: IntersectionObserverEntry[]) => {\n            // check if element is intersecting\n            const isIntersecting = entries.some((entry) => entry.isIntersecting);\n\n            // trigger onLeave or onEnter if element left or entered\n            if (isInViewport && !isIntersecting && onLeave) {\n                onLeave(entries);\n            } else if (!isInViewport && !isIntersecting && onLeave) {\n                onLeave(entries);\n            } else if (!isInViewport && isIntersecting && onEnter) {\n                onEnter(entries);\n            }\n\n            // update state\n            setIsInViewport(isIntersecting);\n        };\n\n        const fallback = () => console.log(\"IntersectionObserver not supported\");\n        const options = { rootMargin: \"0px\", threshold };\n\n        useIntersectionObserver(targetRef, onIntersect, fallback, options);\n\n        return render(targetRef);\n    },\n);\n\nVisibleDetector.displayName = \"VisibleDetector\";\n","import React, { useState, useEffect, useRef, useMemo } from \"react\";\nimport classNames from \"classnames\";\nimport \"./delay-text.scss\";\nimport { VisibleDetector } from \"../VisibleDetector\";\n\nconst useInterval = (callback: () => void, delay: number | null) => {\n    const savedCallback = useRef<() => void>();\n\n    useEffect(() => {\n        savedCallback.current = callback;\n    });\n\n    //@ts-ignore\n    useEffect(() => {\n        const tick = () => {\n            if (savedCallback && savedCallback.current) {\n                savedCallback.current();\n            }\n        };\n\n        if (delay !== null) {\n            const id = setInterval(tick, delay);\n            return () => clearInterval(id);\n        }\n    }, [delay]);\n};\n\ninterface Props {\n    text: string;\n    delay: number;\n    hidden?: boolean;\n    ref: React.MutableRefObject<HTMLDivElement | null>;\n}\n\nexport const DelayText: React.FunctionComponent<Props> = ({ text, delay, children }) => {\n    const [index, setIndex] = useState(-1);\n    const [isRunning, setIsRunning] = useState(true);\n    const [charactersAnimated, setCharactersAnimated] = useState(0);\n    const [hidden] = useState(false);\n    const noiseMap = Array.from(new Array(text.length)).map(() => Math.random() * 500 + 250);\n    const textRef = useRef();\n\n    const filteredText = useMemo(() => {\n        const splitText = text.split(\"\");\n        return splitText.filter((char, i) => {\n            return i <= index;\n        });\n    }, [index, text]);\n\n    const onEnd = () => {\n        const elRef = (textRef.current as unknown) as {\n            parentElement: HTMLElement;\n            offsetHeight: number;\n            getPropertyValue: (s: string) => number;\n        };\n\n        if (!elRef) {\n            return;\n        }\n\n        const parentEl = elRef.parentElement;\n\n        let elHeight = elRef.offsetHeight;\n        //@ts-ignore\n        elHeight += parseInt(window.getComputedStyle(elRef).getPropertyValue(\"margin-top\"));\n        //@ts-ignore\n        elHeight += parseInt(window.getComputedStyle(elRef).getPropertyValue(\"margin-bottom\"));\n        //@ts-ignore\n        elHeight += parseInt(window.getComputedStyle(elRef).getPropertyValue(\"padding-top\"));\n        //@ts-ignore\n        elHeight += parseInt(window.getComputedStyle(elRef).getPropertyValue(\"margin-bottom\"));\n        elHeight += parseInt(window.getComputedStyle(parentEl).getPropertyValue(\"padding-top\"));\n\n        const options: ScrollToOptions = {\n            top: elHeight,\n            left: 0,\n            behavior: \"smooth\",\n        };\n\n        window.setTimeout(() => {\n            if (window.scrollY > elHeight / 2) {\n                return;\n            }\n            window.scrollTo(options);\n        }, 500);\n    };\n\n    useEffect(() => {\n        if (filteredText.length === text.length) {\n            onEnd();\n        }\n    }, [filteredText, text]);\n\n    const lolRandom = Math.random() * delay + delay / 2;\n\n    useInterval(\n        () => {\n            if (index >= text.length) {\n                setIsRunning(false);\n            } else {\n                setIndex(index + 1);\n            }\n        },\n        isRunning ? (lolRandom < 50 ? delay : lolRandom) : null,\n    );\n\n    const onLeft = () => {\n        //setHidden(true);\n    };\n\n    const delayTextClassName = classNames(\"jkl-portal__delay-text\", {\n        \"jkl-portal__delay-text--hidden\": hidden,\n    });\n\n    const textWrapper = classNames(\"jkl-portal__delay-text__content\", \"jkl-portal__delay-text__underscore\", {\n        \"jkl-portal__delay-text__underscore--hidden\": !isRunning,\n    });\n\n    const textClassName = classNames(\"jkl-portal__delay-text__content-text\", {\n        // \"jkl-portal__delay-text__content-text--hidden\": !isRunning,\n    });\n\n    const childrenClassName = classNames(\"jkl-portal__delay-text__children\");\n\n    return (\n        <>\n            <VisibleDetector\n                onLeave={() => onLeft()}\n                threshold={[0]}\n                //@ts-ignore\n                ref={textRef}\n                //@ts-ignore\n                render={(ref) => (\n                    <div ref={ref} className={delayTextClassName}>\n                        <div className={textWrapper}>\n                            {filteredText.map((c, i) => (\n                                <span\n                                    key={c + i}\n                                    className={textClassName}\n                                    style={{ transitionDelay: noiseMap[i] + \"ms\" }}\n                                    onTransitionEnd={() => setCharactersAnimated(charactersAnimated + 1)}\n                                >\n                                    {c}\n                                </span>\n                            ))}\n                        </div>\n                    </div>\n                )}\n            />\n            <div className={childrenClassName}>{children}</div>\n        </>\n    );\n};\n","import React from \"react\";\nimport { navigate } from \"gatsby\";\nimport \"./card.scss\";\n\ninterface Props {\n    heading: string;\n    link: string;\n}\n\nexport const Card: React.FunctionComponent<Props> = ({ heading, link, children }) => {\n    // right arrow for internal links, up/right for external links:\n    const arrow = link.startsWith(\"http\") ? \"\\u2197\" : \"\\u2192\";\n    const handleClick = () => navigate(link);\n\n    return (\n        <button className=\"jkl-portal-card\" onClick={handleClick}>\n            <p className=\"jkl-portal-card__heading\">{heading}</p>\n            <div className=\"jkl-portal-card__content\">{children}</div>\n            <div className=\"jkl-portal-card__arrow\">{arrow}</div>\n        </button>\n    );\n};\n","import React from \"react\";\nimport classNames from \"classnames\";\nimport \"./card-list.scss\";\n\ninterface Props {\n    vertical?: boolean;\n}\n\nexport const CardList: React.FunctionComponent<Props> = ({ children, vertical }) => {\n    const componentClassNames = classNames(\"jkl-portal__card-list\", {\n        \"jkl-portal__card-list--vertical\": vertical,\n    });\n\n    return <div className={componentClassNames}>{children}</div>;\n};\n","import React from \"react\";\n\ninterface Props {\n    className?: string;\n    width: number;\n    height: number;\n    contextRef: (context: CanvasRenderingContext2D | null) => void;\n}\n\nexport function PureCanvas({ className, width, height, contextRef }: Props) {\n    return (\n        <canvas\n            className={className}\n            width={width}\n            height={height}\n            ref={(node) => (node ? contextRef(node.getContext(\"2d\")) : null)}\n        />\n    );\n}\n","import React from \"react\";\nimport classNames from \"classnames\";\nimport { PureCanvas } from \"./PureCanvas\";\nimport \"./princible-diamond.scss\";\n\nexport enum States {\n    None = 0,\n    Elevated = 1,\n    Movement = 2,\n    Clarity = 3,\n}\n\ninterface Props {\n    minScale: number;\n    maxScale: number;\n    principleState?: number;\n    type?: string;\n    tiles: number;\n}\n\nexport class PrincipleDiamond extends React.Component<Props> {\n    lastMinScale: number;\n    lastMaxScale: number;\n    updatedScaleAt: number;\n    animationTimeout?: number;\n    tileSize: number;\n    tiles: number;\n    ctx: CanvasRenderingContext2D | null;\n    size: number[];\n\n    constructor(props: Props) {\n        super(props);\n        this.saveContext = this.saveContext.bind(this);\n        this.draw = this.draw.bind(this);\n        this.generateClasses = this.generateClasses.bind(this);\n        this.getScale = this.getScale.bind(this);\n\n        this.lastMinScale = 0;\n        this.lastMaxScale = 0;\n        this.updatedScaleAt = 0;\n        this.tileSize = 0;\n        this.tiles = 7;\n        this.ctx = null;\n        this.size = [250, 250];\n    }\n\n    componentDidMount() {\n        this.lastMinScale = this.props.minScale;\n        this.lastMaxScale = this.props.maxScale;\n        this.updatedScaleAt = 0;\n    }\n\n    componentDidUpdate(nextProps: Props) {\n        if (this.props.minScale !== nextProps.minScale) {\n            // console.log(\"updating minScale\", this.lastMinScale, this.props.minScale, nextProps.minScale);\n            this.lastMinScale = this.props.minScale;\n            this.updatedScaleAt = Date.now();\n        }\n\n        if (this.props.maxScale !== nextProps.maxScale) {\n            // console.log(\"updating minScale\", this.lastMaxScale, this.props.maxScale, nextProps.maxScale);\n            this.lastMaxScale = this.props.maxScale;\n            this.updatedScaleAt = Date.now();\n        }\n\n        this.draw();\n    }\n\n    componentWillUnmount() {\n        if (this.animationTimeout) {\n            window.clearTimeout(this.animationTimeout);\n        }\n    }\n\n    saveContext(ctx: CanvasRenderingContext2D | null) {\n        if (!ctx) {\n            return;\n        }\n        this.ctx = ctx;\n        this.size = [this.ctx.canvas.width, this.ctx.canvas.height];\n        this.tileSize = this.size[0] / this.props.tiles;\n        this.draw();\n    }\n\n    getScale() {\n        const t = (Date.now() - this.updatedScaleAt) / 150;\n\n        let amount = t < 0 ? 0 : t;\n        amount = t > 1 ? 1 : t;\n\n        const lerpMin = this.lastMinScale + (this.props.minScale - this.lastMinScale) * amount;\n        const lerpMax = this.lastMaxScale + (this.props.maxScale - this.lastMaxScale) * amount;\n\n        return [lerpMin, lerpMax];\n    }\n\n    draw() {\n        const { tileSize, ctx, size } = this;\n        const { tiles } = this.props;\n\n        const width = size[0];\n        const height = size[1];\n\n        if (ctx) {\n            ctx.clearRect(0, 0, width, height);\n            ctx.fillStyle = \"black\";\n        }\n\n        const time = Date.now();\n\n        const scale = this.getScale();\n\n        for (let x = 0; x < tiles; x++) {\n            for (let y = 0; y < tiles; y++) {\n                const baseScale = Math.abs(Math.sin(time * 0.001 + x * 50 + y * 50));\n\n                const nBaseScale = baseScale * (scale[1] - scale[0]) + scale[0];\n                const position = tileSize;\n                const size = nBaseScale * tileSize;\n\n                ctx &&\n                    ctx.fillRect(\n                        x * position - size / 2 + tileSize / 2,\n                        y * position - size / 2 + tileSize / 2,\n                        size,\n                        size,\n                    );\n            }\n        }\n\n        if (this.animationTimeout) {\n            window.clearTimeout(this.animationTimeout);\n        }\n\n        this.animationTimeout = window.setTimeout(() => {\n            window.requestAnimationFrame(this.draw);\n        }, 1000 / 30);\n    }\n\n    generateClasses = (baseClass: string) =>\n        classNames(baseClass, {\n            [baseClass + \"--elevated\"]: this.props.principleState === 1,\n            [baseClass + \"--movement\"]: this.props.principleState === 2,\n            [baseClass + \"--clarity\"]: this.props.principleState === 3,\n        });\n\n    render() {\n        return (\n            <PureCanvas\n                className={this.generateClasses(\"jkl-portal-principle-diamond__\" + this.props.type)}\n                contextRef={this.saveContext}\n                height={250}\n                width={250}\n            />\n        );\n    }\n\n    static defaultProps = {\n        tiles: 7,\n        minScale: 0.2,\n        maxScale: 0.8,\n    };\n}\n","import React, { useState, useMemo } from \"react\";\nimport { Layout } from \"../components\";\nimport { DelayText } from \"../components/Delaytext\";\n\nimport \"@fremtind/jkl-core/core.min.css\";\nimport \"./style.scss\";\nimport \"./index.scss\";\nimport { CardList, Card } from \"../components/Card\";\nimport { PrincipleDiamond } from \"../components/PrincipleDiamond\";\nimport { VisibleDetector } from \"../components/VisibleDetector\";\nimport { withPrefix } from \"gatsby\";\n\n// TODO Try to use scrollY in stead of time when lerping diamonds\n// TODO Remove DelayText when it's done\n\ninterface Props {\n    location: Location;\n}\n\nconst IndexPage = ({ location }: Props) => {\n    const [principleState, setPrincipleState] = useState(0);\n\n    const onPrincipleStateChange = (state: number) => {\n        setPrincipleState(state);\n    };\n\n    const ref = React.useRef(null);\n\n    const onLeave = (state: number) => {\n        if (state === principleState) {\n            setPrincipleState(0);\n        }\n    };\n\n    const minScale = useMemo(() => {\n        switch (principleState) {\n            case 2:\n                return 0.2;\n            case 3:\n                return 0.1;\n            default:\n                return 1.1;\n        }\n    }, [principleState]);\n\n    const maxScale = useMemo(() => {\n        switch (principleState) {\n            case 2:\n                return 0.8;\n            case 3:\n                return 0.3;\n            default:\n                return 1.1;\n        }\n    }, [principleState]);\n\n    return (\n        <Layout location={location} isFrontpage>\n            <DelayText ref={ref} text=\"Jøkul Designsystem\" delay={100}>\n                <div className=\"jkl-portal-frontpage\">\n                    <section className=\"jkl-portal-frontpage__section-intro\">\n                        <h2 className=\"jkl-title-small\">\n                            Velkommen til Jøkul — designsystemet til Fremtind. Her har vi samlet alt du trenger for å\n                            lage løsninger i vår profil.\n                        </h2>\n                        <div className=\"jkl-portal-frontpage__section-intro--content\">\n                            <div className=\"jkl-portal-frontpage__section-intro--image-container\">\n                                <div\n                                    className=\"jkl-portal-frontpage__section-intro--image\"\n                                    style={{\n                                        backgroundImage: `url(${withPrefix(\"assets/img/frontpage.jpg\")})`,\n                                    }}\n                                />\n                            </div>\n                            <CardList vertical>\n                                <Card heading=\"For utviklere\" link=\"/komigang/utvikling\">\n                                    Her får du vite det mest grunnlegende før du setter i gang å bruke Jøkul.\n                                </Card>\n                                <Card heading=\"For designere\" link=\"/komigang/design\">\n                                    Her får du vite det mest grunnlegende før du setter i gang å bruke Jøkul.\n                                </Card>\n                                <Card heading=\"Prosessen\" link=\"/komigang/prosessen\">\n                                    Hvordan du kan jobbe med designsystemet.\n                                </Card>\n                            </CardList>\n                        </div>\n                    </section>\n\n                    <section className=\"jkl-portal-frontpage__section-principles\">\n                        <h2 className=\"jkl-title-small jkl-portal-frontpage__section-principles--heading\">\n                            Hovedprinsipper du kan tenke på for å designe en løsning til vår profil på best mulig måte:\n                        </h2>\n                        <div className=\"jkl-portal-frontpage__section-principles__diamond-container\">\n                            <div className=\"jkl-portal-principle-diamond\">\n                                <PrincipleDiamond\n                                    principleState={principleState}\n                                    minScale={minScale}\n                                    maxScale={maxScale}\n                                    type=\"diamond\"\n                                />\n                                <PrincipleDiamond\n                                    principleState={principleState}\n                                    minScale={minScale}\n                                    maxScale={maxScale}\n                                    type=\"shadow\"\n                                />\n                            </div>\n                        </div>\n                        <div className=\"jkl-portal-frontpage__section-principles__principle--container\">\n                            <VisibleDetector\n                                onEnter={() => onPrincipleStateChange(1)}\n                                onLeave={() => onLeave(1)}\n                                //@ts-ignore\n                                render={(ref) => (\n                                    <div ref={ref} className=\"jkl-portal-frontpage__section-principles__principle\">\n                                        <div className=\"jkl-portal-frontpage__section-principles__principle--container\">\n                                            <h1 className=\"jkl-title-large\">Elevasjon</h1>\n                                            <p className=\"jkl-lead\">\n                                                Vi løfter det som er viktig og skaper et naturlig informasjonshierarki.\n                                            </p>\n                                        </div>\n                                    </div>\n                                )}\n                            />\n                            <VisibleDetector\n                                onEnter={() => onPrincipleStateChange(2)}\n                                onLeave={() => onLeave(2)}\n                                //@ts-ignore\n                                render={(ref) => (\n                                    <div ref={ref} className=\"jkl-portal-frontpage__section-principles__principle\">\n                                        <div className=\"jkl-portal-frontpage__section-principles__principle--container\">\n                                            <h1 className=\"jkl-title-large\">Bevegelse</h1>\n                                            <p className=\"jkl-lead\">\n                                                Vi skal utforske, se fremover og være tilpasningsdyktige.\n                                            </p>\n                                        </div>\n                                    </div>\n                                )}\n                            />\n                            <VisibleDetector\n                                onEnter={() => onPrincipleStateChange(3)}\n                                onLeave={() => onLeave(3)}\n                                //@ts-ignore\n                                render={(ref) => (\n                                    <div ref={ref} className=\"jkl-portal-frontpage__section-principles__principle\">\n                                        <div className=\"jkl-portal-frontpage__section-principles__principle--container\">\n                                            <h1 className=\"jkl-title-large\">Klarhet</h1>\n                                            <p className=\"jkl-lead\">\n                                                Vi skal fremstå som ærlig og klar, med en tydelig og varm stemme\n                                            </p>\n                                        </div>\n                                    </div>\n                                )}\n                            />\n                        </div>\n                    </section>\n\n                    <section className=\"jkl-portal-frontpage__section-contribute\">\n                        <div className=\"jkl-portal-frontpage__section--wrapper\">\n                            <h2 className=\"jkl-title-small\">Bidra</h2>\n                            <p className=\"jkl-lead\">\n                                Jøkul er et levende designsystem. For at vi skal holde det relevant, er det viktig at\n                                alle som bruker designsystemet og merkevareprofilen vår hjelper til med å forbedre det\n                                vi har. Send oss en mail eller bidra i GitHub.\n                            </p>\n                            <p className=\"jkl-lead\">\n                                Finn oss i Teams kanalen “Support Designsystem” eller kom på åpent forum hver tirsdag 14\n                                til 14.30. Her informerer vi om hva som skjer og tar imot innspill.\n                            </p>\n                        </div>\n                    </section>\n                </div>\n            </DelayText>\n        </Layout>\n    );\n};\n\nexport default IndexPage;\n"],"sourceRoot":""}