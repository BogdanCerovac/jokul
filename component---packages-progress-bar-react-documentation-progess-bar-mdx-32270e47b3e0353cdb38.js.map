{"version":3,"sources":["webpack:///../packages/progress-bar-react/src/ProgressBar.tsx","webpack:///../packages/progress-bar-react/documentation/Example.tsx","webpack:///../packages/progress-bar-react/documentation/ProgessBar.mdx"],"names":["ProgressBar","current","total","progress","progressTextValue","className","width","role","aria-valuenow","aria-valuemin","aria-valuetext","aria-valuemax","data-testid","style","Example","useState","val","setVal","display","flexDirection","onClick","type","min","max","value","onChange","e","parseInt","target","_frontmatter","makeShortcode","name","props","console","warn","Ingress","ComponentExample","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","component","parentName","isMDXComponent"],"mappings":"4QAqBaA,EAAyB,SAAC,GAA+C,IARlD,EAAEC,EAASC,EAQNC,EAA6C,EAA7CA,SAAUC,EAAmC,EAAnCA,kBAAmBC,EAAgB,EAAhBA,UAC5DC,GAT4BL,GAAF,EASKE,GATHF,SAA0C,KAAjCC,EAAZ,EAAYA,OAAqC,EAAe,IAAVD,EAAiBC,GAS3F,KAEX,OACI,yBACIG,UAAS,oBAAsBA,EAC/BE,KAAK,cACLC,gBAAeL,EAASF,QACxBQ,gBAAe,EACfC,iBAAgBN,EAChBO,gBAAeR,EAASD,MACxBU,cAAY,oBAEZ,0BAAMP,UAAU,4BAA4BQ,MAAO,CAAEP,SAASM,cAAY,gCC7BzEE,G,oBAAU,WAAM,MACHC,mBAAS,IAAxBC,EADkB,KACbC,EADa,KAGzB,OACI,yBAAKJ,MAAO,CAAEP,MAAO,SACjB,kBAAC,EAAD,CAAaH,SAAU,CAAEF,QAASe,EAAKd,MAAO,OAC9C,yBAAKG,UAAU,qBAAqBQ,MAAO,CAAEK,QAAS,OAAQC,cAAe,WACzE,wBAAId,UAAU,UAAd,YACA,6BACI,4BAAQe,QAAS,kBAAMH,EAAOD,EAAM,GAAK,EAAI,EAAIA,EAAM,MAAvD,KACA,4BAAQI,QAAS,kBAAMH,EAAOD,EAAM,GAAK,IAAM,IAAMA,EAAM,MAA3D,MAEJ,2BACIX,UAAU,qBACVgB,KAAK,QACLC,IAAI,IACJC,IAAI,MACJC,MAAOR,EACPS,SAAU,SAACC,GAAD,OAAOT,EAAOU,SAASD,EAAEE,OAAOJ,MAAO,YCdxDK,EAAe,GAEtBC,EAAgB,SAAAC,GAAI,OAAI,SAA6BC,GAEzD,OADAC,QAAQC,KAAK,aAAeH,EAAO,2EAC5B,oBAASC,KAGZG,EAAUL,EAAc,WACxBM,EAAmBN,EAAc,oBACjCO,EAAc,CAClBR,gBAEIS,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGT,EACF,8BACD,OAAO,cAACM,EAAD,iBAAeD,EAAiBL,EAAhC,CAAuCS,WAAYA,EAAYC,QAAQ,cAI5E,cAACP,EAAD,CAASO,QAAQ,WAAjB,sGACA,cAACN,EAAD,CAAkBO,UAAW7B,EAAS4B,QAAQ,qBAC9C,4JACA,qCACA,wBACE,oBAAIE,WAAW,MAAf,gFAMNJ,EAAWK,gBAAiB","file":"component---packages-progress-bar-react-documentation-progess-bar-mdx-32270e47b3e0353cdb38.js","sourcesContent":["import React, { FC } from \"react\";\n\ninterface Progress {\n    current: number;\n    total: number;\n}\n\ninterface Props {\n    progress: Progress;\n    className?: string;\n    progressTextValue?: string;\n}\n\nexport const calculatePercentage = ({ current, total }: Progress) => (total === 0 ? 0 : (current * 100) / total);\n\n/**\n *  Jøkul ProgressBar component\n * @param progress\n * @param className\n * @param progressTextValue if set screen readers will read this string, if not the percentage is read\n */\nexport const ProgressBar: FC<Props> = ({ progress, progressTextValue, className }) => {\n    const width = `${calculatePercentage(progress)}%`;\n\n    return (\n        <div\n            className={`jkl-progress-bar ${className}`}\n            role=\"progressbar\"\n            aria-valuenow={progress.current}\n            aria-valuemin={0}\n            aria-valuetext={progressTextValue}\n            aria-valuemax={progress.total}\n            data-testid=\"jkl-progress-bar\"\n        >\n            <span className=\"jkl-progress-bar__tracker\" style={{ width }} data-testid=\"jkl-progress-bar__tracker\" />\n        </div>\n    );\n};\n","import React, { useState } from \"react\";\nimport { ProgressBar } from \"../src\";\nimport \"@fremtind/jkl-progress-bar/progress-bar.css\";\nimport \"@fremtind/jkl-core/core.min.css\";\n\nexport const Example = () => {\n    const [val, setVal] = useState(50);\n\n    return (\n        <div style={{ width: \"100%\" }}>\n            <ProgressBar progress={{ current: val, total: 100 }} />\n            <div className=\"jkl-spacing--top-2\" style={{ display: \"flex\", flexDirection: \"column\" }}>\n                <h2 className=\"jkl-h3\">Controls</h2>\n                <div>\n                    <button onClick={() => setVal(val - 10 < 0 ? 0 : val - 10)}>-</button>\n                    <button onClick={() => setVal(val + 10 > 100 ? 100 : val + 10)}>+</button>\n                </div>\n                <input\n                    className=\"jkl-spacing--top-2\"\n                    type=\"range\"\n                    min=\"0\"\n                    max=\"100\"\n                    value={val}\n                    onChange={(e) => setVal(parseInt(e.target.value, 10))}\n                ></input>\n            </div>\n        </div>\n    );\n};\n","import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/jokul/jokul/portal/src/components/Layout/DocPageLayout.tsx\";\nimport { Example } from \"./Example.tsx\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst Ingress = makeShortcode(\"Ingress\");\nconst ComponentExample = makeShortcode(\"ComponentExample\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <Ingress mdxType=\"Ingress\">Fremdriftsindikator kan brukes for å vise brukeren hvor langt man er kommet i en lengre operasjon.</Ingress>\n    <ComponentExample component={Example} mdxType=\"ComponentExample\" />\n    <p>{`Korte oppgaver bør ikke ha fremdriftsindikator, da det kan virke mot sin hensikt. Lengre prosesser kan bruke fremdriftsindikator.`}</p>\n    <h3>{`Eksempler`}</h3>\n    <ul>\n      <li parentName=\"ul\">{`Langt skjema med 50 spørsmål vi forventer det tar tid å komme seg igjennom`}</li>\n    </ul>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}