{"version":3,"sources":["webpack:///../packages/accordion-react/src/ExpandArrow.tsx","webpack:///../packages/accordion-react/src/AccordionItem.tsx","webpack:///../packages/accordion-react/src/Accordion.tsx","webpack:///../packages/accordion-react/documentation/Example.tsx","webpack:///../packages/accordion-react/documentation/accordion.mdx"],"names":["ExpandArrow","expanded","className","componentClassName","classNames","viewBox","fill","xmlns","d","AccordionItem","children","title","startExpanded","useState","isOpen","setIsOpen","elementRef","useAnimatedHeight","data-testid","type","ref","hidden","onToggle","Accordion","inverted","Example","boolValues","_frontmatter","makeShortcode","name","props","console","warn","Ingress","ComponentExample","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","component","knobs","boolProps","isMDXComponent"],"mappings":"iSAQaA,EAA+B,SAAC,GAAoC,QAAlCC,gBAAkC,SAAhBC,EAAgB,EAAhBA,UACvDC,EAAqBC,IACvB,CACI,oBAAoB,EACpB,6BAA8BH,GAElCC,GAEJ,OACI,0BAAMA,UAAWC,GACb,yBAAKD,UAAU,yBAAyBG,QAAQ,YAAYC,KAAK,OAAOC,MAAM,8BAC1E,0BACIC,EAAE,6KACFF,KAAK,kBAGb,yBAAKJ,UAAU,uBAAuBG,QAAQ,YAAYC,KAAK,OAAOC,MAAM,8BACxE,0BACIC,EAAE,gKACFF,KAAK,oBCXlB,SAASG,EAAT,GAAqF,IAA5DC,EAA4D,EAA5DA,SAAUC,EAAkD,EAAlDA,MAAOT,EAA2C,EAA3CA,UAA2C,IAAhCU,qBAAgC,WAC5DC,mBAASD,GAA9BE,EADiF,KACzEC,EADyE,KAEjFC,EAAcC,YAAkBH,GAFiD,GAGlFX,EAAqBC,IAAW,qBAAsBF,EAAW,CACnE,+BAAgCY,IAKpC,OACI,yBAAKI,cAAY,qBAAqBhB,UAAWC,GAC7C,4BAAQD,UAAU,4BAA4BiB,KAAK,UAC/C,0BAAMjB,UAAU,kCAAkCS,GAClD,kBAAC,EAAD,CAAaT,UAAU,mCAAmCD,SAAUa,KAExE,kBAAC,IAAD,CACIM,IAAKJ,EACLE,cAAY,sCACZhB,UAAU,sCACVmB,QAASP,EACTQ,SAbK,kBAAMP,GAAWD,KAetB,yBAAKZ,UAAU,+BAA+BQ,KC/BvD,IAAMa,EAA6B,SAAC,GAA2C,IAAzCb,EAAyC,EAAzCA,SAAUc,EAA+B,EAA/BA,SAA+B,IAArBtB,iBAAqB,MAAT,GAAS,EAClF,OACI,yBACIgB,cAAY,gBACZhB,UAAS,kBAAmBsB,EAAW,0BAA4B,IAA1D,IAAgEtB,GAExEQ,I,YCNAe,G,UAA2C,SAAC,GAAD,IAAGC,EAAH,EAAGA,WAAH,OACpD,kBAAC,EAAD,CAAWF,SAAUE,GAAcA,EAAU,WACzC,kBAACjB,EAAD,CAAeE,MAAM,kCACjB,kBAAC,IAAD,KACI,kBAAC,IAAD,6CACA,kBAAC,IAAD,4FACA,kBAAC,IAAD,2EAJR,qIASA,kBAACF,EAAD,CAAeE,MAAM,kCAArB,kUAMA,kBAACF,EAAD,CAAeE,MAAM,gCAArB,4TCfKgB,EAAe,GAEtBC,EAAgB,SAAAC,GAAI,OAAI,SAA6BC,GAEzD,OADAC,QAAQC,KAAK,aAAeH,EAAO,2EAC5B,oBAASC,KAGZG,EAAUL,EAAc,WACxBM,EAAmBN,EAAc,oBACjCO,EAAc,CAClBR,gBAEIS,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGT,EACF,8BACD,OAAO,cAACM,EAAD,iBAAeD,EAAiBL,EAAhC,CAAuCS,WAAYA,EAAYC,QAAQ,cAI5E,cAACP,EAAD,CAASO,QAAQ,WAAjB,iLAIA,cAACN,EAAD,CAAkBO,UAAWhB,EAASiB,MAAO,CAC3CC,UAAW,CAAC,cACXH,QAAQ,qBACX,gCACA,iVAKJF,EAAWM,gBAAiB","file":"component---packages-accordion-react-documentation-accordion-mdx-183338cfac9184ace881.js","sourcesContent":["import React from \"react\";\nimport classNames from \"classnames\";\n\ninterface Props {\n    className?: string;\n    expanded?: boolean;\n}\n\nexport const ExpandArrow: React.FC<Props> = ({ expanded = false, className }) => {\n    const componentClassName = classNames(\n        {\n            \"jkl-expand-arrow\": true,\n            \"jkl-expand-arrow--expanded\": expanded,\n        },\n        className,\n    );\n    return (\n        <span className={componentClassName}>\n            <svg className=\"jkl-expand-arrow__down\" viewBox=\"0 0 13 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                <path\n                    d=\"M6.90762 13.8828L11.9272 8.86326L12.7093 9.64537L6.35463 16L-1.68645e-06 9.64536L0.782101 8.86326L5.80156 13.8827L5.80156 1.01438e-06L6.90762 1.20777e-06L6.90762 13.8828Z\"\n                    fill=\"currentColor\"\n                />\n            </svg>\n            <svg className=\"jkl-expand-arrow__up\" viewBox=\"0 0 13 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                <path\n                    d=\"M5.80163 2.1172L0.78209 7.13674L-1.29938e-05 6.35464L6.35462 5.14415e-08L12.7093 6.35464L11.9272 7.13674L6.90769 2.11728L6.9077 16L5.80163 16L5.80163 2.1172Z\"\n                    fill=\"currentColor\"\n                />\n            </svg>\n        </span>\n    );\n};\n","/* There are no types for core-toggle, so we have to use ts-ignore\nHopefully someone (us?) will write types for it sometime soon */\n// @ts-ignore: wait for nrk to supply types\nimport CoreToggle from \"@nrk/core-toggle/jsx\";\nimport React, { ReactNode, useState } from \"react\";\nimport { useAnimatedHeight } from \"@fremtind/jkl-react-hooks\";\nimport classNames from \"classnames\";\nimport { ExpandArrow } from \"./ExpandArrow\";\n\ninterface Props {\n    title: string;\n    children: ReactNode;\n    startExpanded?: boolean;\n    className?: string;\n}\n\nexport function AccordionItem({ children, title, className, startExpanded = false }: Props) {\n    const [isOpen, setIsOpen] = useState(startExpanded);\n    const [elementRef] = useAnimatedHeight(isOpen);\n    const componentClassName = classNames(\"jkl-accordion-item\", className, {\n        \"jkl-accordion-item--expanded\": isOpen,\n    });\n\n    const onToggle = () => setIsOpen(!isOpen);\n\n    return (\n        <div data-testid=\"jkl-accordion-item\" className={componentClassName}>\n            <button className=\"jkl-accordion-item__title\" type=\"button\">\n                <span className=\"jkl-accordion-item__title-text\">{title}</span>\n                <ExpandArrow className=\"jkl-accordion-item__title__arrow\" expanded={isOpen} />\n            </button>\n            <CoreToggle\n                ref={elementRef}\n                data-testid=\"jkl-accordion-item__content-wrapper\"\n                className=\"jkl-accordion-item__content-wrapper\"\n                hidden={!isOpen}\n                onToggle={onToggle}\n            >\n                <div className=\"jkl-accordion-item__content\">{children}</div>\n            </CoreToggle>\n        </div>\n    );\n}\n","import React from \"react\";\n\ninterface Props {\n    inverted?: boolean;\n    className?: string;\n}\n\nexport const Accordion: React.FC<Props> = ({ children, inverted, className = \"\" }) => {\n    return (\n        <div\n            data-testid=\"jkl-accordion\"\n            className={`jkl-accordion ${inverted ? \"jkl-accordion--inverted\" : \"\"} ${className}`}\n        >\n            {children}\n        </div>\n    );\n};\n","import React from \"react\";\nimport { ExampleComponentProps } from \"@fremtind/jkl-portal-components\";\n\nimport { Accordion, AccordionItem } from \"../src\";\nimport { UnorderedList, ListItem } from \"@fremtind/jkl-list-react\";\nimport \"@fremtind/jkl-list/list.min.css\";\n\nexport const Example: React.FC<ExampleComponentProps> = ({ boolValues }) => (\n    <Accordion inverted={boolValues && boolValues[\"Invertert\"]}>\n        <AccordionItem title=\"Hvem kan kjøpe livsforsikring?\">\n            <UnorderedList>\n                <ListItem>Personer med et norsk fødselsnummer.</ListItem>\n                <ListItem>Personer som har vært bosatt i Norge i minst de fem siste årene før avtalen inngås.</ListItem>\n                <ListItem>Livsforsikring kan kjøpes på nett av personer mellom 18 og 79 år.</ListItem>\n            </UnorderedList>\n            Ønsker du en forsikringssum på mer enn 3 millioner trenger vi ekstra økonomiske opplysninger. Da må du ta\n            kontakt med banken din.\n        </AccordionItem>\n        <AccordionItem title=\"Hvem kan kjøpe kritisk sykdom?\">\n            Personer med et norsk fødselsnummer. Personer som har vært bosatt i Norge i minst de fem siste årene før\n            avtalen inngås. Kritisk sykdom kan kjøpes på nett av personer mellom 18 og 58 år. Ønsker du en\n            forsikringssum på mer enn 1,1 millioner trenger vi ekstra økonomiske opplysninger. Da må du ta kontakt med\n            banken din.\n        </AccordionItem>\n        <AccordionItem title=\"Hvem kan kjøpe uførepensjon?\">\n            Personer med et norsk fødselsnummer. Personer som har vært bosatt i Norge i minst de fem siste årene før\n            avtalen inngås. Uførepensjon kan kjøpes på nett av personer mellom 18 og 60 år. Ønsker du en forsikringssum\n            på mer enn 96 000 trenger vi ekstra økonomiske opplysninger. Da må du ta kontakt med banken din.\n        </AccordionItem>\n    </Accordion>\n);\n","import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/jokul/jokul/portal/src/components/Layout/DocPageLayout.tsx\";\nimport { Example } from \"./Example\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst Ingress = makeShortcode(\"Ingress\");\nconst ComponentExample = makeShortcode(\"ComponentExample\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <Ingress mdxType=\"Ingress\">\n    Med trekkspillister kan vi presentere mye innhold på liten plass. En trekkspilliste har én eller flere rader, som\n    brukeren kan klikke på for å vise eller skjule informasjon.\n    </Ingress>\n    <ComponentExample component={Example} knobs={{\n      boolProps: [\"Invertert\"]\n    }} mdxType=\"ComponentExample\" />\n    <h2>{`Bruk`}</h2>\n    <p>{`Viktig informasjon bør alltid ligge synlig, ikke skjult i en trekkspilliste. Trekkspillister passer godt til tilleggsinformasjon som kan være til hjelp for brukerne. Teksten på hver rad i listen må være tydelig, og må beskrive innholdet for brukeren. Man kan også sette en overskrift for hele trekkspillisten.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}