{"version":3,"sources":["webpack:///../packages/hamburger-react/documentation/Hamburger.mdx","webpack:///../packages/hamburger-react/src/Hamburger.tsx","webpack:///../packages/hamburger-react/documentation/Example.tsx"],"names":["name","Hamburger","className","initialIsActive","negative","description","onClick","onClickOutside","enableClickOutside","insideRef","useState","isActive","toggleIsActive","wrapperRef","useRef","toggleActive","fn","nextActive","useClickOutside","type","aria-label","data-testid","ref","Example","boolValues","clickOutside","toggleClickOutside","toggleState","enable","divRef","React","style","padding","_frontmatter","ComponentExample","props","console","warn","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","knobs","boolProps","component","isMDXComponent"],"mappings":"4LASsBA,E,qECKTC,EAAY,SAAC,GASb,QARTC,iBAQS,MARG,GAQH,MAPTC,uBAOS,aANTC,gBAMS,aALTC,mBAKS,MALK,YAKL,EAJTC,EAIS,EAJTA,QACAC,EAGS,EAHTA,eAGS,IAFTC,0BAES,SADTC,EACS,EADTA,UACS,EAC0BC,mBAASP,GAArCQ,EADE,KACQC,EADR,KAEHC,EAAaC,iBAAO,MAEpBC,EAAe,SAACC,GAClB,IAAMC,GAAcN,EACpBC,EAAeK,GACXD,GACAA,EAAGC,IAUX,OAFAC,YAAgBV,EAFKC,GAAaI,EAEc,MAHzB,kBAAME,EAAaR,MAMtC,4BACIY,KAAK,SACLC,aAAYf,EACZC,QAVc,kBAAMS,EAAaT,IAWjCJ,UAAS,kBAAmBS,EAAW,2BAA6B,IAA3D,KACLP,EAAW,0BAA4B,IADlC,IAELF,EACJmB,cAAY,gBACZC,IAAKT,GAEL,0BAAMX,UAAU,2BC5BbqB,G,oBAlBC,SAAC,GAA0C,IAAxCC,EAAwC,EAAxCA,WAAwC,EACZd,oBAAS,GAA7Ce,EADgD,KAClCC,EADkC,KAEjDC,EAAc,SAACC,GAAD,OAAqBF,EAAmBE,IAEtDC,EAASC,IAAMhB,OAAO,MAC5B,OACI,yBAAKiB,MAAO,CAAEC,QAAS,QAAUV,IAAKO,GAClC,kBAAC,EAAD,CACIpB,UAAWoB,EACXzB,SAAUoB,GAAcA,EAAU,UAClClB,QAASqB,EACTnB,mBAAoBiB,EACpBlB,eAAgBoB,OFXnBM,EAAe,GAOtBC,GALgBlC,EAKiB,mBALT,SAA6BmC,GAEzD,OADAC,QAAQC,KAAK,aAAerC,EAAO,2EAC5B,kBAASmC,KAIZG,EAAc,CAClBL,gBAEIM,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGP,EACF,8BACD,OAAO,YAACI,EAAD,iBAAeD,EAAiBH,EAAhC,CAAuCO,WAAYA,EAAYC,QAAQ,cAI5E,YAACT,EAAD,CAAkBU,MAAO,CACvBC,UAAW,CAAC,cACXC,UAAWvB,EAASoB,QAAQ,sBAKnCF,EAAWM,gBAAiB,G","file":"component---packages-hamburger-react-documentation-hamburger-mdx-4d1e5834aeba75d199ff.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/jokul/jokul/portal/src/components/Layout/DocPageLayout.tsx\";\nimport Example from \"./Example\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst ComponentExample = makeShortcode(\"ComponentExample\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <ComponentExample knobs={{\n      boolProps: [\"Invertert\"]\n    }} component={Example} mdxType=\"ComponentExample\" />\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","import React, { RefObject, useRef, useState } from \"react\";\nimport { useClickOutside } from \"@fremtind/jkl-react-hooks\";\n\ninterface Props {\n    className?: string;\n    onClick?: (isActive: boolean) => void;\n    onClickOutside?: (isActive: boolean) => void;\n    enableClickOutside?: boolean;\n    initialIsActive?: boolean;\n    negative?: boolean;\n    description?: string;\n    insideRef?: RefObject<HTMLElement>;\n}\n\nexport const Hamburger = ({\n    className = \"\",\n    initialIsActive = false,\n    negative = false,\n    description = \"Hovedmeny\",\n    onClick,\n    onClickOutside,\n    enableClickOutside = false,\n    insideRef,\n}: Props) => {\n    const [isActive, toggleIsActive] = useState(initialIsActive);\n    const wrapperRef = useRef(null);\n\n    const toggleActive = (fn: ((isActive: boolean) => void) | undefined) => {\n        const nextActive = !isActive;\n        toggleIsActive(nextActive);\n        if (fn) {\n            fn(nextActive);\n        }\n    };\n\n    const onButtonClick = () => toggleActive(onClick);\n    const onOutsideClick = () => toggleActive(onClickOutside);\n    const getRef = () => insideRef || wrapperRef;\n\n    useClickOutside(enableClickOutside ? getRef() : null, onOutsideClick);\n\n    return (\n        <button\n            type=\"button\"\n            aria-label={description}\n            onClick={onButtonClick}\n            className={`jkl-hamburger ${isActive ? \"jkl-hamburger--is-active\" : \"\"} ${\n                negative ? \"jkl-hamburger--negative\" : \"\"\n            } ${className}`}\n            data-testid=\"jkl-hamburger\"\n            ref={wrapperRef}\n        >\n            <span className=\"jkl-hamburger__inner\"></span>\n        </button>\n    );\n};\n","import React, { useState } from \"react\";\nimport { ExampleComponentProps } from \"@fremtind/jkl-portal-components\";\nimport { Hamburger } from \"../src\";\nimport \"@fremtind/jkl-hamburger/hamburger.css\";\nimport \"@fremtind/jkl-core/core.min.css\";\n\nconst Example = ({ boolValues }: ExampleComponentProps) => {\n    const [clickOutside, toggleClickOutside] = useState(false);\n    const toggleState = (enable: boolean) => toggleClickOutside(enable);\n\n    const divRef = React.useRef(null);\n    return (\n        <div style={{ padding: \"20px\" }} ref={divRef}>\n            <Hamburger\n                insideRef={divRef}\n                negative={boolValues && boolValues[\"Invertert\"]}\n                onClick={toggleState}\n                enableClickOutside={clickOutside}\n                onClickOutside={toggleState}\n            />\n        </div>\n    );\n};\n\nexport default Example;\n"],"sourceRoot":""}