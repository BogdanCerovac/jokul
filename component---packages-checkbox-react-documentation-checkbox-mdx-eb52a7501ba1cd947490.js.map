{"version":3,"sources":["webpack:///../packages/checkbox-react/src/Checkbox.tsx","webpack:///../packages/checkbox-react/documentation/Example.tsx","webpack:///../packages/checkbox-react/documentation/Checkbox.mdx"],"names":["Checkbox","children","name","value","checked","invalid","onChange","className","inline","forceCompact","classNames","concat","data-testid","aria-invalid","type","Example","React","useState","isCool","changeCoolness","e","console","log","target","_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","isMDXComponent"],"mappings":"iNAcO,SAASA,EAAT,GAUG,IATNC,EASM,EATNA,SACAC,EAQM,EARNA,KACAC,EAOM,EAPNA,MACAC,EAMM,EANNA,QACAC,EAKM,EALNA,QACAC,EAIM,EAJNA,SACAC,EAGM,EAHNA,UAGM,IAFNC,cAEM,SADNC,EACM,EADNA,aAEMC,EAAa,eACdC,OAAOF,EAAe,yBAA2B,IACjDE,OAAOH,EAAS,wBAA0B,IAC1CG,OAAON,EAAU,uBAAyB,IAC1CM,OAAOJ,EAAY,IAAIA,EAAc,IAC1C,OACI,2BAAOA,UAAWG,GACd,2BACIH,UAAU,sBACVK,cAAY,qBACZC,eAAcR,EACdD,QAASA,EACTU,KAAK,WACLZ,KAAMA,EACNC,MAAOA,EACPG,SAAUA,IAEd,0BAAMC,UAAU,6BACfN,G,kCCVEc,EA3BC,WAAM,MACeC,IAAMC,UAAS,GAAzCC,EADW,KACHC,EADG,KAElB,OACI,6BAASZ,UAAU,4CACf,kBAACP,EAAD,CACIE,KAAK,YACLC,MAAM,WACNG,SAAU,SAACc,GAAD,OAAOC,QAAQC,IAAOF,EAAEG,OAAOpB,MAAxB,WAAwCiB,EAAEG,OAAOnB,WAHtE,kBAOA,kBAACJ,EAAD,CAAUE,KAAK,YAAYC,MAAM,SAASI,UAAU,oBAApD,gBAGA,kBAACP,EAAD,CAAUE,KAAK,YAAYC,MAAM,QAAQE,SAAS,GAAlD,mBAGA,kBAACL,EAAD,CAAUE,KAAK,YAAYC,MAAM,SAASC,SAAO,GAAjD,uBAGA,kBAACJ,EAAD,CAAUE,KAAK,YAAYC,MAAM,aAAaC,QAASc,EAAQZ,SAAU,kBAAMa,GAAgBD,KAA/F,QACUA,EAAS,OAAS,WAAY,O,qFCpB7C,IAAMM,EAAe,GAOtBC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,iBAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAI5E,YAAC,EAAD,CAASA,QAAQ,aAKrBH,EAAWI,gBAAiB","file":"component---packages-checkbox-react-documentation-checkbox-mdx-eb52a7501ba1cd947490.js","sourcesContent":["import React, { ReactNode, ChangeEvent } from \"react\";\n\ninterface Props {\n    children: ReactNode;\n    name: string;\n    value: string;\n    checked?: boolean;\n    inline?: boolean;\n    onChange?: (e: ChangeEvent<HTMLInputElement>) => void;\n    className?: string;\n    forceCompact?: boolean;\n    invalid?: boolean;\n}\n\nexport function Checkbox({\n    children,\n    name,\n    value,\n    checked,\n    invalid,\n    onChange,\n    className,\n    inline = false,\n    forceCompact,\n}: Props) {\n    const classNames = \"jkl-checkbox\"\n        .concat(forceCompact ? \" jkl-checkbox--compact\" : \"\")\n        .concat(inline ? \" jkl-checkbox--inline\" : \"\")\n        .concat(invalid ? \" jkl-checkbox--error\" : \"\")\n        .concat(className ? ` ${className}` : \"\");\n    return (\n        <label className={classNames}>\n            <input\n                className=\"jkl-checkbox__input\"\n                data-testid=\"jkl-checkbox-input\"\n                aria-invalid={invalid}\n                checked={checked}\n                type=\"checkbox\"\n                name={name}\n                value={value}\n                onChange={onChange}\n            />\n            <span className=\"jkl-checkbox__check-mark\" />\n            {children}\n        </label>\n    );\n}\n","import React from \"react\";\nimport { Checkbox } from \"../src\";\nimport \"@fremtind/jkl-core/core.css\";\nimport \"@fremtind/jkl-checkbox/checkbox.min.css\";\nimport \"@fremtind/jkl-field-group/field-group.min.css\";\n\nconst Example = () => {\n    const [isCool, changeCoolness] = React.useState(false);\n    return (\n        <section className=\"jkl-spacing--top-3 jkl-spacing--bottom-3\">\n            <Checkbox\n                name=\"checklist\"\n                value=\"checkbox\"\n                onChange={(e) => console.log(`${e.target.value} is now ${e.target.checked}`)}\n            >\n                I am checkbox!\n            </Checkbox>\n            <Checkbox name=\"checklist\" value=\"custom\" className=\"custom-classname\">\n                I am special\n            </Checkbox>\n            <Checkbox name=\"checklist\" value=\"error\" invalid={true}>\n                I have an error\n            </Checkbox>\n            <Checkbox name=\"checklist\" value=\"static\" checked>\n                I will never change\n            </Checkbox>\n            <Checkbox name=\"checklist\" value=\"controlled\" checked={isCool} onChange={() => changeCoolness(!isCool)}>\n                I am {isCool ? \"cool\" : \"not cool\"}{\" \"}\n            </Checkbox>\n        </section>\n    );\n};\n\nexport default Example;\n","import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/github/workspace/portal/src/components/Layout/ComponentLayout.tsx\";\nimport Example from \"./Example\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <Example mdxType=\"Example\" />\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}