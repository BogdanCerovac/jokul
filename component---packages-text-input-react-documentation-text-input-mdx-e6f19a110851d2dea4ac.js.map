{"version":3,"sources":["webpack:///../packages/text-input-react/node_modules/nanoid/index.browser.js","webpack:///../packages/text-input-react/src/TextArea.tsx","webpack:///../packages/text-input-react/src/BaseInputField.tsx","webpack:///../packages/text-input-react/src/TextInput.tsx","webpack:///../packages/text-input-react/documentation/TextInputExample.tsx","webpack:///../packages/text-input-react/documentation/TextAreaExample.tsx","webpack:///../packages/text-input-react/documentation/TextInput.mdx"],"names":["nanoid","size","arguments","length","undefined","id","bytes","crypto","getRandomValues","Uint8Array","byte","toString","toUpperCase","TextArea","forwardRef","ref","variant","inverted","label","className","helpLabel","errorLabel","rows","placeholder","autoExpand","forceCompact","restProps","componentClassName","classNames","uid","useState","supportId","textAreaFocused","setTextAreaFocused","baseScrollHeight","setBaseScrollHeight","currentRows","setCurrentRows","internalRef","useRef","textAreaRef","useEffect","textAreaElement","current","savedValue","value","savedPlaceholder","savedRows","scrollHeight","minimumRows","calculatedRows","lineHeightWithPx","window","getComputedStyle","lineHeight","parseInt","replace","Math","ceil","calculateRows","max","data-testid","standAlone","htmlFor","onFocus","e","onBlur","aria-invalid","aria-describedby","style","height","overflowX","displayName","getWidthAsStyle","width","maxLength","min","BaseInputField","describedBy","invalid","type","rest","TextInput","inline","action","inputProps","srOnly","iconType","icon","buttonTitle","onClick","TextInputExample","choiceValues","boolValues","setValue","compact","onChange","target","onKeyDown","console","log","TextAreaExample","_frontmatter","makeShortcode","name","props","warn","Ingress","ComponentExample","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","component","knobs","boolProps","choiceProps","values","defaultValue","parentName","isMDXComponent"],"mappings":"gVAsBA,IA8CIA,EAAS,WAKX,IAJA,IAAIC,EAAOC,UAAUC,OAAS,QAAsBC,IAAjBF,UAAU,GAAmBA,UAAU,GAAK,GAC3EG,EAAK,GACLC,EAAQC,OAAOC,gBAAgB,IAAIC,WAAWR,IAE3CA,KAAQ,CAMb,IAAIS,EAAqB,GAAdJ,EAAML,GAIfI,GAFEK,EAAO,GAEHA,EAAKC,SAAS,IACXD,EAAO,IAETA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,IAIV,OAAOL,G,YC7EF,IAAMQ,EAAWC,sBACpB,WAeIC,GACC,IAdGV,EAcH,EAdGA,GACAW,EAaH,EAbGA,QACAC,EAYH,EAZGA,SACAC,EAWH,EAXGA,MACAC,EAUH,EAVGA,UACAC,EASH,EATGA,UACAC,EAQH,EARGA,WAQH,IAPGC,YAOH,MAPU,EAOV,MANGC,mBAMH,MANiB,IAMjB,MALGC,kBAKH,SAJGC,EAIH,EAJGA,aACGC,E,oIAGN,8HACKC,EAAqBC,IAAW,+BAAgCT,EAAW,CAC7E,0BAA2BM,EAC3B,2BAA4BR,IAEzBY,EAAOC,mBAASzB,GAAM,iBAAiBL,EAAO,IALpD,GAMM+B,EAAaD,mBAAS,qBAAqB9B,EAAO,IANxD,KAQ6C8B,oBAAS,GAAhDE,EARN,KAQuBC,EARvB,OAS+CH,mBAAS,GAAlDI,EATN,KASwBC,EATxB,OAUqCL,mBAAS,GAAxCM,EAVN,KAUmBC,EAVnB,KAWKC,EAAcC,iBAA4B,MAC1CC,EAAezB,GAA0CuB,EAsD/D,OApDAG,qBAAU,WACN,IAAMC,EAAkBF,EAAYG,QACpC,GAAInB,GAAckB,EAAiB,CAC/B,IAAME,EAAaF,EAAgBG,MAC7BC,EAAmBJ,EAAgBnB,YACnCwB,EAAYL,EAAgBpB,KAElCoB,EAAgBG,MAAQ,GACxBH,EAAgBnB,YAAc,GAC9BmB,EAAgBpB,KAAO,EACvBa,EAAoBO,EAAgBM,cACpCN,EAAgBG,MAAQD,EACxBF,EAAgBnB,YAAcuB,EAC9BJ,EAAgBpB,KAAOyB,KAE5B,CAACP,EAAahB,IAEjBiB,qBAAU,WACN,IAAMC,EAAkBF,EAAYG,QAC9BM,EAAc3B,EAEpB,GAAIoB,EAAiB,CACjB,IAAMQ,EAmBd,SAAuBR,EAAsCR,GACzD,IAAMiB,EAAmBC,OAASA,OAAOC,iBAAiBX,GAAiBY,WAAa,OAClFA,EAAaC,SAASJ,EAAiBK,QAAQ,KAAM,KACrDT,EAAYL,EAAgBpB,KAElCoB,EAAgBpB,KAAO,EACvB,IAAM4B,EAAiBO,KAAKC,MAAMhB,EAAgBM,aAAed,GAAoBoB,GAAc,EAEnG,OADAZ,EAAgBpB,KAAOyB,EAChBG,EA3BoBS,CAAcjB,EAAiBR,GAClDF,GAAmBN,EAAUmB,MAC7BR,EAAeoB,KAAKG,IAAIX,EAAaC,IAErCb,EAAea,MAGxB,CAACV,EAAad,EAAUmB,MAAOb,EAAiBE,EAAkBZ,IAwBjE,yBAAKuC,cAAY,gBAAgB1C,UAAWQ,GACxC,kBAAC,IAAD,CAAOmC,YAAU,EAACC,QAASlC,EAAKb,QAASA,EAASS,aAAcA,GAC3DP,GAEL,4CACIb,GAAIwB,EACJd,IAAKyB,EACLrB,UAAS,gDAAkDG,EAAlD,QACT0C,QA9BZ,SAAiBC,GACbhC,GAAmB,GACnBP,EAAUsC,SAAWtC,EAAUsC,QAAQC,IA6B/BC,OA1BZ,SAAgBD,GACZhC,GAAmB,GACnBP,EAAUwC,QAAUxC,EAAUwC,OAAOD,IAyB7BE,iBAAgB9C,EAChB+C,mBAAkBrC,EAClBR,YAAaA,EACbD,KAAME,EAAaY,OAAchC,EAEjCiE,MAAO7C,EAAa,CAAE8C,OAAQ,OAAQC,UAAW,eAAanE,GAC1DsB,IAER,kBAAC,IAAD,CACIT,SAAUA,EACVZ,GAAI0B,EACJX,UAAWA,EACXC,WAAYA,EACZI,aAAcA,QAOlCZ,EAAS2D,YAAc,W,gBCxGvB,SAASC,EAAgBC,EAAgBC,GACrC,OAAID,EACO,CAAEA,SAGTC,EAGO,CAAED,MADMjB,KAAKmB,IAAID,EAAW,IACrB,WAHlB,EASG,IAAME,EAAiB/D,sBAC1B,WAAyFC,GAAzF,IAAGV,EAAH,EAAGA,GAAIyE,EAAP,EAAOA,YAAaC,EAApB,EAAoBA,QAASJ,EAA7B,EAA6BA,UAAWD,EAAxC,EAAwCA,MAAxC,IAA+CM,YAA/C,MAAsD,OAAtD,MAA8D7D,iBAA9D,MAA0E,GAA1E,EAAiF8D,E,oIAAjF,iFACI,yCACIlE,IAAKA,EACLV,GAAIA,EACJc,UAAS,yBAA2BA,EACpCkD,MAAOI,EAAgBC,EAAOC,GAC9BP,mBAAkBU,EAClBX,eAAcY,EACdJ,UAAWA,EACXK,KAAMA,GACFC,OAIhBJ,EAAeL,YAAc,iBChCtB,IAAMU,EAAYpE,sBACrB,WAcIC,GACC,IAbGV,EAaH,EAbGA,GACAc,EAYH,EAZGA,UACAD,EAWH,EAXGA,MACAE,EAUH,EAVGA,UACAC,EASH,EATGA,WASH,IARGL,eAQH,MARa,SAQb,EAPGmE,EAOH,EAPGA,OACAlE,EAMH,EANGA,SACAQ,EAKH,EALGA,aACA2D,EAIH,EAJGA,OACGC,E,oIAGN,8GACMxD,EAAOC,mBAASzB,GAAM,kBAAkBL,EAAO,IADrD,GAEM+B,EAAaD,mBAAS,qBAAqB9B,EAAO,IAFxD,GAIK8E,EADiB1D,GAAaC,EACCU,OAAY3B,EAC3CuB,EAAqBC,IACvB,CACI,kBAAkB,EAClB,yBAA0BuD,EAC1B,2BAA4BlE,EAC5B,0BAA2BQ,EAC3B,yBAA0B2D,GAE9BjE,GAEJ,OACI,yBAAK0C,cAAY,iBAAiB1C,UAAWQ,GACzC,kBAAC,IAAD,CAAOF,aAAcA,EAAcqC,YAAU,EAACwB,OAAQH,EAAQpB,QAASlC,EAAKb,QAASA,GAChFE,GAEL,yBAAKC,UAAU,iCACX,kBAAC0D,EAAD,eACI9D,IAAKA,EACLV,GAAIwB,EACJiD,YAAaA,EACbC,UAAW1D,EACXF,UAAU,yBACNkE,IAEPD,GACG,kBAAC,IAAD,CACIjE,UAAU,gCACVoE,SAAUH,EAAOI,KACjBC,YAAaL,EAAOlE,MACpBwE,QAASN,EAAOM,QAChB1B,QAASoB,EAAOpB,QAChBE,OAAQkB,EAAOlB,UAI3B,kBAAC,IAAD,CACIjD,SAAUA,EACVZ,GAAI0B,EACJX,UAAWA,EACXC,WAAYA,EACZiE,OAAQH,QC/ErB,SAASQ,EAAT,GAA+E,IAAnDC,EAAmD,EAAnDA,aAAcC,EAAqC,EAArCA,WAAqC,EACxD/D,mBAAS,IAA5Be,EAD2E,KACpEiD,EADoE,KAG5E9E,EAAU4E,GAAiBA,EAAY,QACvCT,EAASU,GAAcA,EAAU,OACjCT,EACFS,GAAcA,EAAW,gBAClB,CACGL,KAAM,QACNtE,MAAO,mBACPwE,QAAS,kBAAMI,EAAS,WAE5B1F,EACJa,EAAW4E,GAAcA,EAAU,UACnCE,EAAUF,GAAcA,EAAU,QAClCzE,EAAYyE,GAAcA,EAAW,mBAAqB,kBAAezF,EACzEiB,EAAawE,GAAcA,EAAW,mBAAqB,mBAAgBzF,EAEjF,OACI,kBAAC8E,EAAD,CACIlE,QAASA,EACTmE,OAAQA,EACRlE,SAAUA,EACVQ,aAAcsE,EACdX,OAAQA,EACRlE,MAAM,gBACNE,UAAWA,EACXC,WAAYA,EACZE,YAAY,cACZoD,UAAW,GACX9B,MAAOA,EACPmD,SA7Ba,SAAC/B,GAAD,OAAsC6B,EAAS7B,EAAEgC,OAAOpD,QA8BrEqD,UAAW,kBAAMC,QAAQC,IAAI,sBCjClC,SAASC,EAAT,GAA8E,IAAnDT,EAAmD,EAAnDA,aAAcC,EAAqC,EAArCA,WAAqC,EACvD/D,mBAAS,IAA5Be,EAD0E,KACnEiD,EADmE,KAG3E9E,EAAU4E,GAAiBA,EAAY,QACvC3E,EAAW4E,GAAcA,EAAU,UACnCE,EAAUF,GAAcA,EAAU,QAClCrE,EAAaqE,GAAcA,EAAU,cACrCzE,EAAYyE,GAAcA,EAAW,mBAAqB,kBAAezF,EACzEiB,EAAawE,GAAcA,EAAW,mBAAqB,mBAAgBzF,EAEjF,OACI,kBAACS,EAAD,CACIG,QAASA,EACTC,SAAUA,EACVQ,aAAcsE,EACdxE,YAAY,cACZH,UAAWA,EACXC,WAAYA,EACZF,UAAU,qBACVD,MAAM,gBACNM,WAAYA,EACZqB,MAAOA,EACPmD,SApBa,SAAC/B,GAAD,OAAyC6B,EAAS7B,EAAEgC,OAAOpD,QAqBxEqD,UAAW,kBAAMC,QAAQC,IAAI,sBF+DzClB,EAAUV,YAAc,YGnFjB,IAAM8B,EAAe,GAEtBC,EAAgB,SAAAC,GAAI,OAAI,SAA6BC,GAEzD,OADAN,QAAQO,KAAK,aAAeF,EAAO,2EAC5B,kBAASC,KAGZE,EAAUJ,EAAc,WACxBK,EAAmBL,EAAc,oBACjCM,EAAc,CAClBP,gBAEIQ,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGR,E,oIACF,mBACD,OAAO,YAACK,EAAD,iBAAeD,EAAiBJ,EAAhC,CAAuCQ,WAAYA,EAAYC,QAAQ,cAI5E,YAACP,EAAD,CAASO,QAAQ,WAAjB,sIAIA,YAACN,EAAD,CAAkBO,UAAWxB,EAAkByB,MAAO,CACpDC,UAAW,CAAC,SAAU,UAAW,YAAa,eAAgB,kBAAmB,mBACjFC,YAAa,CAAC,CACZd,KAAM,UACNe,OAAQ,CAAC,QAAS,SAAU,SAC5BC,aAAc,KAEfN,QAAQ,qBACX,gQACA,+FACA,yCACA,qBAAG,sBAAQO,WAAW,KAAnB,sBAAH,yDAEA,qBAAG,sBAAQA,WAAW,KAAnB,qBAAH,8FAEA,qBAAG,sBAAQA,WAAW,KAAnB,oBAAH,8EAEA,YAACb,EAAD,CAAkBO,UAAWd,EAAiBe,MAAO,CACnDC,UAAW,CAAC,UAAW,YAAa,gBAAiB,kBAAmB,mBACxEC,YAAa,CAAC,CACZd,KAAM,UACNe,OAAQ,CAAC,QAAS,SAAU,SAC5BC,aAAc,KAEfN,QAAQ,qBACX,6CACA,iQACA,+PACA,iFAC4C,kBAAIO,WAAW,KAAf,qCAD5C,wBACkI,kBAAIA,WAAW,KAAf,2CADlI,MAMJT,EAAWU,gBAAiB","file":"component---packages-text-input-react-documentation-text-input-mdx-e6f19a110851d2dea4ac.js","sourcesContent":["import \"core-js/modules/es6.regexp.to-string\";\nimport \"core-js/modules/es6.object.to-string\";\nimport \"core-js/modules/es6.typed.uint8-array\";\n// This file replaces `index.js` in bundlers like webpack or Rollup,\n// according to `browser` config in `package.json`.\nimport { urlAlphabet } from './url-alphabet/index.js';\n\nif (process.env.NODE_ENV !== 'production') {\n  // All bundlers will remove this block in the production bundle.\n  if (typeof navigator !== 'undefined' && navigator.product === 'ReactNative' && typeof crypto === 'undefined') {\n    throw new Error('React Native does not have a built-in secure random generator. ' + 'If you don’t need unpredictable IDs use `nanoid/non-secure`. ' + 'For secure IDs, import `react-native-get-random-values` ' + 'before Nano ID. If you use Expo, install `expo-random` ' + 'and use `nanoid/async`.');\n  }\n\n  if (typeof msCrypto !== 'undefined' && typeof crypto === 'undefined') {\n    throw new Error('Add `if (!window.crypto) window.crypto = window.msCrypto` ' + 'before Nano ID to fix IE 11 support');\n  }\n\n  if (typeof crypto === 'undefined') {\n    throw new Error('Your browser does not have secure random generator. ' + 'If you don’t need unpredictable IDs, you can use nanoid/non-secure.');\n  }\n}\n\nvar random = function random(bytes) {\n  return crypto.getRandomValues(new Uint8Array(bytes));\n};\n\nvar customRandom = function customRandom(alphabet, size, getRandom) {\n  // First, a bitmask is necessary to generate the ID. The bitmask makes bytes\n  // values closer to the alphabet size. The bitmask calculates the closest\n  // `2^31 - 1` number, which exceeds the alphabet size.\n  // For example, the bitmask for the alphabet size 30 is 31 (00011111).\n  // `Math.clz32` is not used, because it is not available in browsers.\n  var mask = (2 << Math.log(alphabet.length - 1) / Math.LN2) - 1; // Though, the bitmask solution is not perfect since the bytes exceeding\n  // the alphabet size are refused. Therefore, to reliably generate the ID,\n  // the random bytes redundancy has to be satisfied.\n  // Note: every hardware random generator call is performance expensive,\n  // because the system call for entropy collection takes a lot of time.\n  // So, to avoid additional system calls, extra bytes are requested in advance.\n  // Next, a step determines how many random bytes to generate.\n  // The number of random bytes gets decided upon the ID size, mask,\n  // alphabet size, and magic number 1.6 (using 1.6 peaks at performance\n  // according to benchmarks).\n  // `-~f => Math.ceil(f)` if f is a float\n  // `-~i => i + 1` if i is an integer\n\n  var step = -~(1.6 * mask * size / alphabet.length);\n  return function () {\n    var id = '';\n\n    while (true) {\n      var bytes = getRandom(step); // A compact alternative for `for (var i = 0; i < step; i++)`.\n\n      var j = step;\n\n      while (j--) {\n        // Adding `|| ''` refuses a random byte that exceeds the alphabet size.\n        id += alphabet[bytes[j] & mask] || ''; // `id.length + 1 === size` is a more compact option.\n\n        if (id.length === +size) return id;\n      }\n    }\n  };\n};\n\nvar customAlphabet = function customAlphabet(alphabet, size) {\n  return customRandom(alphabet, size, random);\n};\n\nvar nanoid = function nanoid() {\n  var size = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 21;\n  var id = '';\n  var bytes = crypto.getRandomValues(new Uint8Array(size)); // A compact alternative for `for (var i = 0; i < step; i++)`.\n\n  while (size--) {\n    // It is incorrect to use bytes exceeding the alphabet size.\n    // The following mask reduces the random byte in the 0-255 value\n    // range to the 0-63 value range. Therefore, adding hacks, such\n    // as empty string fallback or magic numbers, is unneccessary because\n    // the bitmask trims bytes down to the alphabet size.\n    var byte = bytes[size] & 63;\n\n    if (byte < 36) {\n      // `0-9a-z`\n      id += byte.toString(36);\n    } else if (byte < 62) {\n      // `A-Z`\n      id += (byte - 26).toString(36).toUpperCase();\n    } else if (byte < 63) {\n      id += '_';\n    } else {\n      id += '-';\n    }\n  }\n\n  return id;\n};\n\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random };","import React, { forwardRef, FocusEvent, useRef, useState, useEffect, RefObject } from \"react\";\nimport classNames from \"classnames\";\nimport { nanoid } from \"nanoid\";\nimport { Label, SupportLabel, LabelVariant } from \"@fremtind/jkl-core\";\nimport { BaseProps } from \"./BaseInputField\";\n\nexport interface Props extends BaseProps {\n    label: string;\n    helpLabel?: string;\n    errorLabel?: string;\n    variant?: LabelVariant;\n    inverted?: boolean;\n    forceCompact?: boolean;\n    rows?: number;\n    autoExpand?: boolean;\n}\n\nexport const TextArea = forwardRef<HTMLTextAreaElement, Props>(\n    (\n        {\n            id,\n            variant,\n            inverted,\n            label,\n            className,\n            helpLabel,\n            errorLabel,\n            rows = 7,\n            placeholder = \" \",\n            autoExpand = false,\n            forceCompact,\n            ...restProps\n        },\n        ref,\n    ) => {\n        const componentClassName = classNames(\"jkl-text-input jkl-text-area\", className, {\n            \"jkl-text-input--compact\": forceCompact,\n            \"jkl-text-input--inverted\": inverted,\n        });\n        const [uid] = useState(id || `jkl-text-area-${nanoid(8)}`);\n        const [supportId] = useState(`jkl-support-label-${nanoid(8)}`);\n\n        const [textAreaFocused, setTextAreaFocused] = useState(false);\n        const [baseScrollHeight, setBaseScrollHeight] = useState(0);\n        const [currentRows, setCurrentRows] = useState(1);\n        const internalRef = useRef<HTMLTextAreaElement>(null);\n        const textAreaRef = (ref as RefObject<HTMLTextAreaElement>) || internalRef;\n\n        useEffect(() => {\n            const textAreaElement = textAreaRef.current;\n            if (autoExpand && textAreaElement) {\n                const savedValue = textAreaElement.value;\n                const savedPlaceholder = textAreaElement.placeholder;\n                const savedRows = textAreaElement.rows;\n                // BaseScrollHeight must be calculated from an empty textarea and empty placeholder.\n                textAreaElement.value = \"\";\n                textAreaElement.placeholder = \"\";\n                textAreaElement.rows = 1;\n                setBaseScrollHeight(textAreaElement.scrollHeight);\n                textAreaElement.value = savedValue;\n                textAreaElement.placeholder = savedPlaceholder;\n                textAreaElement.rows = savedRows;\n            }\n        }, [textAreaRef, autoExpand]);\n\n        useEffect(() => {\n            const textAreaElement = textAreaRef.current;\n            const minimumRows = rows;\n\n            if (textAreaElement) {\n                const calculatedRows = calculateRows(textAreaElement, baseScrollHeight);\n                if (textAreaFocused || restProps.value) {\n                    setCurrentRows(Math.max(minimumRows, calculatedRows));\n                } else {\n                    setCurrentRows(calculatedRows);\n                }\n            }\n        }, [textAreaRef, restProps.value, textAreaFocused, baseScrollHeight, rows]);\n\n        function onFocus(e: FocusEvent<HTMLTextAreaElement>) {\n            setTextAreaFocused(true);\n            restProps.onFocus && restProps.onFocus(e);\n        }\n\n        function onBlur(e: FocusEvent<HTMLTextAreaElement>) {\n            setTextAreaFocused(false);\n            restProps.onBlur && restProps.onBlur(e);\n        }\n\n        function calculateRows(textAreaElement: HTMLTextAreaElement, baseScrollHeight: number) {\n            const lineHeightWithPx = window ? window.getComputedStyle(textAreaElement).lineHeight : \"16px\"; // Default to 16px\n            const lineHeight = parseInt(lineHeightWithPx.replace(\"px\", \"\"));\n            const savedRows = textAreaElement.rows;\n            // We need to set rows to 1 to shrink the textarea when removing characters.\n            textAreaElement.rows = 1;\n            const calculatedRows = Math.ceil((textAreaElement.scrollHeight - baseScrollHeight) / lineHeight) + 1;\n            textAreaElement.rows = savedRows;\n            return calculatedRows;\n        }\n\n        return (\n            <div data-testid=\"jkl-text-area\" className={componentClassName}>\n                <Label standAlone htmlFor={uid} variant={variant} forceCompact={forceCompact}>\n                    {label}\n                </Label>\n                <textarea\n                    id={uid}\n                    ref={textAreaRef}\n                    className={`jkl-text-input__input jkl-text-input__input--${rows}-rows`}\n                    onFocus={onFocus}\n                    onBlur={onBlur}\n                    aria-invalid={!!errorLabel}\n                    aria-describedby={supportId}\n                    placeholder={placeholder}\n                    rows={autoExpand ? currentRows : undefined}\n                    // Must set overflowX hidden for Firefox https://stackoverflow.com/a/22700700\n                    style={autoExpand ? { height: \"auto\", overflowX: \"hidden\" } : undefined}\n                    {...restProps}\n                />\n                <SupportLabel\n                    inverted={inverted}\n                    id={supportId}\n                    helpLabel={helpLabel}\n                    errorLabel={errorLabel}\n                    forceCompact={forceCompact}\n                />\n            </div>\n        );\n    },\n);\n\nTextArea.displayName = \"TextArea\";\n","import React, { ChangeEventHandler, FocusEventHandler, CSSProperties, forwardRef, KeyboardEventHandler } from \"react\";\n\nexport interface BaseProps {\n    id?: string;\n    className?: string;\n    maxLength?: number;\n    width?: string;\n    value?: string;\n    onChange?: ChangeEventHandler<HTMLInputElement | HTMLTextAreaElement>;\n    onBlur?: FocusEventHandler<HTMLInputElement | HTMLTextAreaElement>;\n    onFocus?: FocusEventHandler<HTMLInputElement | HTMLTextAreaElement>;\n    onKeyDown?: KeyboardEventHandler<HTMLInputElement | HTMLTextAreaElement>;\n    onKeyUp?: KeyboardEventHandler<HTMLInputElement | HTMLTextAreaElement>;\n    onKeyPress?: KeyboardEventHandler<HTMLInputElement | HTMLTextAreaElement>;\n    placeholder?: string;\n    readOnly?: boolean;\n    autoComplete?: string;\n    required?: boolean;\n    type?: \"text\" | \"number\" | \"tel\" | \"password\" | \"email\" | \"year\";\n}\n\nexport interface Props extends BaseProps {\n    describedBy?: string;\n    style?: CSSProperties;\n    invalid?: boolean;\n}\n\nfunction getWidthAsStyle(width?: string, maxLength?: number): CSSProperties | undefined {\n    if (width) {\n        return { width }; // prioritize width prop\n    }\n\n    if (maxLength) {\n        // adapt to maxLength, but capped at 40ch\n        const length = Math.min(maxLength, 40);\n        return { width: `${length}ch` };\n    }\n\n    return undefined;\n}\n\nexport const BaseInputField = forwardRef<HTMLInputElement, Props>(\n    ({ id, describedBy, invalid, maxLength, width, type = \"text\", className = \"\", ...rest }, ref) => (\n        <input\n            ref={ref}\n            id={id}\n            className={`jkl-text-input__input ${className}`}\n            style={getWidthAsStyle(width, maxLength)}\n            aria-describedby={describedBy}\n            aria-invalid={invalid}\n            maxLength={maxLength}\n            type={type}\n            {...rest}\n        />\n    ),\n);\nBaseInputField.displayName = \"BaseInputField\";\n","import React, { forwardRef, useState, HTMLAttributes, MouseEventHandler } from \"react\";\nimport { nanoid } from \"nanoid\";\nimport classNames from \"classnames\";\nimport { Label, SupportLabel, LabelVariant } from \"@fremtind/jkl-core\";\nimport { IconButton, IconVariant } from \"@fremtind/jkl-icon-button-react\";\nimport { BaseInputField, BaseProps } from \"./BaseInputField\";\n\nexport interface Action extends Exclude<HTMLAttributes<HTMLButtonElement>, \"disabled\"> {\n    icon: IconVariant;\n    label: string;\n    onClick: MouseEventHandler<HTMLButtonElement>;\n}\n\nexport interface Props extends BaseProps {\n    label: string;\n    helpLabel?: string;\n    errorLabel?: string;\n    variant?: LabelVariant;\n    inverted?: boolean;\n    forceCompact?: boolean;\n    inline?: boolean;\n    action?: Action;\n}\n\nexport const TextInput = forwardRef<HTMLInputElement, Props>(\n    (\n        {\n            id,\n            className,\n            label,\n            helpLabel,\n            errorLabel,\n            variant = \"medium\",\n            inline,\n            inverted,\n            forceCompact,\n            action,\n            ...inputProps\n        },\n        ref,\n    ) => {\n        const [uid] = useState(id || `jkl-text-input-${nanoid(8)}`);\n        const [supportId] = useState(`jkl-support-label-${nanoid(8)}`);\n        const hasSupportText = helpLabel || errorLabel;\n        const describedBy = hasSupportText ? supportId : undefined;\n        const componentClassName = classNames(\n            {\n                \"jkl-text-input\": true,\n                \"jkl-text-input--inline\": inline,\n                \"jkl-text-input--inverted\": inverted,\n                \"jkl-text-input--compact\": forceCompact,\n                \"jkl-text-input--action\": action,\n            },\n            className,\n        );\n        return (\n            <div data-testid=\"jkl-text-input\" className={componentClassName}>\n                <Label forceCompact={forceCompact} standAlone srOnly={inline} htmlFor={uid} variant={variant}>\n                    {label}\n                </Label>\n                <div className=\"jkl-text-input__input-wrapper\">\n                    <BaseInputField\n                        ref={ref}\n                        id={uid}\n                        describedBy={describedBy}\n                        invalid={!!errorLabel}\n                        className=\"jkl-text-input__input\"\n                        {...inputProps}\n                    />\n                    {action && (\n                        <IconButton\n                            className=\"jkl-text-input__action-button\"\n                            iconType={action.icon}\n                            buttonTitle={action.label}\n                            onClick={action.onClick}\n                            onFocus={action.onFocus}\n                            onBlur={action.onBlur}\n                        />\n                    )}\n                </div>\n                <SupportLabel\n                    inverted={inverted}\n                    id={supportId}\n                    helpLabel={helpLabel}\n                    errorLabel={errorLabel}\n                    srOnly={inline}\n                />\n            </div>\n        );\n    },\n);\nTextInput.displayName = \"TextInput\";\n","import React, { useState, ChangeEvent } from \"react\";\nimport { ExampleComponentProps } from \"@fremtind/jkl-portal-components\";\nimport { LabelVariant } from \"@fremtind/jkl-core\";\nimport { TextInput } from \"../src\";\nimport { Action } from \"../src/TextInput\";\n\nexport function TextInputExample({ choiceValues, boolValues }: ExampleComponentProps) {\n    const [value, setValue] = useState(\"\");\n    const handleChange = (e: ChangeEvent<HTMLInputElement>) => setValue(e.target.value);\n    const variant = choiceValues && (choiceValues[\"Variant\"] as LabelVariant);\n    const inline = boolValues && boolValues[\"Inline\"];\n    const action =\n        boolValues && boolValues[\"Med handling\"]\n            ? ({\n                  icon: \"clear\",\n                  label: \"Nullstill feltet\",\n                  onClick: () => setValue(\"\"),\n              } as Action)\n            : undefined;\n    const inverted = boolValues && boolValues[\"Invertert\"];\n    const compact = boolValues && boolValues[\"Kompakt\"];\n    const helpLabel = boolValues && boolValues[\"Med hjelpetekst\"] ? \"Help label\" : undefined;\n    const errorLabel = boolValues && boolValues[\"Med feilmelding\"] ? \"Error label\" : undefined;\n\n    return (\n        <TextInput\n            variant={variant}\n            inline={inline}\n            inverted={inverted}\n            forceCompact={compact}\n            action={action}\n            label=\"Skriv noe her\"\n            helpLabel={helpLabel}\n            errorLabel={errorLabel}\n            placeholder=\"Placeholder\"\n            maxLength={35}\n            value={value}\n            onChange={handleChange}\n            onKeyDown={() => console.log(\"onKeyDown event\")}\n        />\n    );\n}\n","import React, { useState, ChangeEvent } from \"react\";\nimport { ExampleComponentProps } from \"@fremtind/jkl-portal-components\";\nimport { LabelVariant } from \"@fremtind/jkl-core\";\nimport { TextArea } from \"../src\";\n\nexport function TextAreaExample({ choiceValues, boolValues }: ExampleComponentProps) {\n    const [value, setValue] = useState(\"\");\n    const handleChange = (e: ChangeEvent<HTMLTextAreaElement>) => setValue(e.target.value);\n    const variant = choiceValues && (choiceValues[\"Variant\"] as LabelVariant);\n    const inverted = boolValues && boolValues[\"Invertert\"];\n    const compact = boolValues && boolValues[\"Kompakt\"];\n    const autoExpand = boolValues && boolValues[\"Ekspanderende\"];\n    const helpLabel = boolValues && boolValues[\"Med hjelpetekst\"] ? \"Help label\" : undefined;\n    const errorLabel = boolValues && boolValues[\"Med feilmelding\"] ? \"Error label\" : undefined;\n\n    return (\n        <TextArea\n            variant={variant}\n            inverted={inverted}\n            forceCompact={compact}\n            placeholder=\"Placeholder\"\n            helpLabel={helpLabel}\n            errorLabel={errorLabel}\n            className=\"jkl-spacing--top-2\"\n            label=\"Skriv noe her\"\n            autoExpand={autoExpand}\n            value={value}\n            onChange={handleChange}\n            onKeyDown={() => console.log(\"onKeyDown event\")}\n        />\n    );\n}\n","import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/jokul/jokul/portal/src/components/Layout/DocPageLayout.tsx\";\nimport { TextInputExample } from \"./TextInputExample\";\nimport { TextAreaExample } from \"./TextAreaExample\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst Ingress = makeShortcode(\"Ingress\");\nconst ComponentExample = makeShortcode(\"ComponentExample\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <Ingress mdxType=\"Ingress\">\n    Vi bruker tekstfelt når vi vil at brukerne skal legge inn informasjon. Ledeteksten skal fortelle hva brukeren skal\n    oppgi i feltet.\n    </Ingress>\n    <ComponentExample component={TextInputExample} knobs={{\n      boolProps: [\"Inline\", \"Kompakt\", \"Invertert\", \"Med handling\", \"Med hjelpetekst\", \"Med feilmelding\"],\n      choiceProps: [{\n        name: \"Variant\",\n        values: [\"small\", \"medium\", \"large\"],\n        defaultValue: 1\n      }]\n    }} mdxType=\"ComponentExample\" />\n    <p>{`Tekstfelt godtar data med fast format eller fritekst. Fast format bruker du for eksempel når du vil at brukeren skal angi fødselsnummer eller et postnummer, mens fritekst passer til felt der brukerne skal fortelle noe med egne ord.`}</p>\n    <p>{`Velg størrelse på tekstefelt etter typen data brukerne skal legge inn.`}</p>\n    <h2>{`Typer tekstfelt`}</h2>\n    <p><strong parentName=\"p\">{`Vanlige tekstfelt:`}</strong>{`\nFor innhold som ikke overskrider lengden på feltet.`}</p>\n    <p><strong parentName=\"p\">{`Inline tekstfelt:`}</strong>{`\nTil spesialtilfeller, hvis vi for eksempel trenger å plassere et tekstfelt i en setning.`}</p>\n    <p><strong parentName=\"p\">{`Lange tekstfelt:`}</strong>{`\nNår innholdet blir lengre enn en setning. Høyden på feltet kan justeres.`}</p>\n    <ComponentExample component={TextAreaExample} knobs={{\n      boolProps: [\"Kompakt\", \"Invertert\", \"Ekspanderende\", \"Med hjelpetekst\", \"Med feilmelding\"],\n      choiceProps: [{\n        name: \"Variant\",\n        values: [\"small\", \"medium\", \"large\"],\n        defaultValue: 1\n      }]\n    }} mdxType=\"ComponentExample\" />\n    <h2>{`Tekst og validering`}</h2>\n    <p>{`Velg størrelse på ledetekst etter prinsippene for skjemadesign. Skriv en kort og tydelig ledetekst, som forteller brukerne hva de skal oppgi i feltet. Hvis det trengs, kan vi sette inn en hjelpetekst under feltet, som forklarer mer.`}</p>\n    <p>{`Hvis tekstfeltet ikke validerer, vises en feilmelding som forteller hva som er galt. Vær oppmerskom på at feilmeldingen erstatter en eventuell hjelpetekst, slik at den feilmeldingen du lager også må fortelle hva hjelpeteksten var.`}</p>\n    <p>{`Eksempel:\nHjelpetekst for et tekstfelt med fast format: `}<em parentName=\"p\">{`Fyll ut fødselsnummer, 11 siffer.`}</em>{` Feilemeldingstekst: `}<em parentName=\"p\">{`Du må fylle ut fødselsnummer, 11 siffer`}</em>{`.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}